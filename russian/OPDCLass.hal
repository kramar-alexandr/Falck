external function Boolean IsStandardUnused();
external function Boolean IsEnterprise();
external function Boolean StandardHansa();
external function Boolean HasATOL();

external function Boolean HasAccPeriods();
external function Boolean HasAccessGroups();
external function Boolean HasAddFee();
external function Boolean HasApprovals();
external function Boolean HasCCPayments();
external function Boolean HasAdvancedAccounting();
external function Boolean HasAdvancedCRM();
external function Boolean HasAdvancedPricing();
external function Boolean HasAdvancedProduction();
external function Boolean HasAdvancedStock();
external function Boolean HasAged();
external function Boolean HasBar();
external function Boolean HasBase2();
external function Boolean HasBranch();
external function Boolean HasBuyBack();
external function Boolean HasCategories();
//external function Boolean HasConsigmentStock();
external function Boolean HasCommunicator();
external function Boolean HasConsignmentStock();
external function Boolean HasContactClassification();
external function Boolean HasContactRelations();
external function Boolean HasConsolidation();
external function Boolean HasCountryPerCustomer();
external function Boolean HasCreditLimit();
external function Boolean HasCustItem();
external function Boolean HasCustomerSearchKey();
external function Boolean HasCustomerStatusReport();
external function Boolean HasDownpayments();
external function Boolean HasDefineColumns();
external function Boolean HasDeliveryAddress();
external function Boolean HasDepartments();
external function Boolean HasETaxDocuments();
external function Boolean HasEInvoicing();
external function Boolean HasEndorsedChecks();
external function Boolean HasExtraNLComment();
external function Boolean HasExtTax();
external function Boolean HasFavouriteActTypes();
external function Boolean HasFiscalPrinter();
external function Boolean HasFormEditor();
external function Boolean HasFreightAdvanced();
external function Boolean HasHideCostPrice();
external function Boolean HasHotelInterface();
external function Boolean HasGuestUserDefined();
external function Boolean HasJewelleryInterface();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIOUChecks();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasKPIs();
external function Boolean HasLanguages();
external function Boolean HasLimitedAccess();
external function Boolean HasLocalMachines();
external function Boolean HasLoyaltyCards();
external function Boolean HasMailTags();
external function Boolean HasMainPartner();
external function Boolean HasMultiCurrency();
external function Boolean HasMultiLocations();
external function Boolean HasNLBudget();
external function Boolean HasNLBudgetClass();
external function Boolean HasObjects();
external function Boolean HasInvoiceOfficialSerNr();
external function Boolean HasOfficialSerNr();
external function Boolean HasOrderClasses();
external function Boolean HasPreferedOfficialSerNr();
external function Boolean HasNumberSeries();
external function Boolean HasPersons();
external function Boolean HasPocketScreen();
external function Boolean HasPositions();
external function Boolean HasPrepayments();
external function Boolean HasProjects();
external function Boolean HasPriceLists();
external function Boolean HasQualityControl();
external function Boolean HasReconLevel2();
external function Boolean HasReminderLevel();
external function Boolean HasRemoteBackup();
external function Boolean HasResourceDisplayGroups();
external function Boolean HasRussianPrepayment();
external function Boolean HasRetGoodsToSupp();
external function Boolean HasReturnedGoods();
external function Boolean HasRoomPackages();
external function Boolean HasRoomTypes();
external function Boolean HasRoute();
external function Boolean HasSalesman();
external function Boolean HasSalesmanBonus();
external function Boolean HasSalesGroup();
external function Boolean HasSecondQuantity();
external function Boolean HasSerialNumbers();
external function Boolean HasServerInCloud();
external function Boolean HasSettlementDiscount();
external function Boolean HasSimulations();
external function Boolean hasSimAccruals();
external function Boolean HasSkypeConnection();
external function Boolean HasSIPServerConnection();
external function Boolean HasStrAsSignFType();
external function Boolean HasTouchScreenDevice();
external function Boolean HasTaxMatrix();
external function Boolean HasTestFeatures();
external function Boolean HasMetroTestFeatures();
external function Boolean HasWorkOrders();
external function Boolean HasThrouLocation();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasVATZone();
external function Boolean HasWithholdingTax();
external function Boolean HasWithholdingTaxAdvanced();
external function Boolean HasWorkOrders();
external function Boolean HasWorkflowOverview();

external function Boolean HasStandardCRM();
external function Boolean HasStandardOrganizer();
external function Boolean HasStandardCommunicator();

external function Boolean HasEMail();
external function Boolean HasExternalEMail();

external function Boolean HasModAT2();
external function Boolean HasModBA();
external function Boolean HasModCheck();
external function Boolean HasModCL();
external function Boolean HasModCO();
external function Boolean HasModCons();
external function Boolean HasModCourses();
external function Boolean HasModCredMan();
external function Boolean HasModCRM();
external function Boolean HasModEDI();
external function Boolean HasModExp();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModIntStock();
external function Boolean HasModNL();
external function Boolean HasPaymentGateway();
external function Boolean HasModPO();
external function Boolean HasModPOS();
external function Boolean HasModPL();
external function Boolean HasModPOProg();
external function Boolean HasModPP();
external function Boolean HasModProd();
external function Boolean HasModQT();
external function Boolean HasModRent();
external function Boolean HasModRest();
external function Boolean HasModRsrt();
external function Boolean HasModSO();
external function Boolean HasModSL();
external function Boolean HasModSVO();
external function Boolean HasModTS();
external function Boolean HasModWHM();
external function Boolean HasModDI();
external function Boolean UsePostOKButton();
external function Boolean HasBankImport();
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasConsStockMoveInvoices();

procedure dummy() 
begin 
  SetLangMode(LangRussian,"RUS",0); 
  return; 
end;

window OPDClass:2
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,t,v,vm,vs;
  Integer tilenr;
  Integer f,flipnr;

  WindowBegin("Платеж поставщику",OPDClass,CGview,-);
  SetWRect(20,80,640,464);
  Sizeable(-1,-1,0,0);
  UseView(OPVc);
  ActiveFieldOnNew("PayDate");
  h = 100; h2 = 280; h3 = 490; v = 6; vs = 20;
  if (IsEnterprise) then begin
    Tile(0,110,false,"",SerNr);
  end;
  if (HasNumberSeries) then begin
    EditField(h,v, 80,"Номер",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"Номер",St_i,SerNr,false,0);
  end;
  EditField(h2,v,80,"Дата платежа",Normal,PayDate,false,PasteCurDate);
  if (HasModNL) then begin
    EditField(h3,v,82,"Дата операции",Normal,TransDate,false,PasteCurDate);
  end;
  EditField(h,v+=vs,30,"Способ оплаты",Normal,PayMode,false,PMSClass);
  CheckBox(h4=-100,6,0,"Заказан",OrderedFlag);
  CheckBox(h4=-100,6+vs,0,"OK",DoneFlag);
  EnterSkip(Math);
  EditField(h2,v,120,"Р/с плательщика",Normal,BankAcc,false,0);
  EditField(h3,v,82,"Ключ сорт.",Normal,SortCode,false,0);
    EditField(h,v+=vs,80,"Ссылка",Normal,PayNumber,false,0);
  if (HasAdvancedAccounting) then begin
    CheckBox(h2,v,0,"Инфо постав. в опер.",APonTR);
  end;
  if (HasLanguages) then begin
    EditField(h3,v,82,"Язык",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,472,"Комментарий",Normal,BankName,false,0);
  end else begin 
    v = v + 10;
  end;
  EnterSkip(Math);
//  CheckBox(h,v=6,0,"Re_jected",RejectedFlag);//not used any more
//  CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
  tilenr = 1;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Платежи"); tilenr = tilenr + 1;
    TileButton(tilenr,"Банк"); tilenr = tilenr + 1;
    tilenr = 1;
    Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  end;
//  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
//  CheckBox(25,v=-20,0,"OK",DoneFlag);
  //cust - start KB 06.11.2019
  if (HasLocalization("LVA")) then begin
    HalPushButton(150,-50,150+100,-5,"EPaymentSignOPDsm","Подпись");
    HalPushButton(150,-25,150+100,-5,"EPaymentQueOPDsm","Отправить");
  end;
  //Bk - start KB 08.03.2019 //pangaliidestus
  if (HasLocalization("EST")) then begin //Bk
  //HalPushButton(150,-50,150+100,-5,"EPaymentSignOPDsm","Подписать");
  HalPushButton(150,-25,150+100,-5,"SignAndSendOPDsm","Отправить"); //4.4
  //Bk - end
  end;
  //cust - end
  if (HasMultiCurrency) then begin
    EditField(-300,-21,50,"Валюта",Normal,PayCurCode,false,CurncyCodeSClass);
  end;
  EditField(-125,-21,85,"ВСЕГО",Normal,CurPayVal,true,0);
  h = 10;
  if (tilenr>1) then begin
    if (HasLocalization("EST,LVA")) then begin         
      MatrixBegin(h,v=24,-50,-50,-,200);
    end else begin
    MatrixBegin(h,v=24,-50,-40,-,200);
    end;
  end else begin
    if (HasLocalization("AUS,EST,LVA,RUS,POL") or HasMultiCurrency or HasObjects or HasRussianPrepayment or HasPrepayments or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN"))) then begin
      MatrixBegin(h,v+=40,-50,-40,-,200);
    end else begin
      MatrixBegin(h,v+=30,-30,-30,-,200);
    end;
  end;
  vm = v;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kPaymentRowTypeNormal,24,"№ сч/ф",0,VISerNr,false,APSClass);
  MatCol(t,105,"Поставщик",0,VECode,false,VESClass);
  EnterSkip(RecVal);
  MatCol(t=kPaymentRowTypeSettlementDiscount,24,"",0,VISerNr,false,APSClass);
  MatText(t,70,"Скидка",true);
  MatCol(t,140,"Объект",0,Objects,false,ObjSClass);
  MatCol(t,-360,"Валюта сч/ф пост.",0,PInvCurncy,true,0);
  MatCol(t,-320,"Сумма сч/ф",0,PInvVal,true,0);
  MatCol(t,-240,"Валюта банка",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-200,"Сумма банка",0,BankVal,true,0);
  MatCol(t,-120,"Вал.платежа",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-80,"Перечислено",0,RecVal,true,0);
  MatCol(t=kPaymentRowTypeBankFee,24,"",0,VISerNr,false,APSClass);
  MatText(t,105,"Комис. банка",true);
  MatCol(t,165,"Метка/Объект",0,Objects,false,ObjSClass); // 
  MatCol(t,-390,"Валюта сч/ф пост.",0,PInvCurncy,true,0);
  MatCol(t,-350,"Сумма сч/ф",0,PInvVal,true,0);
  MatCol(t,-260,"Вал.банка",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Сумма банка",0,BankVal,true,0);
  MatCol(t,-130,"Вал.платежа",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Перечислено",0,RecVal,true,0);
  flipnr = 1;
  if (HasMultiCurrency or HasObjects or HasRussianPrepayment or HasPrepayments or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA")) or HasLocalization("AUS")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  end;
  MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
  if (HasMultiCurrency) then begin
    MatCol(t,-260,"Валюта банка",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Сумма банка",0,BankVal,true,0);
    MatCol(t,-130,"Валюта платежа",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Перечислено",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Комментарий",0,Comment,false,0);
    MatCol(t,-350,"Валюта сч/ф поставщика",0,PInvCurncy,true,0);
    MatCol(t,-310,"Не оплачено",0,PInvOutstand,false,0);
    MatCol(t,-220,"Сумма сч/ф",0,PInvVal,true,0);
    MatCol(t,-130,"Валюта платежа",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Перечислено",0,RecVal,true,0);
    if (HasLocalization("POL")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
      MatCol(t,-310,"Валюта банка",0,BankCurncy,true,CurncyCodeSClass);
      MatCol(t,-270,"Сумма банка",0,BankVal,true,0);
      MatCol(t,-180,"В б. вал. 1",0,ToRateB1BankVal,true,0);
      MatCol(t,-110,"Б. вал. 1",0,B1BankVal,true,0);
    end;
  end else begin
    MatCol(t,-270,"Сумма сч.",0,PInvOutstand,false,0);
    MatCol(t,-180,"Сумма к спис.",0,PInvVal,true,0);
    MatCol(t,-90,"Получ. сумма",0,RecVal,true,0);
  end;
  if (IsEnterprise==false) then begin
    if (HasObjects) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
      if (HasRussianPrepayment) then begin
        if (HasModPO) then begin
          MatCol(t,-320,"Объекты",0,Objects,false,ObjSClass);
          MatCol(t,-200,"Счет",0,OrderNr,false,POSClass);
        end else begin
          MatCol(t,-260,"Объекты",0,Objects,false,ObjSClass);
        end;
        MatCol(t,-100,"Предоплата",0,PrepayNr,false,OPPSClass);
      end else begin
        MatCol(t,-160,"Объекты",0,Objects,false,ObjSClass);
      end;
    end else begin
      if (HasRussianPrepayment) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Комментарий",0,Comment,false,0);
        if (HasModPO) then begin
          MatCol(t,-200,"Счет",0,OrderNr,false,POSClass);
        end;
        MatCol(t,-100,"Предоплата",0,PrepayNr,false,OPPSClass);
      end;
    end;
    if ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA")) then begin 
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t,360,"Bank Reference",0,BankRefStr,false,0);
      MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-110,"#V-Cd#",0,VATCode,false,VATCodeSClass);  
      MatCol(t,-80,"#VAT# Value",0,VATVal,false,0);  
    end;
    if (HasRussianPrepayment==false and HasPrepayments) then begin 
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"№ предварительного платежа",0,PrepayNr,false,OPPSClass);
      if (HasModPO) then begin
        MatCol(t,-200,"№. заказа",0,OrderNr,false,POSClass);
      end;
      MatCol(t,-130,"#S.# Вал.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Отправл. сумма",0,RecVal,true,0);      
    end;
    if (HasLocalization("AUS")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Вал.",0,RecCurncy,true,CurncyCodeSClass);         
      MatCol(t,-90,"Отпр. значения",0,RecVal,true,0);               
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
      MatCol(t,-160,"На счет банка",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-90,"#Sort Code#",0,SortCode,false,0); 
    end;
    if (BuildProductCode=="StandardRestaurant" or BuildProductCode=="StandardHealthcare") then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0); 
      MatCol(t,-270,"Сп. оплаты",0,PayMode,false,PMSClass); 
      MatCol(t,-220,"Нр #Cheque# .",0,ChequeNr,false,0); 
      MatCol(t,-130,"Вал #S.# ",0,RecCurncy,true,CurncyCodeSClass); 
      MatCol(t,-90,"Отосланная сумма",0,RecVal,true,0); 
    end;
  end else begin
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Комментарий",0,Comment,false,0);
      MatCol(t,-270,"Сп. оплаты",0,PayMode,false,PMSClass);
      MatCol(t,-220,"№ чека",0,ChequeNr,false,0);
      MatCol(t,-130,"Валюта платежа",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Перечислено",0,RecVal,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Комментарий",0,Comment,false,0);
    MatCol(t,-320,"№ сч.",0,OrderNr,false,POSClass);
    MatCol(t,-230,"№ предопл.",0,PrepayNr,false,OPPSClass);
    MatCol(t,-130,"Вал. платежа",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Перечислено",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Комментарий",0,Comment,false,0);
    MatCol(t,-310,"Код",0,VATCode,false,VATCodeSClass);
    MatCol(t,-270,"НДС",0,VATVal,false,0);
//  MatCol(t,-200,"Extra Tax",0,TAX1Sum,false,0);
    MatCol(t,-130,"Валюта платежа",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Перечислено",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
    MatCol(t,-260,"Объекты",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
      MatCol(t,-130,"Валюта платежа",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Перечислено",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Счёт округления",0,RoundOffAcc,false,AccSClass);
      MatCol(t,-270,"Округление",0,RoundOff,true,0);
      MatCol(t,-170,"#Instalment#",0,InstNr,false,APInstallSClass);         
      MatCol(t,-100,"Номер ссылки",0,rkPayNumber,false,0);
    end else begin
      MatCol(t=kPaymentRowTypeNormal,-170,"Счёт округления",0,RoundOffAcc,false,AccSClass);
      MatCol(t,-80,"Счёт округления",0,RoundOff,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Счёт кредиторов",0,APAcc,false,AccSClass);
    MatCol(t,-370,"Ссылка банка",0,BankRefStr,false,0);
    MatCol(t,-270,"На р/с",0,BankAcc,false,VEBankAccSClass);
    MatCol(t,-140,"Ключ сортировки",0,SortCode,false,0);
    MatCol(t,-50,"Код платежа",5,PaymentCode,false,PaymentCodeSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,200,"Вал. банка",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-400,"Сумма банка",0,BankVal,true,0);
    MatCol(t,-330,"Комиссия",0,BankFeeVal,true,0);
    MatCol(t,-270,"К осн. вал. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-200,"Б. вал. 1",0,B1BankVal,true,0);
    MatCol(t,-130,"Б. вал. 2",0,B2BankVal,true,0);
//  MatCol(t,-120,"Fee %",0,BankFeePrc,true,0); /* What was this ?? */
    if (StandardHansa==false) then begin
    MatCol(t,-60,"Коэффициент",0,Coef,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,-470,"Валюта банка",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-430,"Сумма банка",0,BankVal,true,0);
    MatCol(t,-350,"Курс",0,FrRateBankVal,true,0);
    MatCol(t,-310,"К осн. вал. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-240,"К осн. вал. 2",0,ToRateB2BankVal,true,0);
    MatCol(t,-170,"Осн. курс 1",0,BaseRate1BankVal,true,0);
    MatCol(t,-95,"Осн. курс 2",0,BaseRate2BankVal,true,0);
//    if (StandardHansa==false) then begin
//      MatCol(t,-30,"Coef. Value",0,Coef,true,0);
//    end;
  end;
  if (HasLocalization("ARG")) then begin         
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Текст",0,Comment,false,0);
    MatCol(t,-260,"Метод платежа",0,PayMode,false,PMSClass);
    MatCol(t,-200,"Удерж. нал.",0,WHTax,false,WHTaxSClass);
    MatCol(t,-100,"Удерж. осн. нал",0,WHTaxBase,false,0);
//    MatCol(t,-100,"",0,WHTaxAccumBase,false,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");         
  if (HasSettlementDiscount) then begin
    RowMenuItem(0,"Добавить скидку по платежу",' ',' ',4312,"CashDiscountOPDsm");         
  end;
  if (HasModPL and HasModNL) then begin
    RowMenuItem(0,"Добавить банковский платёж",' ',' ',4312,"NewFeeOPDsm");         
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  if (tilenr>1) then begin
//    v = 18;
    v = v + 1;
  end;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,120,true,tilenr,BankAcc); tilenr = tilenr + 1;
    v=6; h= 100;
    EditField(h,v,120,"Собст.счет банка",Normal,BankAcc,false,0);

    CheckBox(h2,v,0,"Иностранный платеж",ForeignPayment);
    if (HasApprovals) then begin
      SoftEditField(h3=520,v,123,"Статус утверждения",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*      
      ButtonFrame(h3=490,v=vm,123,6,"Статус утверждения");
      RadioButton(h3,v,kAcceptanceStateNotRequired,0,"не обязательно",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"не начато",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"не запрошено",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStatePending,0,"в ожидании",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"утверждено",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"отклонено",AcceptanceStatus);
*/      
/*
  CheckBox(25,v=-39,0,"Заказан",OrderedFlag);
  CheckBox(25,v=-20,0,"OK",DoneFlag);
  HalPushButton(150,-30,150+100,-5,"EPaymentQueOPDsm","В банк");
*/
    end;
    ButtonFrame(h=40,vm=(v+=40),123,3,"Purchase Ledger");
    RadioButton(h,v,0,0,"По строкам",PayperSupplier);
    RadioButton(h,v+=16,1,0,"По поставщикам",PayperSupplier);
    RadioButton(h,v+=16,2,0,"Пакетом",PayperSupplier);
    ButtonFrame(h2=190,v=vm,123,3,"Тип платежа");
    RadioButton(h2,v,0,0,"Обычный",PayMethod);
    RadioButton(h2,v+=16,1,0,"Экспресс",PayMethod);
    RadioButton(h2,v+=16,2,0,"Срочный экспресс",PayMethod);
    ButtonFrame(h3=340,v=vm,123,3,"Комиссия банка");
    RadioButton(h3,v,0,0,"Мы платим",Bankfees);
    RadioButton(h3,v+=16,1,0,"Платит поставщик",Bankfees);
    RadioButton(h3,v+=16,2,0,"Общий",Bankfees);
    
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Статус платежа",'r',4,"OPStatusDsm");
    if (HasModPL and HasModNL) then begin
      SpecialMenu("Добавить комиссию банка",' ',3,"NewFeeOPDsm");
    end;
    if (IsEnterprise) then begin
//    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
      SpecialMenu("(-",' ',1,"");
      SpecialMenu("Добавить скидку",' ',2,"CashDiscountOPDsm");
    end;
    if (HasIntegratedNL) then begin
      SpecialMenu("Открыть запись операций",'t',5,"OpenTRFromOP");
    end;
  end else begin
//    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
    if (HasIntegratedNL) then begin
    SpecialMenu("Открыть запись операций",'t',5,"OpenTRFromOP");
  end;
  if (IsEnterprise) then begin
//    SpecialMenu("Open Withholding Certificate",'',5,"OpenWHCertificateOPDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Задать номер чека",' ',6,"AssignChequeOPDsm");
      SpecialMenu("Подготовить чек",'e',9,"PrepChequesOPDsm");
      SpecialMenu("Распечатать чек",' ',9,"PrintChequesOPDsm");
    end;
  end;
  if (HasWithholdingTax) then begin
    SpecialMenu("Рассчитать удерживаемый налог",' ',11,"WithholdTaxesOPDsm");
  end;
  if (IsEnterprise) then begin
    SpecialMenu("Статус платежа",'r',4,"OPStatusDsm");
    SpecialMenu("Выписка банка",' ',12,"BankStOPDsm");
  //cust - start KB 06.11.2019
    if (HasLocalization("LVA")) then begin  
      SpecialMenu("Статус электронных платежей",' ',13,"EPaymentStatusOPDsm");
    end;
    if (HasLocalization("EST")) then begin  
      //Bk - start KB 08.03.2019 //pangaliidestus
      SpecialMenu("Статус электронного платежа",' ',13,"BK_EPayStatusOPDsm");
      //Bk - end
    end;
  //cust - end
    SpecialMenu("Распечатать ПКО-РКО",' ',4,"PrintCashInOutOPDsm");
      SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");  
    end else begin
      if (HasLocalization("AUS")) then begin
        SpecialMenu("Экспорт Банковских Файлов",'',4,"BankingFileExportDsm"); 
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Запросить утверждение",' ',6,"OPSendforAcceptanceOPDsm"); 
      SpecialMenu("Отменить запрос утверждения",' ',2,"CancelApprovalRequestDsm"); 
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
    if (HasDownpayments) then begin
      SpecialMenu("Предоплата",' ',7,"DownPayFromOPDsm"); 
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Создать выплату из кассы",' ',8,"CLOutFromOPDsm");         
    end;
    if (HaseMail) then begin
      SpecialMenu("Создать электронное письмо",'m',9,"CreateMailFromOPDsm");         
    end;
    if (HasLocalization("HRV,RUS,SLV,SRB,SVN,UKR") and (HasIntegratedNL or IsEnterprise)) then begin
      SpecialMenu("Создать коррекцию НДС",' ',9,"VATCorrectionOPsm"); 
    end;
    if (HasLocalization("POL") and IsEnterprise) then begin
      SpecialMenu("Создать коррекцию #VAT# #P/L#",' ',9,"VATCorrectionOPsm");         
  end;
  end;
  EndWindow;
end;
