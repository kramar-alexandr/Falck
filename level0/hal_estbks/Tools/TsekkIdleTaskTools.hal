//Bk //tsekk.ee
external function Boolean CheckInternetEnabler();
//KB 08.11.2017 new functions
external procedure GetTsekkEInvoice(record EInvoiceBlock,string,string,var integer);//ts - 2018/04, added parameter for e-service statistic
external function boolean IsTsekkActivated();
remote procedure SimpleDebugMsg(string, string);
remote updating procedure StoreCUServiceUsage(date,string,Integer,string,Integer,Integer);//ts - 2018/04, e-service statistic

function integer FindMinInt(integer val1, integer val2)
begin
  integer res;

  if(val1 <= val2) then begin
    res = val1;
  end else begin
    res = val2;
  end;
  FindMinInt = res;
  return;
end;

procedure ReceiveTsekkEInvoiceIdleTaskRemoveIdleTask()
begin
  RemoveTask("ReceiveTsekkEInvoiceIdleTask");
  SimpleDebugMsg("Costpocket","ReceiveTsekkEInvoiceIdleTask removed");
  return;
end;

global
procedure RequestForSingleComp(string arg)
begin
  integer oldcomp;
  record EInvoiceBlock EIb;
  record CYBlock CYb;
  integer cnt;

  oldcomp = CurrentCompany; 
  if (SetCompanyCode(arg,false)) then begin
    BlockLoad(EIb);
    BlockLoad(CYb);
    BlockLoad(CYb);
    SimpleDebugMsg("Costpocket","Checking e-invoices for company " & arg);
    GetTsekkEInvoice(EIb,"RECEIVETSEKKEINVOICE","TSEKKEE",cnt);//ts - 2018/04, added parameter for e-service statistic
    queued.StoreCUServiceUsage(CurrentDate,CYb.OrgNr,13,"TSEKKEE",1,cnt);//ts - 2018/04, e-service statistic
  end;
  ResetCompany(oldcomp);
  return;
end;

function integer GetEmptySlotNumber(var array boolean slotsArray, integer size)
begin
  integer res,i;
  boolean emptyExists;
  longint iter;

  for (i=0;i<size;i=i+1) begin
    if(slotsArray[i] == false) then begin
      emptyExists = true;
      i = size;
    end;
  end;
  if(emptyExists) then begin
    Randomize;
    i = Random(0,size-1);
    while (slotsArray[i] != false AND iter < 100000) begin
      i = Random(0,size-1);
      iter = iter + 1;
    end;
    slotsArray[i] = true;
    res = i + 1;
    SimpleDebugMsg("Costpocket","Found time slot is " & res);
  end else begin
    res = 1;
    SimpleDebugMsg("Costpocket","No empty time slot, taking 1");
  end;
  GetEmptySlotNumber = res;
  return;
end;

global
procedure ReceiveTsekkEInvoiceIdleTask(string arg)
begin
  record ServiceCacheVc SCr;
  record EInvQueryIntrvlBlock EInvQueryIntrvlr;
  boolean testf,found,stopidletaskf;
  integer i,rwcnt,reqInterval;
  integer oldcomp;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  record EInvoiceBlock EIb;
  time planCompReqTime;
  array boolean slotsArray;
  longint error;

  BlockLoad(EInvQueryIntrvlr);
  if ((EInvQueryIntrvlr.SupInvReq >= 60) AND (EInvQueryIntrvlr.SupInvReq < 14400)) then begin 
    reqInterval = FindMinInt(EInvQueryIntrvlr.SupInvReq / 5,120);
  end else begin
    reqInterval = 130;
  end;
  stopidletaskf = true; //stop unless some company will change it to false below
  SCr.Code = "RECEIVETSEKKEINVOICE";
  SCr.Partner = "TSEKKEE";
  found = ReadFirstMain(SCr,2,true);
  if (found == false) then begin
    SimpleDebugMsg("Costpocket","Service cache NOT found in server");
  end;
  if (found) then begin
    oldcomp = CurrentCompany;  
    BlockLoad(Compb);
    rwcnt = MatRowCnt(Compb);
    for (i=0;i<rwcnt;i=i+1) begin
      slotsArray[i] = false;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Compb,i,Comprw);
      if (blank(Comprw.TCPIP)) then begin
        if (SetCompanyCode(Comprw.CompCode,false)) then begin
          BlockLoad(EIb);
          SimpleDebugMsg("Costpocket","Switched to company " & Comprw.CompCode);
          testf = true;
          if (!IsTsekkActivated) then begin//ts - 281/04, removed OR EIb.StopEInvoices == 1
            testf = false;
            SimpleDebugMsg("Costpocket","Service is disabled in company " & Comprw.CompCode);
            SimpleDebugMsg("Costpocket","IsTsekkActivated " & IsTsekkActivated);
          end;
          if (EIb.StopInEstEInvoices == 1) then begin//ts - 281/04, removed OR EIb.StopEInvoices == 1
            SimpleDebugMsg("Costpocket","EIb.StopInEstEInvoices " & EIb.StopInEstEInvoices);
            goto LSKIPCompany;
          end;
          if (EIb.TestFlag == 0) then begin
            if (CheckInternetEnabler==false) then begin
              error = 1500200;
              LogText(0,USetStr(error));
              goto LSKIPCompany;
            end;
          end;
          if (testf) then begin
            stopidletaskf = false;
            SimpleDebugMsg("Costpocket","Service is activated in company " & Comprw.CompCode);
            planCompReqTime = AddSeconds(CurrentTime, GetEmptySlotNumber(slotsArray,rwcnt) * reqInterval);
            if(TaskExists("RequestForSingleComp" & Comprw.CompCode) == false) then begin
              NewTimedTask2("RequestForSingleComp" & Comprw.CompCode,"RequestForSingleComp","RequestForSingleComp",Comprw.CompCode,CurrentDate,planCompReqTime,"","");
              SimpleDebugMsg("Costpocket","Scheduling check of e-invoices for company " & Comprw.CompCode & " at " & planCompReqTime);
            end else begin
              SimpleDebugMsg("Costpocket","Already scheduled check e-invoices for company " & Comprw.CompCode);
            end;
          end;
        end;
      end;
LSKIPCompany:;
    end;
    ResetCompany(oldcomp);
  end;
  //This check should happen regardless of other conditions
  if (stopidletaskf) then begin
    SimpleDebugMsg("Costpocket","Service is inactive in all companies");
    ReceiveTsekkEInvoiceIdleTaskRemoveIdleTask;
    SimpleDebugMsg("Costpocket",USetStr(1500201));
  end;
  return;
end;

//TODO remove if task will be integrated into existing functions
global
procedure InitIdleTasksTsekk()
begin
  record EInvQueryIntrvlBlock EInvQueryIntrvlr;
  integer res;
  
  BlockLoad(EInvQueryIntrvlr);
  res = EInvQueryIntrvlr.SupInvReq;
  if ((res < 60) or (res > 14400)) then begin 
    res = 400; 
  end;
  if (ServerMode or SingleUserMode) then begin
    if(TaskExists("ReceiveTsekkEInvoiceIdleTask") == false) then begin
      NewPeriodicTask2("ReceiveTsekkEInvoiceIdleTask","Periodically check Costpocket for invoices","ReceiveTsekkEInvoiceIdleTask","",res,"");
      SimpleDebugMsg("Costpocket","NewPeriodicTask created with period " & res);
    end else begin
      SimpleDebugMsg("Costpocket","NewPeriodicTask already exists");
    end;
  end;
  return;
end;
