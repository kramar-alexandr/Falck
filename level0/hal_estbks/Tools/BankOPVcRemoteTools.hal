//pangaliidestus
external procedure GetUserName(string,var string);
external function Boolean GetPMRow(string,var row PMBlock);
external function boolean IsPartnerEPayActive(string);
external function string 10 BankSWIFTToPartnerCode(string);
external procedure BankingDebugMsg(string,string);
external updating procedure MarkBankQueRecordSent(var record BankReqQueVc,string);
external updating procedure MarkBankQueRecordTried(var record BankReqQueVc,string);
external function integer BankQueStatusNew();
external function integer BankQueReplyProgress();
external function integer BankQueReplySuccess();
external function integer BankQueReplyError();
external procedure BankFillReqQueRowsFromXML(var record BankReqQueVc,xml);
external function integer GetNbOfTxsFromXML(xml);

function string 10 GetPartnerFromPayMode(string payModeCode)
begin
  string 10 res;
  row PMBlock PMblrw;
  string 10 bankCode;
  record BankVc Bankr;

  if (GetPMRow(payModeCode,PMblrw)) then begin
    Bankr.Code = PMblrw.BankCode;
    if (ReadFirstMain(Bankr,1,true)) then begin
      res = BankSWIFTToPartnerCode(Bankr.SWIFT);
    end;
  end;
  GetPartnerFromPayMode = res;
  return;
end;

global
function string 255 GetUniqueFileNameForOP(record OPVc OPr)
begin
  string 255 res;

  res = "op_" & OPr.SerNr & "_comp_" & CurrentCompany & "_" & CurrentUser;
  GetUniqueFileNameForOP = res;
  return;
end;

function string 60 GetMsgIDFromXML(xml xmlData)
begin
  string 60 res;

  res = XmlGet(xmlData,"Document/CstmrCdtTrfInitn/GrpHdr/MsgId");
  GetMsgIDFromXML = res;
  return;
end;

global
function boolean OPCanAddToBankQueue(record OPVc OPr, var string errMsg)
begin
  boolean res;
  record BankReqQueVc BankReqQuer;
  row OPVc OPrw;
  record CYBlock CYb;
  string 60 userName;
  string 10 partner;
  integer rwcnt,i;

  BlockLoad(CYb);
  res = true;
  if (OPr.DoneFlag != 0) then begin
    res = false;
    errMsg = USetStr(1137);
    goto LOPCanAddToBankQueue;
  end;
  //find in header index
  BankReqQuer.RecordID = OPr.SerNr & "";
  BankReqQuer.RecordType = "OPVc";
  if (ReadFirstKey("RecordIDType",BankReqQuer,2,true)) then begin
    res = false;
    errMsg = USetStr(1501062);
    goto LOPCanAddToBankQueue;
  end;
  //find in matrix index
  ResetLoop(BankReqQuer);
  RecordClear(BankReqQuer);
  BankReqQuer.RecordType = "OPVc";
  if (ReadFirstKey("RowRecordIDType:" & OPr.SerNr,BankReqQuer,1,true)) then begin
    res = false;
    errMsg = USetStr(1501062);
    goto LOPCanAddToBankQueue;
  end;
  if (blank(CYb.OrgNr)) then begin
    res = false;
    errMsg = USetStr(1501063);
    goto LOPCanAddToBankQueue;
  end;
  if (OPr.OrderedFlag == 0) then begin
    res = false;
    errMsg = USetStr(1501064);
    goto LOPCanAddToBankQueue;
  end;
  partner = GetPartnerFromPayMode(OPr.PayMode);
  switch(partner) begin
    case "SGW":
      if (IsPartnerEPayActive(partner) == false) then begin
        res = false;
        errMsg = USetStr(1501065) & partner & ": " & USetStr(1501066);
        goto LOPCanAddToBankQueue;
      end;
    otherwise
      res = false;
      errMsg = USetStr(1501067) & OPr.PayMode;
      goto LOPCanAddToBankQueue;
  end;
  //checking rows
  rwcnt = MatRowCnt(OPr);
  /*
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (blank(OPrw.BankRefStr)) then begin
      res = false;
      errMsg = USetStr(13205) & " " & USetStr(15094);
      goto LOPCanAddToBankQueue;
    end;
  end;
  */
LOPCanAddToBankQueue:;
  OPCanAddToBankQueue = res;
  return;
end;

global 
updating function boolean OPAddToBankReqQueue(record OPVc OPr, area xmlFileArea, string fileName, var record BankReqQueVc BankReqQuer)
begin
  boolean res;
  record CYBlock CYb;
  string 60 userName;
  xml parsedXML;

  parsedXML = ParseXMlArea(xmlFileArea);
  BlockLoad(CYb);
  GetUserName(CurrentUser,userName);
  RecordNew(BankReqQuer);
  BankReqQuer.RegNr = CYb.OrgNr;
  BankReqQuer.UserName = userName;
  BankReqQuer.BankReqType = "Payment"; //do not translate
  BankReqQuer.RecordType = "OPVc";
  BankReqQuer.RecordID = OPr.SerNr & "";
  //BankReqQuer.MsgID = GetMsgIDFromXML(parsedXML);
  BankReqQuer.ReqFileName = fileName;
  BankReqQuer.Status = BankQueStatusNew;
  BankReqQuer.SendAttempts = 0;
  BankReqQuer.StatusMessage = USetStr(1501068);
  BankReqQuer.CreationDate = CurrentDate;
  BankReqQuer.CreationTime = CurrentTime;
  BankReqQuer.Partner = GetPartnerFromPayMode(OPr.PayMode);
  BankReqQuer.NbOfTxs = GetNbOfTxsFromXML(parsedXML);
  BankReqQuer.SerNr = NextSerNr("BankReqQueVc",BankReqQuer.CreationDate,-1,false,"");
  BankFillReqQueRowsFromXML(BankReqQuer,parsedXML);
  if (RecordInsert(BankReqQuer,true)) then begin
    res = true;
  end;
  OPAddToBankReqQueue = res;
  return;
end;
