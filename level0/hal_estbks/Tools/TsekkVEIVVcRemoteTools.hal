//Bk //tsekk.ee
remote procedure CalcExpRow(var record ExpVc,Integer);
remote function Boolean ExpVc_PasteAccNumber(var record ExpVc,Integer);
remote function Boolean ExpVc_PastePerson(var record ExpVc);
remote function Boolean ExpVc_PasteVECode(var record ExpVc,Integer);
remote function LongInt ValidateVEIV(record VEIVVc,var string,var Integer);
external procedure NoDupObjs(string,var string);
//KB 09.11.2017 only new functions

function boolean GetCUByRegNr(string regNr, var record CUVc CUr)
begin
  boolean res;

  res = false;
  if(nonblank(regNr)) then begin
  CUr.RegNr1 = regNr;
  if ReadFirstKey("RegNr1",CUr,1,true) then begin
    res = true;
  end;
  end;
  GetCUByRegNr = res;
  return;
end;

function string 10 GetAccNrForVEIVRow(row VEIVVc VEIVrw, record VEIVVc VEIVr)
begin
  string 10 res;
  record CUVc CUr;

  if(nonblank(VEIVrw.CostAcc)) then begin
    res = VEIVrw.CostAcc;
  end else begin
    if (GetCUByRegNr(VEIVr.VERegNr1,CUr)) then begin
      res = CUr.AccCost;
    end;
  end;
  GetAccNrForVEIVRow = res;
  return;
end;

function boolean CanPackRowToVEIV(row VEIVVc VEIVrw, record VEIVVc targetVEIVr, var integer rowNrToPackInto)
begin
  boolean res;
  integer rwcnt,i;
  row VEIVVc VEIVrwToCompare;
  boolean allCondMet;

  res = false;
  rwcnt = MatRowCnt(targetVEIVr);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(targetVEIVr,i,VEIVrwToCompare);
    allCondMet = true;
    if(blank(VEIVrw.CostAcc) OR blank(VEIVrw.VATCode)) then begin
      allCondMet = false;
    end;
    if(VEIVrwToCompare.CostAcc != VEIVrw.CostAcc) then begin
      allCondMet = false;
    end;
    if(VEIVrwToCompare.VATCode != VEIVrw.VATCode) then begin
      allCondMet = false;
    end;
    if(VEIVrwToCompare.Objects != VEIVrw.Objects) then begin
      allCondMet = false;
    end;
    if (allCondMet == true) then begin
      rowNrToPackInto = i;
    res = true;
      goto LCanPackRowToVEIV;
    end;
  end;
LCanPackRowToVEIV:;
  CanPackRowToVEIV = res;
  return;
end;

procedure PackSimilarRowsInVEIV(var record VEIVVc newVEIVr, record VEIVVc origVEIVr)
begin
  integer origVEIVRowCnt,newVEIVRowCnt,i,rowNrToPackInto,rowNrToPutTo;
  row VEIVVc origVEIVrw,newVEIVrw;
  string 10 accNr;
  integer putToRowNumber;
  
  RecordNew(newVEIVr);
  origVEIVRowCnt = MatRowCnt(origVEIVr);
  for(i=0;i<origVEIVRowCnt;i=i+1) begin
    MatRowGet(origVEIVr,i,origVEIVrw);
    //Update the accnr, if blank try to take from CUVc
    accNr = GetAccNrForVEIVRow(origVEIVrw,origVEIVr);
    origVEIVrw.CostAcc = accNr;
    if(CanPackRowToVEIV(origVEIVrw,newVEIVr,rowNrToPackInto)) then begin //then add to existing row
      MatRowGet(newVEIVr,rowNrToPackInto,newVEIVrw);
      newVEIVrw.VESum = newVEIVrw.VESum + origVEIVrw.VESum;
      rowNrToPutTo = rowNrToPackInto;
    end else begin //then add new row
      ClearRow(newVEIVr,newVEIVrw,1);
      CopyRow(origVEIVr,origVEIVrw,newVEIVrw);
      if (origVEIVRowCnt == 1 and blank(newVEIVrw.VESum)) then begin //if only one row
        newVEIVrw.VESum = (origVEIVr.Sum4 / (100 + newVEIVrw.VEVATPrc)) * 100;
      end;
      rowNrToPutTo = MatRowCnt(newVEIVr);
    end;
    MatRowPut(newVEIVr,rowNrToPutTo,newVEIVrw);
  end;
LPackSimilarRowsInVEIV:;
  return;
end;

procedure AddVEIVRowToExp(row VEIVVc VEIVrw, record VEIVVc VEIVr, var record ExpVc Expr, boolean useRowComment, boolean addAccObj)
begin
  integer expRowCnt;
  row ExpVc Exprw;
  record CUVc CUr;
  string 60 objBeforeAcc,objAfterAcc;

  ClearRow(Expr,Exprw,1);
  Exprw.DocNr = VEIVr.InvoiceNr;
  Exprw.Sum = (VEIVrw.VESum * (VEIVrw.VEVATPrc / 100)) + VEIVrw.VESum;
  Exprw.VATCode = VEIVrw.VATCode;
  Exprw.AccNumber = VEIVrw.CostAcc;
  Exprw.Objects = VEIVrw.Objects;
  Exprw.ExpDate = VEIVr.InvDate;
  if (blank(VEIVr.VECode)) then begin
    if (GetCUByRegNr(VEIVr.VERegNr1,CUr)) then begin
      Exprw.VECode = CUr.Code;
    end;
  end else begin
    Exprw.VECode = VEIVr.VECode;
  end;
  expRowCnt = MatRowCnt(Expr);
  MatRowPut(Expr,expRowCnt,Exprw);
  ExpVc_PasteVECode(Expr,expRowCnt);
  objBeforeAcc = Exprw.Objects;
  ExpVc_PasteAccNumber(Expr,expRowCnt); //is pasting all acc realated data, including objects
  MatRowGet(Expr,expRowCnt,Exprw);
  objAfterAcc = Exprw.Objects;
  if (objBeforeAcc != objAfterAcc AND addAccObj == false) then begin
    Exprw.Objects = objBeforeAcc;
  end;
  NoDupObjs(Exprw.Objects,Exprw.Objects);
  MatRowPut(Expr,expRowCnt,Exprw);
  if (useRowComment) then begin
    MatRowGet(Expr,expRowCnt,Exprw);
    Exprw.Comment = VEIVrw.VESpec;
    MatRowPut(Expr,expRowCnt,Exprw);
  end;
  CalcExpRow(Expr,expRowCnt);
  return;
end;

function string 10 GetUserCodeFromName(string userName)
begin
  string 10 res;
  record UserVc Userr;

  Userr.Name = userName;
  if (ReadFirstKey("Name",Userr,1,true)) then begin
    res = Userr.Code;
  end;
  GetUserCodeFromName = res;
  return;
end;

function string 10 GetUserCodeFromVEIV(record VEIVVc VEIVr)
begin
  string 10 res;
  record UserVc Userr;

  Userr.Code = VEIVr.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    res = Userr.Code;
  end;
  if (blank(res)) then begin
    res = GetUserCodeFromName(VEIVr.OurContact);
  end;
  GetUserCodeFromVEIV = res;
  return;
end;

procedure FillExpHeaderFromVEIV(record VEIVVc VEIVr, var record ExpVc Expr)
begin
  Expr.DocDate = VEIVr.InvDate;
  Expr.Person = GetUserCodeFromVEIV(VEIVr);
  if (blank(Expr.Person)) then begin
    Expr.Name = VEIVr.OurContact;
  end else begin
    ExpVc_PastePerson(Expr);
  end;
  return;
end;

global updating
function longint AddVEIVToExpRemote(record VEIVVc VEIVr, var record ExpVc Expr)
begin
  longint res;
  integer veivRowCnt,i;
  record VEIVVc tempVEIVr;
  row VEIVVc tempVEIVrw;
  record ExpVc oldExpr;
  record EInvoiceBlock EIb;
  boolean useRowComment,addAccObj;

  BlockLoad(EIb);
  switch(EIb.VEIVRowToExpMethod) begin
    case 0:
      PackSimilarRowsInVEIV(tempVEIVr,VEIVr);
    case 1:
      RecordCopy(tempVEIVr,VEIVr); //just copy as loop below is working with tempVEIVr
  end;
  useRowComment = (EIb.VEIVRowCommToExp == 1);
  addAccObj = (EIb.UseAccObject == 1);
  veivRowCnt = MatRowCnt(tempVEIVr);
  RecordCopy(oldExpr,Expr);
  FillExpHeaderFromVEIV(VEIVr,Expr);
  for(i=0;i<veivRowCnt;i=i+1) begin
    MatRowGet(tempVEIVr,i,tempVEIVrw);
    AddVEIVRowToExp(tempVEIVrw,VEIVr,Expr,useRowComment,addAccObj); //passing temp row from compacted tempVEIVr and also original VEIVr
    CopyRecordLinks(VEIVr,Expr);//Bk, ts 2019/02
    CreateRecordLink(VEIVr,CurrentCompany,Expr,CurrentCompany);
    CreateRecordLink(Expr,CurrentCompany,VEIVr,CurrentCompany);
  end;
  RecordUpdate(oldExpr,Expr,false);
  AddVEIVToExpRemote = res;
  return;
end;

global updating
function boolean AddSingleVEIVToExp(record VEIVVc VEIVr, var record ExpVc Expr)
begin
  boolean res;
  longint r;
  integer rownr;
  string 255 fieldname;
  record VEIVVc OldVEIVr;
  record VIVc VIr;
  
  if (VEIVr.OKStatus>1) then begin
    MessageBox(20803,"");
    goto LAddSingleVEIVToExp;
  end;
  if (VEIVr.VISerNr!=-1) then begin
    VIr.SerNr = VEIVr.VISerNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      if (VIr.InvoiceNr==VEIVr.InvoiceNr) then begin
        MessageBox(1501007,"");
        goto LAddSingleVEIVToExp;
      end;
    end;
    MessageBox(1501008,"");
    goto LAddSingleVEIVToExp;
  end;
  if (VEIVr.NotPaidFlag == 0) then begin //TODO need this check?
    r = ValidateVEIV(VEIVr,fieldname,rownr);
    if (r == 0) then begin
      if (Expr.SerNr == -1) then begin // if not yet created
        Expr.SerNr = NextSerNr("ExpVc",Expr.TransDate,-1,false,"");
        RecordInsert(Expr,false);
      end;
      r = AddVEIVToExpRemote(VEIVr,Expr);
     //Bk - start: ts 2018/07
      if (MatRowCnt(Expr)>0) then begin
        RecordCopy(OldVEIVr,VEIVr);
        VEIVr.VISerNr = Expr.SerNr;
        VEIVr.OKStatus = 1; //Bk, ts 2018/07
        VEIVr.OKFlag = 18; //Bk, ts 2018/07
        RecordUpdate(OldVEIVr,VEIVr,false); 
        UpdateBrowses("VEIVVc");
      end;
     //Bk - end     
      res = true;
    end else begin
      switch (r) begin
        case 20809: r = 1501006;
      end;
      MessageBox(r,"");
    end;      
  end else begin
    //MessageBox(20556,""); //TODO need this check?
  end;
LAddSingleVEIVToExp:;
  AddSingleVEIVToExp = res;
  return;
end;
