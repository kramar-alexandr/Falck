/* all Books specific windows */
//autoeksport
//eteenused
//kannete arv perioodis
//kasumiaruanne kuude l›ikes
//bilanss kuude loikes
//ky
//pakendi aruanne
//rik
//sepa import
//sepa eksport (kulutused)
//smaily
//si
//telema
//tsekk.ee
//vd aruanne
//xml inkasso
//muu
//intrastat
//pangaliidestus
//lao muugivaartus
//klientide statistika riikide loikes
//valjamaksmata kulutused
//kasumiaruanne ja eelarve kuude loikes
//artiklite pakendiretseptid
//scoro liidestus
//artiklid lahetusaadressidele
//earvete erinouded
//inf3
//attach failide eemaldamine

//Intrastat
external function string 255 VATZoneEditFieldLabel_ENG(Integer);

external procedure FORMDEF_ENG();
external procedure INVFORM_ENG(Boolean);
//tsekk.ee
external function boolean IsTsekkActivated();
//telema
external procedure TSERW_ENG();

external function Boolean HasObjects();
external function Boolean HasMultiCurrency();
external function Boolean HasLanguages();
external function Boolean HasAdvancedAccounting();
external function Boolean HasBase2();
external function Boolean HasSimulations();

//autoeksport
window AutoExportTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real x,h,h1,h2,h3,h4,h5,h6,h7,v,v1,v2,l,vs,vm,vm2,f,t,hs,hof,es;
  Integer icn,icnovr,icndwn;

  WindowBegin("Specify Automated Exports",AutoExportTClass,CGSbl,-);
  SetBlid(AutoExportBlock);
  SetWRect(20,80,450,300);
  vs = 16; 
  Tile(0,20,false,"",value1);
  TileButton(1,"Regiters");
  TileButton(2,"Settings");
  TileButton(3,"Data");
  Tile(1,190,false,"1",value1);
  v = 6; h = 70;
  CheckBox(h,v+=vs,0,"Items",value1);
  CheckBox(h,v+=vs,0,"Customers",value2);
  CheckBox(h,v+=vs,0,"Objects",value3);
  CheckBox(h,v+=vs,0,"Prices",value4);
  CheckBox(h,v+=vs,0,"Discount Matrices",value5);
  ButtonFrame(h+=180,v=30,130,6,"Only unexported");
  CheckBox(h,v,0,"Invoices",value6);
  CheckBox(h,v+=vs,0,"Orders",value7);
  CheckBox(h,v+=vs,0,"Deliveries",value8);
  CheckBox(h,v+=vs,0,"Goods Receipts",value22);
  CheckBox(h,v+=vs,0,"Stock Depreciations",value23);
  CheckBox(h,v+=vs,0,"Transactions",value24);
  StaticText(5,v+50,"For automated export usage please specify the HAL Routine as: AutoExportRn",false);
  StaticText(5,v+70,"Tecnics->Settings->Timed Operations->HAL Routine->AutoExportRn",false);

  Tile(2,170,false,"2",value9);
  v = 6; h = 150;
  CheckBox(h,v+=vs,0,"Item Groups",value9);
  CheckBox(h,v+=vs,0,"Item Classifications",value10);
  CheckBox(h,v+=vs,0,"Locations",value11);
  CheckBox(h,v+=vs,0,"Order Classes",value12);
  CheckBox(h,v+=vs,0,"Quotation Classes",value13);
  CheckBox(h,v+=vs,0,"Customer Categories",value14);
  CheckBox(h,v+=vs,0,"Contact Classifications",value15);
  CheckBox(h,v+=vs,0,"Object Types",value16);
  CheckBox(h,v+=vs,0,"VAT Codes",value17);
  Tile(3,150,false,"3",value18);
  v = 6; h = 150;
  PeriodField(h,v+=vs,"Period");
  v=v+vs;
  CheckBox(h,v+=vs,0,"Invoice Rows",value18);
  CheckBox(h,v+=vs,0,"Order Rows",value19);
  CheckBox(h,v+=vs,0,"Quotation Rows",value20);
  CheckBox(h,v+=vs,0,"Stock List",value21);
  CheckBox(h,v+=vs,0,"Receipts",value25);
  EndWindow;
end;

//eteenused
window CUServiceUsageLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("E-services statistics",CUServiceUsageLClass,CGmlist,-);
  SetWRect(20,80,650,291);
  Sizeable(-1,-1,0,0);
  UseView(CUServiceUsageVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Date",ServiceDate,false,ServiceDate);
  RlColKey(82,82,"Reg.nr.1",RegNr1,false,RegNr1);
  RlColKey(150,150,"Service",ContractType,false,ContractType);
  RlColKey(230,230,"Partner",Partner,false,Partner);
  RlCol(380,380,"Requests",ServiceReq,true);
  RlCol(475,475,"Volume",Volume,true);
  SearchField("Search");
  EndWindow;
end;

window CUIVLClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Sales e-invoices",CUIVLClass,CGmlist,-);
  SetWRect(20,80,520,291);
  Sizeable(-1,-1,0,0);
  UseView(CUIVVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Ser. nr.",SerNr,false,SerNr);
  RlColKey(86,86,"Partner inv. id",InvoiceId,false,InvoiceId);
  RlCol(-246,-246,"Partner inv. nr.",InvoiceNr,false);
  RlCol(-152,-152,"Version",VersionNr,false);
  RlColKey(-98,-98,"Inv nr.",IVSerNr,false,IVSerNr);
  EndWindow;
end;

window CUExpLClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Cost reports",CUExpLClass,CGmlist,-);
  SetWRect(20,80,520,291);
  Sizeable(-1,-1,0,0);
  UseView(CUExpVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Ser. nr.",SerNr,false,SerNr);
  RlColKey(86,86,"Extern. report. nr",ReportId,false,ReportId);
  RlCol(186,186,"Extern. attach. nr",AttachmentId,false);
  RlCol(-152,-152,"Version",VersionNr,false);
  RlColKey(-98,-98,"Exp. nr.",ExpSerNr,false,ExpSerNr);
  EndWindow;
end;

window EInvoiceSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Imported sales invoices handling",EInvoiceSetTClass,CGSbl,-);
  SetBlid(EInvoiceSetBlock);
  SetWRect(20,80,390,310);
  v = 30; h = 30; vs = 20;
  ButtonFrame(h,v,250,5,"Customer identification:");
  CheckBox(h,v,0,"ERP code",FindCode);
  CheckBox(h,v+=16,0,"KMKR nr.",FindVATNr);
  CheckBox(h,v+=16,0,"Reg. nr.",FindRegNr);
  CheckBox(h,v+=16,0,"Name (without company forms) + country",NameCountry);
  CheckBox(h,v+=16,0,"Name (without company forms)",FindName);
  EditField(h+70,v+=32,-40,"Company forms",Normal,CompanyForms,false,0);
  EndWindow;
end;

window SupEInvoiceSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Imported supplier invoices handling",SupEInvoiceSetTClass,CGSbl,-);
  SetBlid(SupEInvoiceSetBlock);
  SetWRect(20,80,390,310);
  v = 30; h = 30; vs = 20;
  ButtonFrame(h,v,250,5,"Supplier identification:");
  CheckBox(h,v,0,"ERP code",FindCode);
  CheckBox(h,v+=16,0,"KMKR nr.",FindVATNr);
  CheckBox(h,v+=16,0,"Reg. nr.",FindRegNr);
  //CheckBox(h,v+=16,0,"IBAN",FindIBAN);
  CheckBox(h,v+=16,0,"Name (without company forms) + country",NameCountry);
  CheckBox(h,v+=16,0,"Name (without company forms)",FindName);
  EditField(h+70,v+=32,-40,"Company forms",Normal,CompanyForms,false,0);
  EndWindow;
end;

window CompanyFormDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;
  WindowBegin("Company form",CompanyFormDClass,CGview,-);
  SetWRect(64,80,509,380);
  UseView(CompanyFormVc);
  v = 10; vs = 20; h = 120; h2 = 340; h3 = 350;
  EditField(h,v, 55,"Code",Normal,Code,false,0);
  EditField(h,v+=vs,240,"Matches",Normal,Comment,false,0);
  EndWindow;
end;

window CompanyFormLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Company forms",CompanyFormLClass,CGmlist,-);
  SpawnClass(CompanyFormDClass);
  SetWRect(64,80,509,298);
  Sizeable(-1,-1,0,0);
  UseView(CompanyFormVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Code",Code,false,Code);
  RlCol(100,100, "Matches",Comment,false);
  SearchField("Search");
  EndWindow;
end;

window DefEInvRcvPrefVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Define e-invoice receiving preferences",DefEInvRcvPrefVClass,CGMnt,RcType);
  SetWRect(20,80,550,200);
  h = 80;
  StaticText(h,v=20,"E-invoices",true);
  ButtonFrame(h,v+=32,183,1,"Receiving Preference"); //Bk
  RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Default",flags[0]);
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"Electronic Invoice",flags[0]);
  if (HasLocalization("FIN")==false) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",flags[0]); 
  end;  
//Bk start
  if (HasLocalization("EST")) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"Email",flags[0]);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Internet bank",flags[0]);
  end;
//Bk end
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceNone,0,"No Receiving",flags[0]); 
  EndFrame;
  if (HasLocalization("EST")) then begin
    h = h + 210; v = 12; //Bk
    ButtonFrame(h,v+=40,183,1,"Alternative Channel"); 
    RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Not used",flags[1]); 
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"Electronic Invoice",flags[1]);
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",flags[1]);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"Email",flags[1]);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Internet bank",flags[1]); 
    EndFrame;
    h = 80; //Bk
    CheckBox(h,v+=40,0,"E-invoices with pdf files",flags[2]); //Bk
    CheckBox(h,v+=16,0,"Don't Send Electronic Invoices",flags[3]);  //Bk
    CheckBox(h,v+=21,0,"Rewrite receiving preference (if exists)",flags[4]);  //Bk
    CheckBox(h,v+=16,0,"Rewrite alternative channel (if exists)",flags[5]);  //Bk
  end;
  EndWindow;
end;

window EInvRegisterWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs,vm;
  WindowBegin("E-invoicing services changes",EInvRegisterWClass,CGother,RcType);
  UseView(RcVc);
  SetWRect(20,80,450,390);
  h = 50; h2 = 55; v = 50; vs = 20;
  StaticText(h,v,"Select required services",false);
  StaticText(h,v+=vs,"(to disable uncheck the options)",false);
  CheckBox(h,vm=(v+=vs),0,"Sending e-invoices (Omniva,Envoice,Fitek)",flags[1]);
  //cust - start KB 06.11.2019
  CheckBox(h,v+=vs,0,"Supplier e-invoice receiving (Omniva,Envoice,Fitek)",flags[2]);
  //cust - end
  CheckBox(h,v+=vs,0,"Receiving e-invoices (sales) (Omniva,Envoice)",flags[3]);
  CheckBox(h,v+=vs,0,"Cost report receiving (Omniva)",flags[4]);//ts - 2018/07
  //cust - start KB 06.11.2019
  ButtonFrame(h2,v+=42,150,3,"Select operator");
  //cust - end
  RadioButton(h2,v,0,0,"Omniva",flags[0]);
  RadioButton(h2,v+=16,1,0,"Fitek",flags[0]);
  RadioButton(h2,v+=16,2,0,"Envoice",flags[0]);
  /*
  RadioButton(h2,v+=16,3,0,"Telema",flags[0]);
  */
  //EditField(h2+30,v+=32,-40,"E-inv account",Normal,f2,false,0);
  HalPushButton(h     ,-50,h+100,-25,"CloseActiveWindowEInv","Cancel");
  HalPushButton(-h-100,-50,-h   ,-25,"SendActivationRequestsEInv","Change");
  EndWindow; 
end;

//kannete arv perioodis
window TransNumberRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  WindowBegin("Define transactions in period",TransNumberRClass,CGRcW,RcType);
  SetWRect(20,80,440,250);
  PeriodField(h=130,v=6,"Period");
  //Bk start 30.11
  ButtonFrame(h,v+=26,143,2,"");
  RadioButton(h,v,0,0,"Created Date",ArtMode);
  RadioButton(h,v+=16,1,0,"Transaction Date",ArtMode); 
  EditFieldTL(h,v+=30,80,"Employee",M4Code,Normal,10,DefUser,false,UserSClass);
  ButtonFrame(h,v+=26,143,2,"");
  RadioButton(h,v,0,0,"All employees ",flags[20]);
  RadioButton(h,v+=16,1,0,"Per employee",flags[20]); 
  //Bk end 30.11
  CheckBox(h-5,v+=25,0,"All companies",flags[0]);  

  //Bk start 30.11
  CheckBox(h-5,v+=16,0,"Check Global Usera",flags[21]); 
  CheckBox(h-5,v+=16,0,"Calculate Expences Rows",flags[22]); 
  //Bk end 30.11

  ButtonFrame(h=30,v+=60,160,9,"Subsystem records");
  CheckBox(h,vm=v,0,"Invoices",flags[1]);  
  CheckBox(h,v+=16,0,"Receipts",flags[2]);  
  CheckBox(h,v+=16,0,"Purchase invoices",flags[3]);  
  CheckBox(h,v+=16,0,"Payments",flags[4]);  
  CheckBox(h,v+=16,0,"Payroll payments",flags[5]);  
  CheckBox(h,v+=16,0,"Stock movements",flags[6]);  
  CheckBox(h,v+=16,0,"Deliveries",flags[7]);  
  //Bk start 30.11
  CheckBox(h,v+=16,0,"Salary Calculations",flags[16]); 
  CheckBox(h,v+=16,0,"Salary Payments",flags[17]);
  //Bk end 30.11

  CheckBox(h,v+=25,0,"Only OK-d records",flags[15]);  

  ButtonFrame(h+=190,v=vm,160,9,"Transactions");
  CheckBox(h,v,0,"Transactions",flags[8]);  
  CheckBox(h,v+=16,0,"Expenses",flags[9]);  
  CheckBox(h,v+=16,0,"Cash in",flags[10]);  
  CheckBox(h,v+=16,0,"Cash out",flags[11]);  
  CheckBox(h,v+=16,0,"Asset Disposals",flags[12]);  
  CheckBox(h,v+=16,0,"Goods Receipts",flags[13]);  
  CheckBox(h,v+=16,0,"#Stock Depreciation#",flags[14]);  

  EndWindow;
end;

//kasumiaruanne kuude l›ikes
window MonthResRClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  WindowBegin("Define Profit & Loss (Monthly)",MonthResRClass,CGRcW,RcType);
  SetWRect(20,80,580,250);
  PeriodField(h=150,v=6,"Period (max.12 months)");
  if (HasObjects) then begin
  EditFieldTL(h,v+=20,150,"Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=20,50,"Object type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  end;
  vm=v;
  if (HasMultiCurrency) then begin
  EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (HasLanguages) then begin
  EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);  
  end;
  EditFieldTL(395,6,120,"Header",M4Str,Normal,60 ,f1,false,0);
  ButtonFrame(h=395,v=vm,123,5,"Accounts");
  RadioButton(h,v,0,0,"All",AccSpec);
  RadioButton(h,v+=16,1,0,"Used only",AccSpec);
  if (HasAdvancedAccounting or HasLocalization("FIN")) then begin
  RadioButton(h,v+=16,2,0,"Groups only",AccSpec);
  RadioButton(h,v+=16,3,0,"Used groups only",AccSpec);
  RadioButton(h,v+=16,4,0,"With balance only",AccSpec);
  end;
  EndFrame;
  if (HasBase2) then begin
  ButtonFrame(h=230,v=vm+30,123,2,"Values");
  RadioButton(h,v,0,0,"Base curr. 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Base curr. 2",basecurncy);
  end;
  EndWindow;
end;

//bilanss kuude loikes
window MonthBalRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;

  vs = 20;
  WindowBegin("Balance Sheet (Monthly)",MonthBalRClass,CGRcW,RcType);
  SetWRect(20,80,540,380);
  PeriodField(h=100,v=6,"Period");
  if (HasObjects) then begin
    EditFieldTL(h,v+=20,250,"Tag/Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
    EditFieldTL(h,v+=20,50,"Tag/Object Type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
    CheckBox(180,v,0,"Including unspecified",flags[2]);
  end;
  if (HasMultiCurrency) then begin
    EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (HasLanguages) then begin
    EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);
    EditFieldTL(335,6,140,"Header",M4Str,Normal,60 ,f1,false,0);
  end else begin
    EditFieldTL(h,v+=vs,150,"Header",M4Str,Normal,60 ,f1,false,0);
  end;
  ButtonFrame(h=30,vm=(v+=41),123,5,"Accounts");
  RadioButton(h,v,0,0,"All",AccSpec);
  RadioButton(h,v+=16,1,0,"With Balance",AccSpec);
  if (HasAdvancedAccounting) then begin
    RadioButton(h,v+=16,2,0,"Groups only",AccSpec);
    RadioButton(h,v+=16,3,0,"Used Groups only",AccSpec);
  end;
  RadioButton(h,v+=16,4,0,"Used only",AccSpec);
  EndFrame;
  h = h + 148 * 2;
  if (HasBase2 or HasMultiCurrency) then begin
    ButtonFrame(h,v+=40,123,2,"Values in");
    RadioButton(h,v,0,0,"Base Currency 1",basecurncy);
    RadioButton(h,v+=16,1,0,"Base Currency 2",basecurncy);
    v = v + 24;
  end;
  h = 30;
  if (HasAdvancedAccounting) then begin
    v = vm + 100;
  end else begin
    v = vm + 80;
  end;
  if (HasSimulations) then begin
    CheckBox(h,v,0,"Including _Simulations",SimVerf); v = v + 16;
  end;
  if (HasAdvancedAccounting) then begin
    CheckBox(h,v,0,"List Transaction No.",flags[4]); v = v + 16;
  end;
  if (HasAdvancedAccounting) then begin
    CheckBox(h,v,0,"No Header",flags[5]); v = v + 16;
  end;
  CheckBox(h,v,0,"Show zeroes instead of blank strings",flags[19]); v = v + 16;
  EndWindow;
end;

//ky
window KArvedDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Apartment Data",KArvedDClass,CGview,-);
  SetWRect(100,120,680,340);
  UseView(KArvedVc);
  FormName(KArvedForm);
  vs = 20;
  EditField(h=140,v=6,80,"Invoice No",ViewOnly,SerNr,false,0);
  EditField(h2=360,v,80,"Invoice date",ViewOnly,InvDate,false,0);
  EditField(h,v+=vs,80,"Customer",ViewOnly,CustCode,false,0);
  EditField(h2,v,-10,"Name",ViewOnly,Addr0,false,0);
  EditField(h,v+=vs,80,"Monthcode/House No",ViewOnly,MonthCode,false,0);
  ButtonFrame(10,v+=40,550,7,"");
  EditField(h,v,80,"Hot water fin. reading",Normal,SoeVesi,true,0);
  EditField(h2,v,80,"Hot water2 fin. reading",Normal,SoeVesi2,true,0);
  EditField(h,v+=vs,80,"Cold water fin. reading",Normal,KylmVesi,true,0);
  EditField(h2,v,80,"Cold water2 fin. reading",Normal,KylmVesi2,true,0);    
  EditField(h,v+=vs,80,"Day elec. fin. reading",Normal,DayElec,true,0);
  EditField(h2,v,80,"Night elec. fin. reading",Normal,NightElec,true,0);    
  EditField(h,v+=vs,80,"Gas fin. reading",Normal,Gas,true,0);
  EditField(h2,v,80,"No of residents",Normal,ElArv,true,0);    
  EditField(h,v+=vs,80,"Area",Normal,Pind,true,0);
  EditField(h2,v,80,"Heated area",Normal,KoetPind,true,0);
  EndWindow;
end;

window KArvedViewDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Apartment Data",KArvedViewDClass,CGview,-);
  SetWRect(100,120,680,340);
  UseView(KArvedVc);
  FormName(KArvedForm);
  vs = 20;
  EditField(h=140,v=6,80,"Invoice No",ViewOnly,SerNr,false,0);
  EditField(h2=360,v,80,"Invoice date",ViewOnly,InvDate,false,0);
  EditField(h,v+=vs,80,"Customer",ViewOnly,CustCode,false,0);
  EditField(h2,v,-10,"Name",ViewOnly,Addr0,false,0);
  EditField(h,v+=vs,80,"Monthcode/House No",ViewOnly,MonthCode,false,0);
  ButtonFrame(10,v+=40,550,7,"");
  EditField(h,v,80,"Hot water fin. reading",ViewOnly,SoeVesi,true,0);
  EditField(h2,v,80,"Hot water2 fin. reading",ViewOnly,SoeVesi2,true,0);
  EditField(h,v+=vs,80,"Cold water fin. reading",ViewOnly,KylmVesi,true,0);
  EditField(h2,v,80,"Cold water2 fin. reading",ViewOnly,KylmVesi2,true,0);    
  EditField(h,v+=vs,80,"Day elec. fin. reading",ViewOnly,DayElec,true,0);
  EditField(h2,v,80,"Night elec. fin. reading",ViewOnly,NightElec,true,0);    
  EditField(h,v+=vs,80,"Gas fin. reading",ViewOnly,Gas,true,0);
  EditField(h2,v,80,"No of residents",ViewOnly,ElArv,true,0);    
  EditField(h,v+=vs,80,"Area",ViewOnly,Pind,true,0);
  EditField(h2,v,80,"Heated area",ViewOnly,KoetPind,true,0);
  EndWindow;
end;

//TEST 
window KArvedLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Invoices with Apartment data",KArvedLClass,CGmlist,-);
  SetWRect(20,80,800,291);
  Sizeable(-1,-1,0,0);
  UseView(KArvedVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Invoice No",SerNr,false,SerNr);
  RlCol(70,70,"Invoice date",InvDate,false);
  RlCol(130,130,"Customer",CustCode,false);
  RlCol(190,190,"Name",Addr0,false);    
  RlCol(300,300,"Hot water",SoeVesi,false);
  RlCol(360,360,"Hot water2",SoeVesi2,false);
  RlCol(420,420,"Cold water",KylmVesi,false);
  RlCol(480,480,"Cold water2",KylmVesi2,true);
  RlCol(540,540,"Area",Pind,false);
  RlCol(600,600,"Heated surface",KoetPind,true);
  RlCol(660,660,"No of residents",ElArv,true);
  SearchField("Search");
  EndWindow;
end;

window K_Exp_KYEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Union Registers Export",K_Exp_KYEClass,CGEcW,RcType);
  SetWRect(90,80,444,250);
  vs = 20; v = 20;
  ButtonFrame(h=100,v+=vs,120,5,"AU registers");
  Checkbox(h,v+=6,2,"Apartments",OKmode);
  Checkbox(h,v+=vs,2,"Houses",OKmode);
  Checkbox(h,v+=vs,2,"Readings",OKmode);
  Checkbox(h,v+=vs,2,"Distribution methods",OKmode);
  Checkbox(h,v+=vs,2,"Expenses",OKmode);
  Checkbox(h,v+=vs,2,"AU invoice data",OKmode);
  EndWindow;
end;

window KHouseLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Houses",KHouseLClass,CGmlist,-);
  SpawnClass(KHouseDClass);
  SetWRect(20,80,480,250);
  Sizeable(-1,-1,0,0);
  UseView(KHouseVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"House",codeHouse,false,codeHouse);
  RlCol(75,75,"Comment",strComment,false);
  SearchField("Search");
  EndWindow;
end;

window KHouseDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("House",KHouseDClass,CGview,-);
  SetWRect(20,80,450,290);
  UseView(KHouseVc);
  h=100; h2=180; v=10;
  EditField(h,v,120,"House",Normal,codeHouse,false,0);
  EditField(h,v+=20,300,"Comment",Normal,strComment,false,0);
  StaticText(h,v+=50,"Total",false);	
  StaticText(h2,v,"In use",false);
  EditField(h,v+=7,70,"Apartments",ViewOnly,intFlatsAll,false,0);
  EditField(h2,v,70,"",ViewOnly,intFlatsUsed,false,0);		
  EditField(h,v+=20,70,"Area of apartments",ViewOnly,valAreaAll,false,0);
  EditField(h2,v,70,"",ViewOnly,valAreaUsed,false,0);
  EditField(h,v+=20,70,"Heated area",ViewOnly,valHeatAreaAll,false,0);
  EditField(h2,v,70,"",ViewOnly,valHeatAreaUsed,false,0);
  EditField(h,v+=20,70,"No of residents",ViewOnly,intPeopleAll,false,0);
  EditField(h2,v,70,"",ViewOnly,intPeopleUsed,false,0);
  EndWindow;
end;

window KHouseSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Set house",KHouseSClass,CGslist,-);
  SetWRect(20,80,600,300);
  Sizeable(-1,-1,0,0);
  UseView(KHouseVc);
  SpawnClass(KHouseDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"House",codeHouse,false,codeHouse);
  RlCol(100,100,"Comment",strComment,false);
  SearchField("Search");
  EndWindow;
end;

window KFlatLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Apartments",KFlatLClass,CGmlist,-);
  SpawnClass(KFlatDClass);
  SetWRect(20,80,620,298);
  Sizeable(-1,-1,0,0);
  UseView(KFlatVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Apartment",intFlatNr,false,intFlatNr);
  RlCol(75,75,"House",codeHouse,false);
  RlColKey(150,150,"Customer code",CustCode,false,CustCode);
  RlColKey(250,250,"Customer name",strName,false,0);
  SearchField("Search");
  EndWindow;
end;

window KFlatDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Apartment",KFlatDClass,CGview,-);
  SetWRect(20,80,550,270);
  UseView(KFlatVc);
  v = 6; h = 110; vs = 20;
  EditField(h,v+=20,120,"Apartment",Normal,intFlatNr,false,0);
  EditField(h+200,v,120,"House",Normal,codeHouse,false,KHouseSClass);    
  EditField(h,v+=20,120,"Area",Normal,valArea,false,0);
  EditField(h+200,v,120,"Customer",Normal,CustCode,false,CUSClass);    
  EditField(h,v+=20,120,"Heated area",Normal,valHeatArea,false,0);
  EditField(h+200,v,-20,"Name",Normal,strName,false,0);
  EditField(h,v+=20,120,"No of residents",Normal,intResidents,false,0);
  CheckBox(h,v+=40,0,"In use",intUsedFlag);
  CheckBox(h+200,v,0,"Gas meters",intGasMeters);
  CheckBox(h,v+=20,0,"Water meters",intWaterMeters);
  CheckBox(h+200,v,0,"Electricity meters",intElecMeters);
  EndWindow;
end;

window KFlatSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Set apartment",KFlatSClass,CGslist,-);
  SetWRect(20,80,600,300);
  Sizeable(-1,-1,0,0);
  UseView(KFlatVc);
  SpawnClass(KFlatDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Apartment",intFlatNr,false,intFlatNr);
  RlCol(75,75,"House",codeHouse,false);
  RlColKey(150,150,"Customer code",CustCode,false,CustCode);
  RlColKey(250,250,"Customer name",strName,false,strName);
  SearchField("Search");
  EndWindow;
end;

window KExpensesDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Expenses",KExpensesDClass,CGview,-);
  SetWRect(20,80,620,430);
  Sizeable(-1,-1,0,0);
  UseView(KExpensesVc);
  vs = 20; h=100; h2=255;
  EditField(h,v=6, 55,"No",   St_i,longID,false,0);
  EditField(h,v+20,55,"House code",Normal,codeHouse,false,KHouseSClass);
  CheckBox(20,v+45,0,"Invoices compiled",confirmed);
  EditField(h2,v,55, "Article",Normal,codeArtCode,false,INSClass);
  EditField(h2+145,v,82,"Month code",Normal,strMonthCode,false,0);
  EditField(h2+145,v+20,82,"Date",Normal,dateValueDate,false,PasteCurDate);
  EditField(250,60,70,"Total sum",Normal,valTotal,true,0);
  EnterSkip(Math);
  EditField(-170,-31,60,"Total amount",ViewOnly,valTotalAmount,true,0);
  v = 100;
  MatrixBegin(4,v,-50,-44,KFlatExpenseRowType,500);
  Flip(0);
  MatColTL(1,28,"Apartment",0,-1,ViewOnly,0,intFlatNr,false,0); 
  EnterSkip(valCounterStart);
  MatCol(1,100,"Name",0,strName,false,CUSClass);
  MatCol(1,-300,"Initial reading",0,valCounterStart,false,0);
  MatCol(1,-240,"Final reading",0,valCounterEnd,false,0);
  EnterSkip(valCounterStart);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valTariff,false,0); 
  MatCol(1,-120,"Amount",0,valAmount,false,0);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valSum,false,0); 
  DeleteRowTest;
  InsertRowTest;
  EndMatrix;
  EndWindow;
end;

window KExpensesLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Expenses",KExpensesLClass,CGmlist,-);
  SpawnClass(KExpensesDClass);
  SetWRect(64,80,520,298);
  Sizeable(-1,-1,0,0);
  UseView(KExpensesVc);
  RecordList(4,17,-21,-39);  
  RlColKey(4,4,"No",longID,false,longID);
  RlCol(75,75,"House",codeHouse,false);
  RlColKey(120,115,"Invoice",confirmed,false,confirmed);
  RlColKey(170,170,"Article",codeArtCode,false,codeArtCode);
  RlColKey(270,270,  "Month code",strMonthCode,false,strMonthCode);
  RlColKey(370,370,"Date",dateValueDate,false,dateValueDate);
  SearchField("Search");
  EndWindow;
end;

window KDeleteInvoicesVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Delete unconfirmed invoices",KDeleteInvoicesVClass,CGMnt,RcType);
  SetWRect(90,80,444,250);
  StaticText(120,70,"Click start",false);
  EndWindow;
end;

window KDeleteAllInvoicesVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Delete invoices",KDeleteAllInvoicesVClass,CGMnt,RcType);
  SetWRect(90,80,444,250);
  StaticText(100,100,"Click start",false);
  EndWindow;
end;

window KCreateInvoicesVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Set Create Invoices",KCreateInvoicesVClass,CGMnt,RcType);
  SetWRect(20,80,520,250);
  h=150;
  v=20;
  EditFieldTL(h,v,100,"Invoice Date",M4Date,Normal,0,d1,false,PasteCurDate);
  EditFieldTL(h,v+=20,100,"Entry Date",M4Date,Normal,0,d2,false,PasteCurDate);
  EditFieldTL(h,v+=20 ,50,"Payment Term",M4UStr,Normal,5,TransStr,false,PDSClass);
  EditField(h,v+=20,100,"Month Code",Normal,f2,false,0);
  EditField(h,v+=20,55,"House",Normal,f3,false,KHouseSClass);    
  EditField(h,v+=20,100,"Apartments",Normal,Stext,false,KFlatSClass);
  EndWindow;
end;

window KConvertFOKYVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("FirstOffice AU 5.0 Data Conversion ",KConvertFOKYVClass,CGMnt,RcType);
  SetWRect(20,80,520,250);
  StaticText(50,40,"WARNING!",false);
  StaticText(50,70,"This maintenance is foreseen only for customising the FirstOffice AU 5.0 database",false);
  StaticText(50,85,"to newer Apartment Union version.",false);
  StaticText(50,105,"Use this maintenance only once immediately after importing the FO AU 5.0 database.",false);
  EndWindow;
end;

window KConvertFOSBEKYVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("FirstOffice AU 5.2 - 6.0 / SBE 5.3 AU Module Data Conversion",KConvertFOSBEKYVClass,CGMnt,RcType);
  SetWRect(20,80,520,250);
  StaticText(50,40,"WARNING!",false);
  StaticText(50,70,"This maintenance is foreseen only for customising the FirstOffice AU 5.2 - 6.0 / SBE 5.3 AU database ",false);
  StaticText(50,85,"to newer Apartment Union version.",false);
  StaticText(50,105,"Use this maintenance only once immediately after importing the FO AU 5.2 - 6.0/ SBE 5.3 AU database.",false);
  EndWindow;
end;

window KSpecialArticlesVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Reset Readings Register",KSpecialArticlesVClass,CGMnt,RcType);
  h=120;h2=305;v=6;
  SetWRect(20,80,500,350);
  ButtonFrame(h-80,v+=20,350,12,"Articles of the readings register");
  EditFieldTL(h,v+=20,70,"Cold water",M4Code,Normal,12,f1,false,INSClass);
  EditFieldTL(h2,v,70,"Cold water2",M4Code,Normal,12,f6,false,INSClass);
  EditFieldTL(h,v+=20,70,"Hot water",M4Code,Normal,12,f2,false,INSClass);
  EditFieldTL(h2,v,70,"Hot water2",M4Code,Normal,12,Stext,false,INSClass);
  EditFieldTL(h,v+=20,70,"General water",M4Code,Normal,12,f4,false,INSClass);
  EditFieldTL(h,v+=20,70,"Heating",M4Code,Normal,12,f3,false,INSClass);
  EditFieldTL(h2,v,70,"Heat losses",M4Code,Normal,12,f5,false,INSClass);
  EditFieldTL(h,v+=20,70,"Gas",M4Code,Normal,12,f7,false,INSClass);
  EditFieldTL(h2,v,70,"Gas difference",M4Code,Normal,12,f8,false,INSClass);
  EditFieldTL(h,v+=20,70,"Day electricity",M4Code,Normal,12,f9,false,INSClass);
  EditFieldTL(h2,v,70,"Night electricity",M4Code,Normal,12,f10,false,INSClass);
  StaticText(h-80,v+=60,"To set distribution methods for articles see Settings/Distribution methods",false);
  EndWindow;
end;

window KHeatAndWaterDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Readings",KHeatAndWaterDClass,CGview,-);
  SetWRect(20,80,700,500);
  Sizeable(-1,-1,0,0);
  UseView(KHeatAndWaterVc);
  vs = 20; h=80; h2=255;
  EditField(h,v=20, 60,"No",Normal,longID,false,0);
  EditField(h,v+=20,60,"House",Normal,codeHouse,false,KHouseSClass);    
  EditField(h,v+=20,60,"Month code",Normal,strMonthCode,false,0); 
  EditField(h,v+=20,80,"Date",Normal,dateValueDate,false,PasteCurDate);
  CheckBox(20,v+=50,0,"Invoices compiled",confirmed);
  h=305;v=30;
  StaticText(h,v=20,"Amounts:",false);
  EditField(h,v+=10,70,"Water",Normal,valWaterTotal,true,0);
  EnterSkip(valGasTotal);
  EditField(h,v+=20,70,"General water",ViewOnly,valWaterDiff,true,0);
  EditField(h,v+=20,70,"Gas",Normal,valGasTotal,true,0);
  EnterSkip(Math);
  EditField(h,v+=20,70,"General Gas",ViewOnly,valGasDiff,true,0);
  h=555;v=30;
  StaticText(h,20,"Sums:",false);
  EditField(h,v,70,"Heating energy",Normal,valHeatWarmPrice,true,0);
  EditField(h,v+=20,70,"Heating",Normal,valHeatPrice,true,0);
  EnterSkip(valDElecTot);
  EditField(h,v+=20,70,"Water heating",ViewOnly,valWarmPrice,true,0);
  EditField(h,v+=20,70,"Heat losses",Normal,valLoHePrice,true,0);
  EditField(h,v+=20,70,"Day electricity",ViewOnly,valDElecTot,true,0);
  EditField(h,v+=20,70,"Night electricity",ViewOnly,valNElecTot,true,0);
  StaticText(360,v=-26,"Water",false);
  StaticText(430,v=-26,"Gas",false);
  EditField(350,-21,60,"Total amount of readings",ViewOnly,valWaterCalcTotal,true,0);
  EditField(420,-21,60,"",ViewOnly,valGasCalcTotal,true,0);
  v = 150;
  MatrixBegin(4,v+20,-110,-40,KHeatAndWaterRowType,300);
  Flip(0);
  MatColTL(1,28,"Apartment",0,-1,ViewOnly,0,intFlatNr,false,0); 
  EnterSkip(valColdEnd);
  MatCol(1,80,"Name",0,strName,false,0);
  Flip(1); //KŸlm vesi
  MatCol(1,-300,"Initial reading",0,valColdStart,false,0);
  MatCol(1,-240,"Final reading",0,valColdEnd,false,0);
  EnterSkip(valColdEnd);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valAColdTariff,false,0); 
  MatCol(1,-120,"Amount",0,valColdAmount,false,0);
  EnterSkip(valColdAmount);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valColdSum,false,0); 
  Flip(2); //KŸlm vesi (2)
  MatCol(1,-300,"Initial reading",0,valColdStart2,false,0);
  MatCol(1,-240,"Final reading",0,valColdEnd2,false,0);
  EnterSkip(valColdEnd2);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valAColdTariff2,false,0); 
  MatCol(1,-120,"Amount",0,valColdAmount2,false,0);
  EnterSkip(valColdAmount2);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valColdSum2,false,0); 
  Flip(3); //Soe vesi
  MatCol(1,-300,"Initial reading",0,valWarmStart,false,0);
  MatCol(1,-240,"Final reading",0,valWarmEnd,false,0);
  EnterSkip(valWarmEnd);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valAWarmTariff,false,0); 
  MatCol(1,-120,"Amount",0,valWarmAmount,false,0);
  EnterSkip(valWarmAmount);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valWarmSum,false,0); 
  Flip(4); //Soe vesi (2)
  MatCol(1,-300,"Initial reading",0,valWarmStart2,false,0);
  MatCol(1,-240,"Final reading",0,valWarmEnd2,false,0);
  EnterSkip(valWarmEnd2);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valAWarmTariff2,false,0); 
  MatCol(1,-120,"Amount",0,valWarmAmount2,false,0);
  EnterSkip(valWarmAmount2);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valWarmSum2,false,0); 
  Flip(5); //†ldvesi
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valALeakTariff,false,0); 
  MatColTL(1,-120,"Amount",0,-1,ViewOnly,0,valLeakAmount,false,0); 
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valLeakSum,false,0); 
  Flip(6); //KŸte
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valAHeatTariff,false,0); 
  MatColTL(1,-120,"Amount",0,-1,ViewOnly,0,valHeatAmount,false,0); 
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valHeatSum,false,0); 
  Flip(7); //Soojuskaod
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valALoHeTariff,false,0); 
  MatColTL(1,-120,"Amount",0,-1,ViewOnly,0,valLoHeAmount,false,0); 
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valLoHeSum,false,0); 
  Flip(8); //Gaas
  MatCol(1,-300,"Initial reading",0,valGasStart,false,0);
  MatCol(1,-240,"Final reading",0,valGasEnd,false,0);
  EnterSkip(valGasEnd);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valGasTariff,false,0); 
  MatCol(1,-120,"Amount",0,valGasAmount,false,0);
  EnterSkip(valGasAmount);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valGasSum,false,0); 
  Flip(9); //†ldgaas
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valGasTotTariff,false,0); 
  MatColTL(1,-120,"Amount",0,-1,ViewOnly,0,valGasTotAmount,false,0); 
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valGasTotSum,false,0); 
  Flip(10); //PŠev elekter
  MatCol(1,-300,"Initial reading",0,valDElecStart,false,0);
  MatCol(1,-240,"Final reading",0,valDElecEnd,false,0);
  EnterSkip(valDElecEnd);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valDElecTariff,false,0); 
  MatCol(1,-120,"Amount",0,valDElecAmount,false,0);
  EnterSkip(valDElecAmount);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valDElecSum,false,0); 
  Flip(11); //…š elekter
  MatCol(1,-300,"Initial reading",0,valNElecStart,false,0);
  MatCol(1,-240,"Final reading",0,valNElecEnd,false,0);
  EnterSkip(valNElecEnd);
  MatColTL(1,-180,"Tariff",0,-1,ViewOnly,0,valNElecTariff,false,0); 
  MatCol(1,-120,"Amount",0,valNElecAmount,false,0);
  EnterSkip(valNElecAmount);
  MatColTL(1,-60,"Sum",0,-1,ViewOnly,0,valNElecSum,false,0); 
  DeleteRowTest;
  InsertRowTest;
  EndMatrix;
  vs = 20;
  v = 174;
  VTab(-94,v,-75,v+vs,ToolFlip,1,"1");
  StaticText(-70,v-5,"Cold Water",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,2,"2");
  StaticText(-70,v-5,"Cold Water(2)",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,3,"3");
  StaticText(-70,v-5,"Hot Water",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,4,"4");
  StaticText(-70,v-5,"Hot Water(2)",false);
  v=v+ vs;
  VTab(-94,v,-75,v+vs,ToolFlip,5,"5");
  StaticText(-70,v-5,"General Water",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,6,"6");
  StaticText(-70,v-5,"Heating",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,7,"7");
  StaticText(-70,v-5,"Heat Losses",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,8,"8");
  StaticText(-70,v-5,"Gas",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,9,"9");
  StaticText(-70,v-5,"General Gas",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,10,"10");
  StaticText(-70,v-5,"Day Electricity",false);
  v=v+ vs; 
  VTab(-94,v,-75,v+vs,ToolFlip,11,"11");
  StaticText(-70,v-5,"Night Electricity",false);
  SpecialMenu("Update Tariff",'',0,"UpdateKHeatAndWaterDsm");
  EndWindow;
end;

window KHeatAndWaterLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Readings",KHeatAndWaterLClass,CGmlist,-);
  SpawnClass(KHeatAndWaterDClass);
  SetWRect(64,80,509,298);
  Sizeable(-1,-1,0,0);
  UseView(KHeatAndWaterVc);
  RecordList(4,17,-21,-39);  
  RlColKey(4,4,"No",longID,false,longID);
  RlCol(75,75,"House",codeHouse,false);
  RlColKey(120,115,"Invoice",confirmed,false,confirmed);
  RlColKey(170,170,  "Month code",strMonthCode,false,strMonthCode); 
  RlColKey(270,270,"Date",dateValueDate,false,dateValueDate); 
  SearchField("Search");
  EndWindow;
end;

window KKYSettingsTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Distribution methods for readings register",KKYSettingsTClass,CGSbl,-);
  SetBlid(KKYSettingsBlock);
  SetWRect(90,80,520,520);
  h=330;v=2;
  EditField(h,v+=20,80, "Cold Water",ViewOnly,codeSpecCold,false,0);
  EditField(h,v+=20,80, "Cold Water2",ViewOnly,codeSpecCold2,false,0);
  EditField(h,v+=20,80, "Hot Water",ViewOnly,codeSpecWarm,false,0);
  EditField(h,v+=20,80, "Hot Water2",ViewOnly,codeSpecWarm2,false,0);
  EditField(h,v+=20,80, "General Water",ViewOnly,codeSpecLeak,false,0);
  EditField(h,v+=20,80, "Heating",ViewOnly,codeSpecHeat,false,0);
  EditField(h,v+=20,80, "Heat Losses",ViewOnly,codeSpecLoHe,false,0);
  EditField(h,v+=20,80, "Gas",ViewOnly,codeSpecGas,false,0);
  EditField(h,v+=20,80, "General Gas",ViewOnly,codeSpecGasDiff,false,0);
  EditField(h,v+=20,80, "Day Electricity",ViewOnly,codeSpecDElec,false,0);
  EditField(h,v+=20,80, "Night Electricity",ViewOnly,codeSpecNElec,false,0);
  EditField(h,v+=40,80,"Norm. consum. of cold water",Normal,valTmp1,false,0);    
  EditField(h,v+=20,80,"Norm. consum. of hot water",Normal,valTmp2,false,0);    
  EditField(h,v+=20,80,"Norm. consum. of gas",Normal,valTmp3,false,0);    
  EditField(h,v+=20,80,"Norm. consum. of day elec.",Normal,valTmp4,false,0);    
  EditField(h,v+=20,80,"Norm. consum. of night elec.",Normal,valTmp5,false,0);    
  h=20;v=6;
  ButtonFrame(h,v+=20,130,4,"Reading not entered");
  RadioButton(h,v,0,0,"By previous month",intUnknownMeterAction);
  RadioButton(h,v+=16,1,0,"Waits for next reading",intUnknownMeterAction);
  RadioButton(h,v+=16,2,0,"Norm. by residents",intUnknownMeterAction);
  RadioButton(h,v+=16,3,0,"Norm. by area",intUnknownMeterAction);
  ButtonFrame(h,v+=50,130,2,"Apartments without meters");
  RadioButton(h,v,0,0,"By residents",intNoMeterAction);
  RadioButton(h,v+=16,1,0,"By area",intNoMeterAction);
  ButtonFrame(h,v+=50,130,4,"Distribution of general water");
  RadioButton(h,v,0,0,"For all",intLeakSpreadAction);
  RadioButton(h,v+=16,1,0,"For apartments without meter",intLeakSpreadAction);
  RadioButton(h,v+=16,2,0,"Without meter and reading",intLeakSpreadAction);
  RadioButton(h,v+=16,3,0,"Do not distribute",intLeakSpreadAction);
  ButtonFrame(h,v+=50,130,3,"Distribution of general gas");
  RadioButton(h,v,0,0,"For all",intGasDiffAction);
  RadioButton(h,v+=16,1,0,"Without meter and reading",intGasDiffAction);
  RadioButton(h,v+=16,2,0,"Do not distribute",intGasDiffAction);
  CheckBox(h,v+=40,0,"Use the readings register",intTmp1);
  CheckBox(h,v+=20,0,"Use Heating item in Expenses register",intTmp2);
  CheckBox(h,v+=20,0,"Show 0,- sums in invoices",intTmp3);
  EndWindow;
end;

window KFlatsRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Set apartment list",KFlatsRClass,CGRcW,RcType);
  SetWRect(20,80,400,200);
  h=140;v=20;
  EditField(h,v,100,"House",Normal,f1,false,KHouseSClass);
  EditField(h,v+=20,100,"Apartment",Normal,f2,false,KFlatSClass);
  Checkbox(h,v+=40,0,"Only apartments in use",flags[0]);
  EndWindow;
end;

window KExpRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Set expense report of the period ",KExpRClass,CGRcW,RcType);
  SetWRect(20,80,450,320);
  h=170;v=20;
  EditField(h,v,100,"Month code",Normal,f1,false,0);
  EditField(h,v+=20,100,"Article",Normal,f2,false,INSClass);
  EditField(h,v+=20,100,"Apartments",Normal,f3,false,0);
  EditField(h,v+=20,100,"House",Normal,f4,false,KHouseSClass);
  h=70;v=140;  
  ButtonFrame(h,v,100,2,"View");
  RadioButton(h,v,0,0,"Detailed",flags[1]);
  RadioButton(h,v+=20,1,0,"Summary",flags[1]);
  h=220;v=140;
  ButtonFrame(h,v,100,2,"Order");
  RadioButton(h,v,0,0,"Article",frc);
  RadioButton(h,v+=20,1,0,"Apartment",frc);
  CheckBox(h,v+=30,0,"Only readings register articles",toc);
  CheckBox(h,v+=20,0,"Including entries without invoice",flags[0]);
  EndWindow;
end;

window KArvedRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Set invoices with apartment data",KArvedRClass,CGRcW,RcType);
  INVFORM_ENG(true);
  EndWindow;
end;

window KArvedFClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Describe invoices with apartment data ",KArvedFClass,CGHbl,HBlRecType);
  SetBlid(KArvedDefBlock);
  FORMDEF_ENG;
  EndWindow;
end;

window KYIVToMailVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs,vm;
  WindowBegin("Specify Create Mails from AU Invoices",KYIVToMailVClass,CGMnt,RcType);
  SetWRect(64,80,509,340);
  PeriodField(h=120,v=6,"Period");
  EditFieldTL(h,v+=20, 150,"Customer",   M4UStr,Normal,40,f1,false,CUSClass);
  EditFieldTL(h,vm=(v+=20), 70, "Category",   M4UStr,Normal,5,FirstAcc,false,CCatSClass);
  EditFieldTL(h,v+=20 ,70,"Classification",M4UStr,Normal,30,f4,false,CClassSClass);
  EditFieldTL(h,v+=20, 150,"Invoice",   M4UStr,Normal,20,f2,false,0);
  EditFieldTL(h,v+=20, -50,"Customer Job Desc.",M4Str,Normal,200,f3,false,0);
  CheckBox(h,v+=20,0,"Open Invoices Only",flags[0]);
  CheckBox(h,v+=16,0,"Send E-mails automatically",flags[1]);
  ButtonFrame(h,vm = (v+=40),123,4,"Invoice Type");
  CheckBox(h,v,0,"Invoices",flags[3]);
  CheckBox(h,v+=16,0,"Cash Notes",flags[4]);
  CheckBox(h,v+=16,0,"C_redit Notes",flags[5]);
  CheckBox(h,v+=16,0,"I_nterest Invoices",flags[6]);
  EndWindow;
end;

//pakendi aruanne
window PackageRecDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Package recipe",PackageRecDClass,CGview,-);
  SetWRect(64,100,680,370);
  Sizeable(-1,-1,0,0);
  UseView(PackageRecVc);
  h = 120; v = 6; vs = 20;
  EditField(h,v,160,"Code",St_i,Code,false,0);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  EditField(-133,-20,116,"Total weight",ViewOnly,TotalWeight,true,0);
  MatrixBegin(4,v+=40,-32,-20,INTextRowType,99);
  MatCol(1,24,"Package type",0,MaterType,false,PackTypeSClass);
  EnterSkip(Weight);
  MatCol(1,124,"Name",0,MTComment,false,0);
  MatCol(1,-100,"Weight (g)",0,Weight,true,0);
  EndMatrix;
  EndWindow;
end;

window PackageRecLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Package recipes",PackageRecLClass,CGmlist,-);
  SpawnClass(PackageRecDClass);
  SetWRect(64,80,680,300);
  Sizeable(-1,-1,0,0);
  UseView(PackageRecVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlColKey(180,180,"Comment",Comment,false,Comment);
  SearchField("Search");
  EndWindow;
end;

window PackageRecSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Package recipes",PackageRecSClass,CGslist,-);
  SpawnClass(PackageRecDClass);
  SetWRect(64,80,680,300);
  Sizeable(-1,-1,0,0);
  UseView(PackageRecVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlColKey(180,180,"Comment",Comment,false,Comment);
  SearchField("Search");
  EndWindow;
end;

window PackageRecRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Packaging report",PackageRecRClass,CGRcW,RcType);
  SetWRect(20,80,400,220);
  vs=20;
  PeriodField(h=120,v=6,"Period");  
  EditFieldTL(h,v+=vs ,150,"Customer",M4UStr,Normal,41,f1,false,CUSClass); 
  EditFieldTL(h,v+=vs,150,"Item",M4UStr,Normal,41,f2,false,INSClass); 
  ButtonFrame(h,v+=40,123,3,"VAT zone");
  CheckBox(h,v,0,"Internal",flags[1]);
  CheckBox(h,v+=16,0,"EU",flags[2]);
  CheckBox(h,v+=16,0,"Not EU",flags[3]);  
  EndWindow;
end;

//rik
window EstAddrLookupRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("RIK info request",EstAddrLookupRClass,CGRcW,RcType);
  SetWRect(20,80,405,340);
  EditFieldTL(h=150,v=6, 150,"Name or part of it",M4Str,Normal,50,f3,false,0);
  EditFieldTL(h=150,v+=20, 150,"Reg. number",M4UStr,Normal,50,f2,false,0);
  EndWindow;
end;

window EstAddrLookup2RClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("RIK info request",EstAddrLookup2RClass,CGRcW,RcType);
  SetWRect(20,80,405,340);
  EditFieldTL(h=150,v=6, 150,"Name or part of it",M4Str,Normal,50,f3,false,0);
  EditFieldTL(h=150,v+=20, 150,"Reg. number",M4UStr,Normal,50,f2,false,0);
  EndWindow;
end;

window UpdEstAddrVcCancelDsmYesNoWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,hs,v,vs,h1,h2,h3;
  WindowBegin("Please confirm",UpdEstAddrVcCancelDsmYesNoWClass,CGother,RcType);
  UseView(RcVc);
  Modality(1);
  SetWRect(80,200,470,320);
  Sizeable(-1,-1,0,0);
  h = 10; h2 = 170; v=40;
  StaticText(h+30,v,"Customer with this reg. number already exists",false);
  EditFieldTL(h+160,v+=8, 50,"Contact being changed",   M4UStr,Normal,50,f1,false,CUSClass);
  StaticText(h+210,v+=14," Update the data?",false);
  v=v-16;
  HalPushButton(h,v+=40,h+175,v+20,"UpdEstAddrVcCancelDsmYesNoWClassYES","Yes");
  HalPushButton(h+=200,v,h+175,v+20,"UpdEstAddrVcCancelDsmYesNoWClassNO","No");
  EndWindow;
end;

//window NewCUHelperWClass:1 is also rik window, but is std

//tmp
window ServiceCacheDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Service cache",ServiceCacheDClass,CGview,-);
  SetWRect(20,80,440,200);
  h = 80; v = 6; h2 = 250; vs=20;
  UseView(ServiceCacheVc);
  EditField(h,v ,120,"Code",Normal,Code,false,0);
  EditField(h,v+=vs ,120,"Host",Normal,ServiceHost,false,0);
  EditField(h2,v ,80,"Port",Normal,ServicePort,false,0);
  EditField(h,v+=vs ,-20,"Function",Normal,FuncName,false,0);//cust, tmp add
  EditField(h,v+=vs ,80,"Partner",Normal,Partner,false,0);
  EditField(h2,v ,80,"Http port",Normal,ServiceHTTPPort,false,0);
//  EditField(h2,v ,80,"ValidUntilDate",Normal,ValidUntilDate,false,0);

  EndWindow;
end;

window TXTSerClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("RIK request settings",TXTSerClass,CGSbl,RDBType);
  SetBlid(TXTSerBlock);
  SetWRect(20,80,440,290);
  vs = 20; h = 180;
  EditField(h,v=6,150,"Name of serv",Normal,dbName,false,0);
  EditField(h,v+=vs,150,"Results qty in reply (1-100)",Normal,dbNumber,false,0);
  EditField(h,v+=vs,150,"User",Normal,dbUser,false,0);
  EditFieldTL(h,v+=vs,150,"Password",M4Star,Normal,30,dbPasswd,false,0);//Bk

  EndWindow;
end;

//sepa import
window SEPABankFileTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real vm,h,v,vs;
  
  WindowBegin("SEPA bank file import",SEPABankFileTClass,CGSbl,SEPABankFileType);
  SetBlid(SEPABankFileBlock);
  SetWRect(20,80,622,450);
  vs = 20; h = 150; 
  EditField(h,v=6,-40,"Organisation types",Normal,Abbreviation,false,0);

  ButtonFrame(h=100,vm=(v+=40),130,4,"Create");
  CheckBox(h,v,0,"Receipts",CreateIPVc); 
  CheckBox(h,v+=16,0,"Payments",CreateOPVc); 
  CheckBox(h,v+=16,0,"Transactions",CreateTRVc);
  CheckBox(h,v+=16,0,"Unhandled trans.",StoreUnknownTrans);

  ButtonFrame(h=250,v=vm,100,2,"Approve");
  CheckBox(h,v,0,"Receipts",OKIPVc); 
  CheckBox(h,v+=16,0,"Payments",OKOPVc); 
  v = v + vs * 2;
  ButtonFrame(100,vm=(v+=40),250,2,"Similar transactions");
  RadioButton(100,v,0,0,"Sum to one transaction",TRVcPackMethod); 
  RadioButton(100,v+=vs,1,0,"New transaction for each entry",TRVcPackMethod);
  v = v + vs;
  EditField(h,v+=vs,30,"Max rows on Receipt (1-200)",Normal,MaxRowCntIP,false,0);
  EditField(h,v+=vs,30,"Max rows on Payment (1-200)",Normal,MaxRowCntOP,false,0);
  CheckBox(100,v+=vs,0,"Bank transaction identifications are same for whole database",UseMainIdentBlock); 
  
  EditField(h,v+=vs*2,-20,"Import file path on server",Normal,ImportPathFrom,false,0);
  EditField(h,v+=vs,-20,"Imported file path on server",Normal,ImportPathTo,false,0);
  EditField(h,v+=vs,50,"Import time (hour)",Normal,ImportHour,true,0); 
  CheckBox(350,v,0,"Periodic task",TimedAction);   
  EditField(h,v+=vs,65,"Latest import date",Normal,LastImportDate,false,0);
  EditField(345,v,60,":",Normal,LastImportHour,false,0);
  EndWindow;
end;

window BankImportArhiveLClass:1 //this is sharing the register with other window, but shows diff. indexes
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Statement archive",BankImportArhiveLClass,CGmlist,-);
  SetWRect(20,80,1000,300);
  Sizeable(-1,-1,0,0);
  SpawnClass(SEPABankEntryDClass);
  UseView(SEPABankEntryVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Ser. number",SerNr,false,SerNr);
  RlColKey(80,80,"Import date",ImportedDate,false,ImportedDateTime);
  RlColKey(160,160,"Bank book date",BookgDt,false,BookgDt);
  RlCol(250,250,"Debtor name",DbtrNm,false);
  RlCol(410,410,"Creditor name",CdtrNm,false);
  RlCol(560,560,"Sum",TxAmt,false);
  RlCol(640,640,"Crncy",TxAmtCcy,false);
  RlColKey(700,700,"Deb/Cred",CdtDbtInd,false,CdtDbtInd);
  RlCol(770,770,"Comment",Comment,false);
  SearchField("Search");
  EndWindow;
end;

window SEPABankEntryLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Unhandled transactions",SEPABankEntryLClass,CGmlist,-);
  SetWRect(20,80,1000,300);
  Sizeable(-1,-1,0,0);
  SpawnClass(SEPABankEntryDClass);
  UseView(SEPABankEntryVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Ser. number",SerNr,false,SerNrNotDone);
  RlColKey(80,80,"Import date",ImportedDate,false,ImportedDateTimeNotDone);
  RlColKey(160,160,"Bank book date",BookgDt,false,BookgDtNotDone);
  RlCol(250,250,"Debtor name",DbtrNm,false);
  RlCol(410,410,"Creditor name",CdtrNm,false);
  RlCol(560,560,"Sum",TxAmt,false);
  RlCol(640,640,"Crncy",TxAmtCcy,false);
  RlColKey(700,700,"Deb/Cred",CdtDbtInd,false,CdtDbtIndNotDone);
  RlCol(770,770,"Comment",Comment,false);
  SearchField("Search");
  EndWindow;
end;

/* not used, can be removed KB
window SEPABankEntrySClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Aseta tšštlemata kanded",SEPABankEntrySClass,CGslist,-);
  SetWRect(20,80,700,300);
  Sizeable(-1,-1,0,0);
  WindowHasNoToolbar;
  SpawnClass(SEPABankEntryDClass);
  UseView(SEPABankEntryVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Ser. number",SerNr,false,SerNr);
  RlColKey(80,80,"Impordi kp.",ImportedDate,false,ImportedDateTime);
  RlColKey(160,160,"Panga kande kp.",BookgDt,false,BookgDt);
  RlCol(250,250,"Summa",TxAmt,false);
  RlCol(340,340,"Valuuta",TxAmtCcy,false);
  RlColKey(430,430,"Deeb/Kreed",CdtDbtInd,false,CdtDbtInd);
  RlCol(520,520,"Kommentaar",Comment,false);
  EndWindow;
end;
*/

window SEPABankEntryDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,length0,length1,length2,length3;
  WindowBegin("Imported bank transaction",SEPABankEntryDClass,CGview,-);
  SetWRect(20,80,800,200);
  Sizeable(-1,-1,0,0);
  UseView(SEPABankEntryVc);
  h = 120 ; h2 = 380; h3 = 620; vs = 20; length0 = 300; length1 = 150; length2 = 100; length3 = 60;
  ActiveFieldOnNew("SerNr");  
  Tile(0,74,false,"",SerNr);
  EditField(h,v=6,length2,"SerNr",ViewOnly,SerNr,false,0);
  EditField(h2,v,length2,"Import date",ViewOnly,ImportedDate,false,0);
  EditField(h3,v,length2,"Import time",ViewOnly,ImportedTime,false,0);
  EditField(h,v+=vs,length2,"Done date",ViewOnly,DoneDate,false,0);
  EditField(h2,v,length2,"Done time",ViewOnly,DoneTime,false,0);
  CheckBox(h3,v,0,"Done",DoneFlag);
  EditField(h,v+=vs,length0,"Comment",ViewOnly,Comment,false,0);
  //EditField(h2,v,length2,"Rec id",ViewOnly,RecID,false,0);
  //EditField(h3,v,length2,"Rec type",ViewOnly,RecType,false,0);
  TileButton(1,"Trans. data");
  TileButton(2,"Technical info");

  Tile(1,70,true,"1",SerNr);
  v = 6;
  EditField(h,v+=vs,length1,"Trans. ID",ViewOnly,NtryRef,false,0);
  EditField(h2,v,length2,"Trans. type",ViewOnly,CdtDbtInd,false,0);
  EditField(h3,v,length2,"Trans. date",ViewOnly,BookgDt,false,0);
  EditField(h,v+=vs,length2,"Sum",ViewOnly,TxAmt,false,0);
  EditField(h2,v,length2,"Currency",ViewOnly,TxAmtCcy,false,0);
  EditField(h3,v,length2,"Bank SWIFT",ViewOnly,SvcrBIC,false,0);
  v = v + vs;
  EditField(h,v+=vs,length1,"Our IBAN",ViewOnly,OurIBAN,false,0);
  EditField(h2,v,length0,"Payment details",ViewOnly,RmtInfUstrd,false,0);
  v = v + vs;
  EditField(h,v+=vs,length2,"Sender Reg. nr",ViewOnly,DbtrOrgId,false,0);
  EditField(h2,v,length2,"Receiver Reg. nr",ViewOnly,CdtrOrgId,false,0);
  EditField(h3,v,length2,"POS ref ID",ViewOnly,PrtryRef,false,0);
  EditField(h,v+=vs,length1,"Sender name",ViewOnly,DbtrNm,false,0);
  EditField(h2,v,length1,"Receiver name",ViewOnly,CdtrNm,false,0);
  EditField(h,v+=vs,length1,"Sender IBAN",ViewOnly,DbtrAcctIBAN,false,0);
  EditField(h2,v,length1,"Receiver IBAN",ViewOnly,CdtrAcctIBAN,false,0);
  v = v + vs;
  Tile(2,70,true,"2",SerNr);
  v = 6;
  EditField(h,v+=vs,length1,"NtryRef",ViewOnly,NtryRef,false,0);
  EditField(h2,v,length1,"AcctSvcrRef",ViewOnly,AcctSvcrRef,false,0);
  EditField(h,v+=vs,length3,"DomainCode",ViewOnly,DomainCode,false,0);
  EditField(h2,v,length3,"FamilyCode",ViewOnly,FamilyCode,false,0);
  EditField(h3,v,length3,"SubfamilyCode",ViewOnly,SubfamilyCode,false,0);
  EditField(h,v+=vs,length1,"OurIBAN",ViewOnly,OurIBAN,false,0);
  EditField(h2,v,length1,"DbtrAcctIBAN",ViewOnly,DbtrAcctIBAN,false,0);
  EditField(h3,v,length1,"CdtrAcctIBAN",ViewOnly,CdtrAcctIBAN,false,0);
  EditField(h,v+=vs,length2,"CdtDbtInd",ViewOnly,CdtDbtInd,false,0);
  EditField(h2,v,length2,"RvslInd",ViewOnly,RvslInd,false,0);
  EditField(h3,v,length2,"BookgDt",ViewOnly,BookgDt,false,0);
  EditField(h,v+=vs,length2,"PrtryCd",ViewOnly,PrtryCd,false,0);
  EditField(h2,v,length2,"MsgId",ViewOnly,MsgId,false,0);
  EditField(h3,v,length2,"EndToEndId",ViewOnly,EndToEndId,false,0);
  EditField(h,v+=vs,length2,"PmtInfId",ViewOnly,PmtInfId,false,0);
  EditField(h2,v,length2,"InstrId",ViewOnly,InstrId,false,0);
  EditField(h3,v,length2,"InstdAmt",ViewOnly,InstdAmt,false,0);
  EditField(h,v+=vs,length2,"PrtryTp",ViewOnly,PrtryTp,false,0);
  EditField(h2,v,length2,"PrtryRef",ViewOnly,PrtryRef,false,0);
  EditField(h3,v,length2,"TxAmtCcy",ViewOnly,TxAmtCcy,false,0);
  EditField(h,v+=vs,length2,"InstdAmtCcy",ViewOnly,InstdAmtCcy,false,0);
  EditField(h2,v,length2,"TxAmt",ViewOnly,TxAmt,false,0);
  EditField(h3,v,length2,"SvcrBIC",ViewOnly,SvcrBIC,false,0);
  EditField(h,v+=vs,length0,"RmtInfUstrd",ViewOnly,RmtInfUstrd,false,0);
  EditField(h,v+=vs,length0,"RmtInfStrdCdtr",ViewOnly,RmtInfStrdCdtr,false,0);

  StaticText(h,v+=vs*2,"Dbtr part",false);
  EditField(h,v+=vs,length2,"DbtrNm",ViewOnly,DbtrNm,false,0);
  EditField(h2,v,length2,"DbtrDept",ViewOnly,DbtrDept,false,0);
  EditField(h3,v,length2,"DbtrStrtNm",ViewOnly,DbtrStrtNm,false,0);
  EditField(h,v+=vs,length2,"DbtrBldgNb",ViewOnly,DbtrBldgNb,false,0);
  EditField(h2,v,length2,"DbtrPstCd",ViewOnly,DbtrPstCd,false,0);
  EditField(h3,v,length2,"DbtrTwnNm",ViewOnly,DbtrTwnNm,false,0);
  EditField(h,v+=vs,length2,"DbtrCtry",ViewOnly,DbtrCtry,false,0);
  EditField(h2,v,length2,"DbtrCtrySubDvsn",ViewOnly,DbtrCtrySubDvsn,false,0);
  EditField(h3,v,length2,"DbtrAdrLine1",ViewOnly,DbtrAdrLine1,false,0);
  EditField(h,v+=vs,length2,"DbtrAdrLine2",ViewOnly,DbtrAdrLine2,false,0);
  EditField(h2,v,length2,"DbtrOrgId",ViewOnly,DbtrOrgId,false,0);
  EditField(h3,v,length2,"DbtrAcctOthrID",ViewOnly,DbtrAcctOthrID,false,0);
  v = v + vs;
  StaticText(h,v+=vs*2,"Cdtr part",false);
  EditField(h,v+=vs,length2,"CdtrNm",ViewOnly,CdtrNm,false,0);
  EditField(h2,v,length2,"CdtrDept",ViewOnly,CdtrDept,false,0);
  EditField(h3,v,length2,"CdtrStrtNm",ViewOnly,CdtrStrtNm,false,0);
  EditField(h,v+=vs,length2,"CdtrBldgNb",ViewOnly,CdtrBldgNb,false,0);
  EditField(h2,v,length2,"CdtrPstCd",ViewOnly,CdtrPstCd,false,0);
  EditField(h3,v,length2,"CdtrTwnNm",ViewOnly,CdtrTwnNm,false,0);
  EditField(h,v+=vs,length2,"CdtrCtry",ViewOnly,CdtrCtry,false,0);
  EditField(h2,v,length2,"CdtrCtrySubDvsn",ViewOnly,CdtrCtrySubDvsn,false,0);
  EditField(h3,v,length2,"CdtrAdrLine1",ViewOnly,CdtrAdrLine1,false,0);
  EditField(h,v+=vs,length2,"CdtrAdrLine2",ViewOnly,CdtrAdrLine2,false,0);
  EditField(h2,v,length2,"CdtrOrgId",ViewOnly,CdtrOrgId,false,0);
  EditField(h3,v,length2,"CdtrAcctOthrID",ViewOnly,CdtrAcctOthrID,false,0);
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("",'',0,"");
  SpecialMenu("Do not create anything",'',1,"NoneFromBankEntryDsm");
  SpecialMenu("Receipt",'',2,"IPFromBankEntryDsm");
  SpecialMenu("Payment",'',3,"OPFromBankEntryDsm");
  SpecialMenu("Transaction",'',4,"TRFromBankEntryDsm");
  SpecialMenu("Do not create anything and associate",'',5,"NoneFromBankEntryDsmA");
  SpecialMenu("Receipt and associate with type",'',6,"IPFromBankEntryDsmA"); //A means save Association
  SpecialMenu("Payment and associate with type",'',7,"OPFromBankEntryDsmA"); //A means save Association
  SpecialMenu("Transaction and associate with type",'',8,"TRFromBankEntryDsmA"); //A means save Association
  EndWindow;
end;

window TRFromBankWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  record RcVc RepSpec;
  WindowBegin("Transaction creation",TRFromBankWClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  SetWRect(80,200,530,480);
  Sizeable(-1,-1,0,0);
  h = 100; v = 30; vs = 20;
  GetWindowRecord(CurWindow,RepSpec);
  if (RepSpec.flags[2] == 1) then begin
    StaticText(h-90,v,"Transactions will be created automatically from this type in future.",false);
  end else begin
    StaticText(h-90,v,"One-time transaction creation",false);
  end;
  StaticText(h-90,v+=vs,"Are you sure?",false);
  EditFieldTL(h,v+=vs,100,"Credit acc.",M4Code,Normal,10,f1,false,AccSClass);
  EditFieldTL(h,v+=vs,200,"Credit objects",M4Code,Normal,60,f3,false,ObjSClass);
  EditFieldTL(h,v+=vs,100,"Debit acc.",M4Code,Normal,10,f2,false,AccSClass);
  EditFieldTL(h,v+=vs,200,"Debit objects",M4Code,Normal,60,f4,false,ObjSClass);
  EditFieldTL(h,v+=vs,200,"Our IBAN",M4Code,Normal,60,f6,false,0);
  CheckBox(h+220,v,0,"Link to our IBAN",flags[4]);
  EditFieldTL(h,v+=vs,200,"Their IBAN",M4Code,Normal,60,f5,false,0);
  CheckBox(h+220,v,0,"Link to their IBAN",flags[3]);
  EditFieldTL(h,v+=vs,200,"Pmnt details",M4Str,Normal,255,f7,false,0);
  CheckBox(h+220,v,0,"Link to pmnt detail.",flags[5]);
  v = v + vs;
  HalPushButton(h,v+=vs,h+100,v+20,"TRFromBankOK","Yes");
  HalPushButton(h+=130,v,h+100,v+20,"TRFromBankCancel","No");
  EndWindow;
end;

window OPFromBankWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  record RcVc RepSpec;
  WindowBegin("Payment creation",OPFromBankWClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  SetWRect(80,200,530,420);
  Sizeable(-1,-1,0,0);
  h = 100; v = 30; vs = 20;
  GetWindowRecord(CurWindow,RepSpec);
  if (RepSpec.flags[2] == 1) then begin
    StaticText(h-90,v,"Payments will be created automatically from this type in future.",false);
  end else begin
    StaticText(h-90,v,"One-time payment creation",false);
  end;
  StaticText(h-90,v+=vs,"Are you sure?",false);
  EditFieldTL(h,v+=vs,200,"Our IBAN",M4Code,Normal,60,f6,false,0);
  CheckBox(h+220,v,0,"Link to our IBAN",flags[4]);
  EditFieldTL(h,v+=vs,200,"Their IBAN",M4Code,Normal,60,f5,false,0);
  CheckBox(h+220,v,0,"Link to their IBAN",flags[3]);
  EditFieldTL(h,v+=vs,200,"Pmnt details",M4Str,Normal,255,f7,false,0);
  CheckBox(h+220,v,0,"Link to pmnt detail.",flags[5]);
  v = v + vs;
  HalPushButton(h,v+=vs,h+100,v+20,"OPFromBankOK","Yes");
  HalPushButton(h+=130,v,h+100,v+20,"OPFromBankCancel","No");
  EndWindow;
end;

window IPFromBankWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  record RcVc RepSpec;
  WindowBegin("Receipt creation",IPFromBankWClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  SetWRect(80,200,530,420);
  Sizeable(-1,-1,0,0);
  h = 100; v = 30; vs = 20;
  GetWindowRecord(CurWindow,RepSpec);
  if (RepSpec.flags[2] == 1) then begin
    StaticText(h-90,v,"Receipts will be created automatically from this type in future.",false);
  end else begin
    StaticText(h-90,v,"One-time receipt creation",false);
  end;
  StaticText(h-90,v+=vs,"Are you sure?",false);
  EditFieldTL(h,v+=vs,200,"Our IBAN",M4Code,Normal,60,f6,false,0);
  CheckBox(h+220,v,0,"Link to our IBAN",flags[4]);
  EditFieldTL(h,v+=vs,200,"Their IBAN",M4Code,Normal,60,f5,false,0);
  CheckBox(h+220,v,0,"Link to their IBAN",flags[3]);
  EditFieldTL(h,v+=vs,200,"Pmnt details",M4Str,Normal,255,f7,false,0);
  CheckBox(h+220,v,0,"Link to pmnt detail.",flags[5]);
  v = v + vs;
  HalPushButton(h,v+=vs,h+100,v+20,"IPFromBankOK","Yes");
  HalPushButton(h+=130,v,h+100,v+20,"IPFromBankCancel","No");
  EndWindow;
end;

window NothingFromBankWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  record RcVc RepSpec;
  WindowBegin("Ignore this bank entry",NothingFromBankWClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  SetWRect(80,200,530,420);
  Sizeable(-1,-1,0,0);
  h = 100; v = 30; vs = 20;
  GetWindowRecord(CurWindow,RepSpec);
  if (RepSpec.flags[2] == 1) then begin
    StaticText(h-90,v,"This type of bank transactions will be ingnored and marked as done in future.",false);
  end else begin
    StaticText(h-90,v,"One-time ignore",false);
  end;
  StaticText(h-90,v+=vs,"Are you sure?",false);
  EditFieldTL(h,v+=vs,200,"Our IBAN",M4Code,Normal,60,f6,false,0);
  CheckBox(h+220,v,0,"Link to our IBAN",flags[4]);
  EditFieldTL(h,v+=vs,200,"Their IBAN",M4Code,Normal,60,f5,false,0);
  CheckBox(h+220,v,0,"Link to their IBAN",flags[3]);
  EditFieldTL(h,v+=vs,200,"Pmnt details",M4Str,Normal,255,f7,false,0);
  CheckBox(h+220,v,0,"Link to pmnt detail.",flags[5]);
  v = v + vs;
  HalPushButton(h,v+=vs,h+100,v+20,"NoneFromBankOK","Yes");
  HalPushButton(h+=130,v,h+100,v+20,"NoneFromBankCancel","No");
  EndWindow;
end;

/* not used, can be removed, KB
window SelEntryTCLass:1
  wtag("language","EST"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Tšštlemata kanded kaartideks",SelEntryTCLass,CGHbl,0);
  SetBlid(SelEntryBlock);
  SetWRect(60,80,600,300);
  Sizeable(-1,-1,0,0);
  ToolBar;
  HalPushButton(h=100,v=3,h+90,v+10,"SelEntryTCLassOK","Koosta");
  HalPushButton(h=210,v=3,h+90,v+10,"SelEntryTCLassCanel","TŸhista");
  EndToolBar;
  h = 40; v = 27;
  MatrixBegin(h,v,-31,-20,-,99);
  MatColTL(1,25,"Ser. Nr",0,M4Long,Normal,0,SerNr,false,SEPABankEntrySClass);
  MatColTL(1,125,"Panga kp.",0,M4Date,ViewOnly,0,BankDate,false,0);
  MatColTL(1,225,"Deeb/Kreed.",0,M4Str,ViewOnly,0,CdtDbtInd,false,0);
  MatColTL(1,325,"Summa",0,M4Val,ViewOnly,0,Sum,false,0);
  MatColTL(1,425,"Valuuta",0,M4Str,ViewOnly,0,Currency,false,0);
  MatColTL(1,525,"Kommentaar",0,M4Str,ViewOnly,0,Comment,false,0);
  EndMatrix;
  EndWindow;
end;
*/

window BankEntryHistRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;
  WindowBegin("Define bank transactions import history",BankEntryHistRClass,CGRcW,RcType);
  SetWRect(20,80,440,250);
  vs = 20; h = 140; v = 6;
  PeriodField(h,v=6,"Import period");
  EditField(h,v+=vs,60, "Time period",Normal,sStartTime,false,0);
  EditField(h+100,v,60, "to",Normal,sEndTime,false,0);
  CheckBox(h,v+=vs,0,"Do not show unhandled",flags[0]);
  EndWindow;
end;

window TRIdentTCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Bank transactions identification",TRIdentTCLass,CGHbl,HBlRecType);
  SetBlid(TRIdentBlock);
  SetWRect(20,80,700,360);
  Sizeable(-1,-1,0,0);
  h = 20; v = 27;
  MatrixBegin(h,v,-40,-20,-,99);
  Flip(0);
  MatCol(1,25,"Domain",0,DomainCode,false,0);
  MatCol(1,85,"Family",0,FamilyCode,false,0);
  MatCol(1,145,"Subfamily",0,SubfamilyCode,false,0);
  Flip(1);
  MatCol(1,205,"Our IBAN",0,OurIBAN,false,0);
  MatCol(1,345,"Create",0,RecType,false,SetSClass);
  MatCol(1,415,"Type descr.",0,BankTransDescr,false,0);
  Flip(2);
  MatCol(1,205,"Default. descr",0,DefDescr,false,0);
  MatCol(1,-280,"Cr. acc.",0,CredAccNumTR,false,AccSCLass);
  MatCol(1,-220,"Deb. acc",0,DebAccNumTR,false,AccSCLass);
  MatCol(1,-160,"Cr. object",0,ObjectsTRCred,false,ObjSCLass);
  MatCol(1,-80,"Deb. object",0,ObjectsTRDeb,false,ObjSCLass);
  Flip(3);
  MatCol(1,205,"Paym. detail",0,RmtInfUstrd,false,0);
  MatCol(1,-320,"Their IBAN",0,TheirIBAN,false,0);
  MatCol(1,-180,"Comment",0,Comment,false,0);
  EndMatrix;
  vs = 22;
  v = 92; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  EndWindow;
end;

window ReplaceIdentWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Association change",ReplaceIdentWClass,CGother,RcType);
  UseView(RcVc);
  SetWRect(80,200,480,310);
  Sizeable(-1,-1,0,0);
  h = 100; v = 30; vs = 20;
  StaticText(h-90,v,"The entry is associated with another type.",false);
  StaticText(h-90,v+=vs,"Do you wish to change it for future imports?",false);
  HalPushButton(h,v+=vs,h+100,v+20,"ChangeIdentOK","Yes");
  HalPushButton(h+=130,v,h+100,v+20,"ChangeIdentCancel","No");
  EndWindow;
end;

//sepa eksport (kulutused)
window BKFindMisMatchSEPARClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v,h,vs;
  WindowBegin("Specify Data Check (SEPA Payments)",BKFindMisMatchSEPARClass,CGRcW,RcType);
  SetWRect(20,80,450,350);
  v=20; vs=16;
  //StaticText(40,v,"Vajuta [KŠivita] nuppu andmete kontrollimiseks",false);
  CheckBox(80,v,0,"Check Company Settings",flags[0]);
 // CheckBox(80,v+=20,0,"Kontrolli tarnija andmeid",flags[1]);
  CheckBox(80,v+=20,0,"Check Personnel Payments",flags[20]);
  
  PeriodField(h=160,v+=30,"Payment Date in Period");
  EditFieldTL(h,v+=20,100,"Payment No.",M4UStr,Normal,30,f1,false,0);
  EditFieldTL(h,v+=20,80,"Pay. Mode",M4Code,Normal,5,FirstAcc,false,PMSClass);
  ButtonFrame(h,v+=vs*3,150,2,"Status");
  RadioButton(h,v,0,0,"Unexported Only",OnlyUnprntd);
  RadioButton(h,v+=vs,1,0,"All",OnlyUnprntd);
  EndWindow;
end;

window PP_MPEClass:0
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm,h2,h3;
  vs = 20;
  
  WindowBegin("Specify Personnel Payments export, SEPA",PP_MPEClass,CGEcW,RcType);
  SetWRect(20,80,490,500);
  h = 150; vs = 16; h2 = 240; h3 = 70;
  PeriodField(h,v=6,"Payment Date in Period");
  EditFieldTL(h,v+=20,150,"Payment No.",M4UStr,Normal,30,f1,false,0);
  EditFieldTL(h,v+=20,80,"Pay. Mode",M4Code,Normal,5,FirstAcc,false,PMSClass);
  EditField(h,v+=20,-20,"Comment",Normal,f10,false,0);
  CheckBox(h,v+=20,0,"One Payment per Personnel",flags[5]);
  ButtonFrame(h,v+=vs*3,150,2,"Status");
  RadioButton(h,v,0,0,"Unexported Only",OnlyUnprntd);
  RadioButton(h,v+=vs,1,0,"All",OnlyUnprntd);
  EndWindow;
end;

//smaily
window SmailyRegWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,v,vs;
  WindowBegin("Smaily service activation",SmailyRegWClass,CGother,RcType);
  UseView(RcVc);
  SetWRect(20,80,450,320);
  h = 130; h1 = 50; h2 = 270; v = 0; vs = 20;
  EditField(h,v+=vs,-40,"Address (Host) *",Normal,f1,false,0);
  EditField(h,v+=vs,-40,"User *",Normal,f2,false,0);
  EditField(h,v+=vs,-40,"Password *",Normal,f3,false,0);
  v = v + vs;
  StaticText(h2,v+=vs,"* - required fields",false);
  StaticText(h1,v+=vs,"Service cache and Smaily settings will be overwritten!",false);
  v = v + vs * 2;
  HalPushButton(h1,v,h1+100,25,"SendSmailyActRequest","Activate");
  HalPushButton(h2,v,h2+100,25,"CloseSmailyActWindow","Cancel");
  EndWindow; 
end;

window SmailyFieldsTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Smaily request fields",SmailyFieldsTClass,CGHbl,HBlRecType);
  SetBlid(SmailyFieldsBlock);
  SetWRect(20,80,640,690);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,-,99);
  MatCol(1,24,"Smaily field",0,FieldName,false,0);
  MatColTL(1,150,"Contact field",0,M4StrSet,Normal,1669,dbField,false,StrSetSClass);
  MatCol(1,291,"Type",0,Type,false,SetSClass);
  MatCol(1,420,"Object/Classifier type",0,Param,false,0);
  EndMatrix;
  EndWindow;
end;

window SmailyTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Smaily settings",SmailyTClass,CGSbl,-);
  SetBlid(SmailyBlock);
  SetWRect(20,80,440,290);
  vs = 20; h = 130;
  EditField(h,v=6,-40,"Address (Host)",Normal,ServiceHost,false,0);
  EditField(h,v+=vs,-40,"User",Normal,dbUser,false,0);
  EditFieldTL(h,v+=vs,-40,"Password",M4Star,Normal,100,dbPasswd,false,0);
  EndWindow;
end;

window CUtoSmailyVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Contact data to Smaily",CUtoSmailyVClass,CGMnt,RcType);
  SetWRect(64,80,442,350);
  h = 150; v = 6; vs = 20;
  EditFieldTL(h,v, 80,"Customer group", M4UStr,Normal,5,f1,false,CCatSClass);
  EditFieldTL(h,v+=vs, 80,"Customer class", M4UStr,Normal,30,f2,false,CClassSClass);
  EditFieldTL(h,v+=vs, 150,"List",M4Str,Normal,60,f4,false,0);
  ButtonFrame(h,v+=40,173,3,"Action:");
  RadioButton(h,v,0,0,"Replace existing list",flags[0]);
  RadioButton(h,v+=16,1,0,"Add to list",flags[0]);
  RadioButton(h,v+=16,2,0,"Remove from list",flags[0]);
  EditFieldTL(h,v+=32,150,"Topic",M4Str,Normal,60,f5,false,0);
  ButtonFrame(h,v+=40,163,3,"Action:");
  RadioButton(h,v,0,0,"Replace existing topic",flags[1]);
  RadioButton(h,v+=16,1,0,"Add topic",flags[1]);
  RadioButton(h,v+=16,2,0,"Remove topic",flags[1]);
  EndWindow;
end;

//si
window NPSTypeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  string 255 label;
  WindowBegin("Net Promoter Score Type",NPSTypeDClass,CGview,-);
  SetWRect(20,80,470,200);
  UseView(NPSTypeVc);
  ActiveFieldOnNew("Code");
  v = 6; h = 60; vs = 20;
  EditField(h,v,80,"Code",Normal,Code,false,0);
  EditField(h,v+=vs,-40,"Name",Normal,Spec,false,0);
  EndWindow;
end;

window NPSTypeLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Net Promoter Score Types",NPSTypeLClass,CGmlist,-);
  SetWRect(20,80,300,250);
  Sizeable(-1,-1,0,0);
  UseView(NPSTypeVc);
  SpawnClass(NPSTypeDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlCol(96,96,"Name",Spec,false);
  SearchField("Search");
  EndWindow;
end;

window NPSTypeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Paste Net Promoter Score Type",NPSTypeSClass,CGslist,-);
  SetWRect(20,80,300,250);
  Sizeable(-1,-1,0,0);
  UseView(NPSTypeVc);
  SpawnClass(NPSTypeDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlCol(96,96,"Name",Spec,false);
  SearchField("Search");
  EndWindow;
end;

window NPSActionTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Net Promoter Score Activities",NPSActionTClass,CGHbl,HBlRecType);
  SetBlid(NPSActionBlock);
  h = 8; v = 60;
  SetWRect(20,80,550,300);
  Sizeable(-1,-1,0,0);
  MatrixBegin(h,v,-31,-20,-,99);
  MatCol(1,30,"Activity Type",0,ActType,false,ActTypeSClass);
  MatCol(1,110,"NPS Type",0,NPSType,false,NPSTypeSClass);
  MatCol(1,190,"Result",0,ActResult,false,ActTypeSClass);
  MatCol(1,270,"Questionary",0,QuestCode,false,WebNGQuestSClass);//TS: 2015/10
  MatCol(1,350,"Customer Letter",0,CustLetter,false,0);//TS: 2015/10
  EndMatrix;
  DeleteRowTest;
  EndWindow;
end;

window WebNGQADClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,v,v1,vs;
  string 255 label;
  WindowBegin("Answers",WebNGQADClass,CGview,-);
  SetWRect(20,80,670,400);
  Sizeable(-1,-1,0,0);
  UseView(WebNGQAVc);
  ActiveFieldOnNew("SerNr");
  v = 6; h = 100; h1 = 310; h2 = 430; vs = 20;
  EditField(h,v,80,"No.",Normal,SerNr,false,0);
  EditField(h1,v,80,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v,80,"Time",Normal,TransTime,false,0);
  CheckBox(-130,v,0,"Exported",ExportFlag);
  EditField(h,v+=vs,80,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(Classification);
  EditField(h1,v,200,"Name",Normal,CustName,false,0);
  CheckBox(-130,v,0,"Done",DealFlag);
  EditFieldTL(h,v+=vs,60,"Classification", M4UStr,Normal,30,Classification,false,CClassSClass);
  v1=v;
  EditField(h,v+=vs,60,"NPS Type",Normal,NPSType,false,NPSTypeSClass);
  EditField(h1,v=v1,60,"Salesman",Normal,SalesMan,false,UserSClass);
  EditField(h1,v+=vs,60,"Consultant",Normal,Consultant,false,UserSClass);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  MatrixBegin(19,v+=46,-40,-55,-,20);
  Flip(0);
  MatCol(1,29,"Question",0,Question,false,0);  
  Flip(1);
  MatCol(1,-300,"Answer",0,Answer,false,0);      
  MatCol(1,-200,"Comment",0,Comment,false,0);      
  Flip(2);  
  MatCol(1,100,"Answer",0,Answer,false,0);      
  Flip(3);  
  MatCol(1,100,"Comment",0,Comment,false,0);      
  EndMatrix;
  vs = 22;
  v = 92; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  EndWindow;
end;

window WebNGQALClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Answers",WebNGQALClass,CGmlist,-);
  SetWRect(20,80,600,250);
  Sizeable(-1,-1,0,0);
  UseView(WebNGQAVc);
  SpawnClass(WebNGQADClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(96,96,"Trans. Date",TransDate,false,TransDate);
  RlColKey(180,180,"Customer",CustCode,false,CustCode);
  RlColKey(260,260,"Name",CustName,false,CustName);
  RlCol(400,400,"Classification",Classification,false);
  RlCol(480,480,"NPS Type",NPSType,false);
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Search");
  EndWindow;
end;

window NPSRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,v,v1,vs;
  string 255 label;
  WindowBegin("Net Promoter Score Overview",NPSRClass,CGRcW,RcType);
  SetWRect(20,80,600,300);
  Sizeable(-1,-1,0,0);
  v = 26; h = 120; h1 = 350; vs = 20;
  PeriodField(h,v,"Period");
  EditField(h,v+=vs,60,"Customer",Normal,f1,false,CUSClass);
  EditFieldTL(h,v+=vs,60,"Classification", M4UStr,Normal,30,f2,false,CClassSClass);
  EditField(h,v+=vs,60,"NPS Type",Normal,f3,false,NPSTypeSClass);
  EditField(h,v+=vs,60,"Salesman",Normal,f4,false,UserSClass);
  EditField(h,v+=vs,60,"Consultant",Normal,f5,false,UserSClass);
  EditField(h,v+=vs,60,"NPS Result",Normal,f6,false,0);
  EndWindow;
end;

window NPSEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h;
  WindowBegin("Net Promoter Score Export",NPSEClass,CGEcW,RcType);
  SetWRect(20,80,300,200);
  h=70;
  CheckBox(h,20,0,"Not Exported",flags[0]);
  EndWindow;
end;

window WebNGQuestDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vs,vm;
  WindowBegin("Questionary",WebNGQuestDClass,CGview,-);
  SetWRect(20,80,680,420);
  Sizeable(-1,-1,0,0);
  UseView(WebNGQuestVc);
  vs = 20; h=90; h2 = 308; h3 = 476; h4 = 629;
  EditField(h,v=6, 150,"Code",Normal,Code,false,0);
  EditFieldTL(h2,v ,70,"Responsible", M4UStr,Normal,10,Person,false,UserSClass);
  EnterSkip(Comment);
  EditField(h3,v,80,"Created",Normal,RegDate,false,PasteCurDate);
  CheckBox(-100,6,0,"Closed",Closed); 
  EditField(h,vm=(v+=vs),-40,"Header",Normal,Comment,false,0);
  EditField(h,v+=vs,150,"Info Element",Normal,DetailsElement,false,WebNGElementSClass);
  EditField(h2,v,50,"Lang.",Normal,LangCode,false,LangSClass);
  EditField(h2+100,v,110,"NPS Type",Normal,NPSType,false,NPSTypeSClass);
  MatrixBegin(19,v+=46,-40,-65,-,20);
  MatCol(1,29,"Question",0,Question,false,0);
  MatColTL(1,-299,"Answer Tyoe",0,M4Set,Normal,1055,FieldType,false,SetSClass);
  MatCol(1,-220,"multiple-choice Answer",Normal,WebSetType,false,WebNGQSetTypeSClass);
  MatColTL(1,-142,"Required",0,M4Set,Normal,1056,Required,false,SetSClass);
  MatColTL(1,-71,"Add Comment",0,M4Set,Normal,1056,AddComment,false,SetSClass);
  EndMatrix;
  EndWindow;
end;

window WebNGQuestLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Questionaries",WebNGQuestLClass,CGmlist,-);
  SetWRect(20,80,620,291);
  SpawnClass(WebNGQuestDClass);
  Sizeable(0,0,0,0);
  UseView(WebNGQuestVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlCol(130,130,"Comment",Comment,false);
  RlCol(-71,-71,"Lang.",LangCode,false);
  RlCol(-21,-21,"Cl.",Closed,false);
  SearchField("Search");
  EndWindow;
end;

window WebNGQuestSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Paste Questionary",WebNGQuestSClass,CGslist,-);
  SetWRect(20,80,520,291);
  SpawnClass(WebNGQuestDClass);
  Sizeable(0,0,0,0);
  UseView(WebNGQuestVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlCol(100,100,"Name",Comment,false);
  RlCol(-110,-110,"Lang.",LangCode,false);
  SearchField("Search");
  EndWindow;
end;

window WebNGQSetTypeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;
  WindowBegin("Multiple-choice Answers",WebNGQSetTypeDClass,CGview,-);
  SetWRect(64,80,509,380);
  UseView(WebNGQSetTypeVc);
  v = 10; vs = 20; h = 120; h2 = 340; h3 = 350;
  EditField(h,v, 125,"Code",Normal,Code,false,0);
  EditField(h,v+=vs,-20,"Comment",Normal,Comment,false,0);
  MatrixBegin(4,v+=40,-32,-20,INTextRowType,9);
  MatCol(1,24,"Version",0,Text,false,0);
  EndMatrix;
  EndWindow;
end;

window WebNGQSetTypeLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Multiple-choice Answers",WebNGQSetTypeLClass,CGmlist,-);
  SpawnClass(WebNGQSetTypeDClass);
  SetWRect(64,80,509,298);
  Sizeable(-1,-1,0,0);
  UseView(WebNGQSetTypeVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Code",Code,false,Code);
  RlColKey(150,150,"Comment",Comment,false,Comment);
  SearchField("Search");
  EndWindow;
end;

window WebNGQSetTypeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Paste Multiple-choice Answers",WebNGQSetTypeSClass,CGslist,-);
  SpawnClass(WebNGQSetTypeDClass);
  SetWRect(64,80,309,298);
  Sizeable(-1,-1,0,0);
  UseView(WebNGQSetTypeVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Code",Code,false,Code);
  RlColKey(150,150,"Comment",Comment,false,Comment);
  SearchField("Search");
  EndWindow;
end;

window QSettingTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Questionaries Settings",QSettingTClass,CGSbl,-);
  SetBlid(WebNGQSettingBlock);
  SetWRect(20,80,460,380);
  v = 26; h = 130; h2 = 330; vs = 20;
  ButtonFrame(h-100,v,380,5,"Questionaries Pages");
  EditField(h,v+=5,120,"Completed",Normal,CompleteElement,false,WebNGElementSClass);
  EditField(h,v+=vs,120,"Invalid",Normal,InvalidElement,false,WebNGElementSClass);
  EditField(h,v+=vs,120,"Expired",Normal,ExpiredElement,false,WebNGElementSClass);
  EditField(h,v+=vs,120,"Not Valid",Normal,FailedElement,false,WebNGElementSClass);
  EditField(h2,v+=vs,50,"Questionary Expires (Days)",Normal,ExpDays,true,0);
  EditField(h2,v+=vs,50,"Min. Time Before New Request (Days)",Normal,MinDays,true,0);
  EditField(h2,v+=vs,50,"Questionary Send Date Delay (Days)",Normal,DelayDays,true,0);
  EditField(h2,v+=vs,50,"Send From (Time)",Normal,SendTime,true,0);
  EndWindow;
end;

window WebNGQSessionDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Questionaries Sessions",WebNGQSessionDClass,CGview,-);
  UseView(WebNGQSessionVc);
  SetWRect(20,80,500,440);
  vs = 20;h = 100;h2 =  340; v = 6;
  EditField(h,v,150,"ID",Normal,SessionID,false,0);
  EditField(h,v+=vs,150,"Questionary",Normal,QuestCode,false,WebNGQuestSClass);
  EditField(h2,v,120,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h,v+=vs,150,"NPS Type",Normal,NPSType,false,0);
  EditField(h2,v,120,"Consultant",Normal,Person,false,0);
  EditField(h,v+=vs,50,"Lang.",Normal,LangCode,false,LangSClass);
  CheckBox(h2,v,0,"Completed",Completed);
  EditField(h,v+=vs,80,"Valid Until",Normal,ExpDate,false,PasteCurDate);
  EditField(h2,v,80,"Answered Date",Normal,CompletedDate,false,0);
  EditField(h,v+=vs,80,"Sent Date",Normal,CreatedDate,false,0);
  EditField(h2,v,80,"Sent Time",Normal,CreatedTime,false,0);
  EndWindow;
end;

window WebNGQSessionLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Questionaries Sessions",WebNGQSessionLClass,CGmlist,-);
  SetWRect(10,80,560,391);
  SpawnClass(WebNGQSessionDClass);
  Sizeable(-1,-1,0,0);
  UseView(WebNGQSessionVc);
  RecordList(4,17,-21,-39);
  RlColKey(6,6,"ID",SessionID,false,SessionID);
  RlColKey(98,98,"Questionary",QuestCode,false,QuestCode);
  RlColKey(196,196,"Sent Date",CreatedDate,false,CreatedDate);
  RlCol(271,271,"Valid Until",ExpDate,false);
  RlColKey(346,346,"Customer",CustCode,false,CustCode);
  RlCol(-40,-40,"Completed",Completed,true);
  SearchField("Search");
  EndWindow;
end;

window DelWebNGQSVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Secify Delete Sessions",DelWebNGQSVClass,CGMnt,RcType);
  SetWRect(20,80,400,150);  
  v = 6;  h = 150;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=20, 150,"Questionary",M4Str,Normal,20,f1,false,WebNGQuestSClass);
  EditFieldTL(h,v+=20, 150,"Expired Before Date",M4Date,Normal,30,d1,false,PasteCurDate);
  StaticText(h-30,v+=52,"Deletes Not Answered Questionary Requests!",false);
  EndWindow;
end;

//telema
window RecieveDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm,h1,h2,h3,h4;
  WindowBegin("Receive confirmation",RecieveDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(RecieveVc);
  SetWRect(20,80,790,460);
  vs = 20;
  Tile(0,74,false,"",SerNr);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",ViewOnly,CustCode,false,0);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Delivery addr.");
  TileButton(4,"Comment");
  Tile(1,70,false,"1",ShipDate);
  vs = 20; h1 = 110; h2 = 340; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(h2,v=vm,135,"Order nr.",Normal,OrderNr,false,ORSClass);
  EditField(h1,v+=20,95,"Cust. order nr",Normal,CustOrder,false,0);
  EditField(h2,v,135,"Delivery note. nr.",Normal,ShipNo,false,SHSClass);
  EditField(h1,v+=20,95,"Date",Normal,ShipDate,false,0);
  EditField(h2,v,135,"Receive ack. nr.",Normal,CMRText,false,0);
  //TREONr = Tarnekinnituse telema number

  Tile(2,190,true,"1",Math);
  v = 20;
  MatrixBegin(4,v,-50,-35,-,200);
  Flip(0);
  MatCol(1,32,"Item",0,ArtCode,false,INSClass);
  MatCol(1,134,"Name",0,Spec,false,0);
  Flip(1);
  MatCol(1,-320,"Ordered",0,Ordered,true,0);
  MatCol(1,-250,"Received",0,InStock,true,0);
  MatCol(1,-180,"Approved",0,Ship,true,0);
  MatCol(1,-110,"Base price",0,BasePrice,true,0);
  MatCol(1,-40,"Ord.row",0,OrdRow,true,0); //testimiseks
 
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = 21; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  Tile(3,150,false,"3",Addr1);
  vs = 20;
  EditField(h1,v=6,-20,"Delivery-",Normal,Addr1,false,0);
  EditField(h1,v+=vs,-20,"address",Normal,Addr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Addr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  Tile(4,30,false,"4",Comment);
  EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
  SpecialMenu("Price comparison",'I',0,"DiffRecPriceDsm");
  EndWindow;
end;
  
window RecieveLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Receive confirmations",RecieveLClass,CGmlist,SHView);
  SpawnClass(RecieveDClass);
  SetWRect(20,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(RecieveVc);
  FormName(PrintRecieveL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Nr.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Date",ShipDate,false,ShipDate);
  RlCol(191,191,"#Stock#",Location,false);
  RlColKey(251,251,"Ord. nr.",OrderNr,false,OrderKey);
  RlColKey(331,331,"Customer",CustCode,false,CustCode);
  RlColKey(391,391,"Name",Addr0,false,CustName);
  SearchField("Search");
  EndWindow;
end;
  
window SHSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Paste deliveries",SHSClass,CGslist,SHView);
  SpawnClass(SHDClass);
  SetWRect(20,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(SHVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"NR.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Date",ShipDate,false,ShipDate);
  RlCol(191,191,"#Stock#",Location,false);
  RlColKey(251,251,"Tel. nr.",OrderNr,false,OrderKey);
  RlColKey(331,331,"Cust.",CustCode,false,CustCode);
  RlColKey(391,391,"Name",Addr0,false,CustName);
  RlColKey(-80,-80,"Ship.mode",ShipMode,false,ShipMode);
  SearchField("Search");
  EndWindow;
end;

window RecieveSerTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Number series - Receive confirmations",RecieveSerTClass,CGHbl,HBlRecType); //
  SetBlid(RecieveSerBlock);
  TSERW_ENG;
  EndWindow;
end;

window TelemaInvEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify Telema Invoice export",TelemaInvEClass,CGEcW,RcType);
  SetWRect(20,80,360,400);
  h = 120; v = 6;
  EditFieldTL(h,v,100,"Invoice nr.",M4Long,Normal,0,long1,false,0);
  EndWindow;
end;
  
window TelemaShipEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify Telema Delivery export",TelemaShipEClass,CGEcW,RcType);
  SetWRect(20,80,360,400);
  h = 120; v = 6;
  EditFieldTL(h,v,100,"Delivery nr.",M4Long,Normal,0,long1,false,0);
  EndWindow;
end;
  
window XMLOrderVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Import XML orders",XMLOrderVClass,CGMnt,RcType);
  SetWRect(64,80,440,300);
  EndWindow;
end;
  
window RecimVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Import XML Receive confirmations",RecimVClass,CGMnt,RcType);
  SetWRect(64,80,440,300);
  EndWindow;
end;

window XMLInvoiceEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Export XML Invoice",XMLInvoiceEClass,CGEc2W,RcType);
  SetWRect(20,80,360,400);
  h = 120; v = 6;
  EditFieldTL(h,v,100,"Invoice nr.",M4Long,Normal,0,long1,false,ARSClass);
  EndWindow;
end;

window XMLShipEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Export XML Delivery",XMLShipEClass,CGEc2W,RcType);
  SetWRect(20,80,360,400);
  h = 120; v = 6;
  EditFieldTL(h,v,100,"Delivery nr.",M4Long,Normal,0,long1,false,SHSClass);
  EndWindow;
end;

window XMLPOEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Export XML Purchase Order",XMLPOEClass,CGEc2W,RcType);
  SetWRect(20,80,360,400);
  h = 120; v = 6;
  EditFieldTL(h,v,100,"Purchase Order nr.",M4Long,Normal,0,long1,false,POSClass);
  EndWindow;
end;
  
window XMLGroupSHEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Export XML summary deliveries",XMLGroupSHEClass,CGEc2W,RcType);
  SetWRect(20,80,360,400);
  h = 120; v = 6; vs = 20;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs, 150,"Customers",   M4UStr,Normal,50,f1,false,AllCUSClass);
  EditFieldTL(h,v+=vs, 60,"Cust. category", M4UStr,Normal,5,f3,false,CCatSClass);
  EditFieldTL(h,v+=vs, 60,"Cust. class", M4UStr,Normal,30,f2,false,CClassSClass);
  EndWindow;
end;

window Telema4DocTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Telema settings",Telema4DocTClass,CGSbl,OPTType);
  SetBlid(Telema4DocBlock);
  SetWRect(90,80,600,350);
  h = 190; vs = 20;
  CheckBox(h-120,v=6,0,"Automatic import activated",Active);
  CheckBox(h-120,v+=vs,0,"Export OK-ed documents to Telema automatically",AutoExpActive);
  CheckBox(h-120,v+=vs,0,"Create Goods Receipt from Puchase Order when creating Purchase Invoice",PUFromPOOnVICreate);
  EditField(h,v+=vs,-20,"Files import path",Normal,ImpPath,false,0);
  EditField(h,v+=vs,-20,"Files archive path",Normal,CopyPath,false,0);
  EditField(h,v+=vs,-20,"Files export path",Normal,ExpPath,false,0);
  EditField(h,v+=vs,120,"Next summary delivery nr.",Normal,ShipNr,false,0);
  CheckBox(h-120,v+=vs,0,"Take customer from delivery party when importing Orders",PrimaryCust);
  CheckBox(h-120,v+=vs,0,"Add attachment to PDF Invoice",eInvAttachPDF);
  CheckBox(h-120,v+=vs,0,"Return order before Credit Invoice",UseRetOrderFlag);
  CheckBox(h-120,v+=vs,0,"Do not check prices on imported orders",SkipORPriceCheck);
  CheckBox(h-120,v+=vs,0,"Require Location on PO",RequireLocOnPO);
  CheckBox(h-120,v+=vs,0,"Ignore XML file addresses",SkipXMLAddr);
  CheckBox(h-120,v+=vs,0,"Attach Telema EDI invoice source XML to Supplier e-inv",SaveEDIInvXML);
  v = v + vs;
  ButtonFrame(15,v+20,380,5,"Telema API");
  EditField(h-100,v+=vs,-30,"Client ID",Normal,APIClientID,false,0);
  EditField(h-100,v+=vs,-30,"Client secret",Normal,APIClientSecret,false,0);
  EditField(h,v+=vs,60,"Last import date",ViewOnly,LastAPIImpDate,false,0);
  EditField(h+110,v,50,"time",ViewOnly,LastAPIImpTime,false,0);
  EndFrame;
  /* nk 12.03.2019
  EditField(h,v+=vs*2,70,"Default Customer ",Normal,CustCode,false,CUSClass);
  EditField(h,v+=vs,70,"Default Item",Normal,ItemCode,false,INSClass);  
  */
  EndWindow;
end;

window XMLRetOrderVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Import XML Return Orders",XMLRetOrderVClass,CGMnt,RcType);
  SetWRect(64,80,440,300);
  EndWindow;
end;

window OrdRowPasteSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Paste order row",OrdRowPasteSClass,CGother,HBlRecType);
  SetWRect(240,80,600,348);
  StringList(9,9,-19,-19);
  SearchField("Search"); 
  EndWindow;
end;

window RetOrderRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify return orders list",RetOrderRClass,CGRcW,RcType);
  SetWRect(20,80,400,250);
  vs = 20;
  PeriodField(h=100,v=6,"Period");
  EditFieldTL(h,v+=vs ,75,"Cust. code",M4UStr,Normal,20,f1,false,CUSClass);
  ButtonFrame(h=h-50,v+=40,100,2,"Function");
  Radiobutton(h,v,0,0,"Overview",ArtMode);
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  EndWindow;
end;

window NewRetOrderRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify unhandled return orders",NewRetOrderRClass,CGRcW,RcType);
  SetWRect(20,80,400,250);
  vs = 20;
  PeriodField(h=100,v=6,"Period");
  EndWindow;
end;

window RetOrderDCLass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm,h1,h2,h3,h4;
  WindowBegin("Return Order",RetOrderDCLass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(RetOrderVc);
  SetWRect(20,80,920,460);
  vs = 20;
  Tile(0,74,false,"",SerNr);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,0);
  EditField(320,v,70,"Cust. reg.nr",ViewOnly,CustRegNr,false,0);
  EditField(h=320,v=vm,-40,"Name",Normal,Addr0,false,0);
  CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Delivery address");
  TileButton(4,"Comment");

  Tile(1,70,false,"1",TransDate);
  vs = 20; h1 = 110; h2 = 340; h3 = 600; h4 = -100;
  EditField(h1,v=6,95,"Cust. order nr",Normal,CustRetOrderNr,false,0);
  EditField(h2,v,135,"Order nr.",Normal,OrderNr,false,ORSClass);
  EditField(h3,v,135,"Doc. date",Normal,RetOrderDate,false,0); //TODO remove?
  EditField(h1,v+=vs,95,"Doc.ref.",Normal,RefInfo,false,0);
  EditField(h2,v,135,"Delivery nr.",Normal,ShipNr,false,SHSClass);
  EditField(h3,v,135,"Doc issued date",Normal,TransDate,false,0);

  Tile(2,190,true,"1",Math);
  v = 20;
  MatrixBegin(4,v,-50,-35,-,200);
  Flip(0);
  MatCol(1,30,"Item",0,ArtCode,false,INSClass);
  MatCol(1,140,"Name",0,Spec,false,0);
  Flip(1);
  //MatCol(1,-390,"Arve. nr",0,InvoiceNr,true,0); //TODO remove?
  MatCol(1,-250,"Order. nr",0,OrderNr,true,ORSClass);
  MatCol(1,-175,"Deliv. nr",0,ShipNr,true,SHSClass);
  MatCol(1,-110,"Ret.amount",0,AmountToReturn,true,0);
  //MatCol(1,-180,"Sum",0,TotalPrice,true,0); //TODO remove?
  //MatCol(1,-110,"Unit price",0,UnitPrice,true,0); //TODO remove?
  MatCol(1,-50,"Ord.row",0,OrdRow,true,OrdRowPasteSClass);
  Flip(2);
  MatCol(1,-360,"Ret.amount",0,AmountToReturn,true,0);
  //MatCol(1,-300,"Unit price",0,UnitPrice,true,0);
  //MatCol(1,-250,"Sum",0,TotalPrice,true,0);
  MatCol(1,-180,"VAT %",0,VATPrc,true,0);
  MatCol(1,-140,"VAT sum",0,VATSum,true,0);
  MatCol(1,-70,"Sum with VAT",0,TotalWithVAT,true,0);
  Flip(3);
  MatCol(1,-350,"Doc.ref.",0,RefInfo,false,0);
  MatCol(1,-275,"Their code",0,CustArtCode,false,0);
  MatCol(1,-180,"Serial nr.",0,SerialNr,false,0);
  //MatCol(1,-140,"FIFO",0,FIFO,false,0);
  MatCol(1,-80,"#Stock#",0,Location,false,LocationSClass);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = 21; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  CheckBox(20,-30,0,"Returned goods created",RetMadeFlag);
  CheckBox(180,-30,0,"Credit invoice created",CredMadeFlag);
  //CheckBox(220,-30,0,"Goods Receipt",PUMadeFlag);
  CheckBox(-120,-30,0,"Closed",ClosedFlag);

  Tile(3,150,true,"3",DelAddr0);
  vs = 20;
  EditField(h1,v=6,-20,"Delivery-",Normal,DelAddr0,false,0);
  EditField(h1,v+=vs,-20,"address",Normal,DelAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  EditField(h2+20,v,40,"Deliv. address. code",Normal,DelAddrCode,false,0);

  Tile(4,30,true,"4",Comment);
  EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
  EditField(h1,v+=vs,150,"Created by name",Normal,CustCreatedBy,false,0);
  EditField(h3,v,150,"Creat. by phone nr.",Normal,CustCreatedByPhone,false,0);
  EditField(h1,v+=vs,150,"Creat. by email.",Normal,CustCreatedByEmail,false,0);
  EditField(h3,v,150,"Import comment.",Normal,ImportComment,false,0);
  SpecialMenu("Price comparison",' ',27,"RetOrderPriceDiffDsm");
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Returned Goods",'',1,"CredRetFromRetOrdersm");
  SpecialMenu("Credit invoice(s)",'',0,"CrIVRetOrderDsm");
  SpecialMenu("Consolidated credit invoice",'',0,"GrpCrIVRetOrderDsm");
  EndWindow;
end;
  
window RetOrderLClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Return Orders",RetOrderLCLass,CGmlist,SHView);
  SpawnClass(RetOrderDCLass);
  SetWRect(20,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(RetOrderVc);
  //FormName(PrintRecieveL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"NR.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Date",TransDate,false,TransDate);
  RlCol(191,191,"#Stock#",Location,false);
  RlColKey(251,251,"Order nr.",OrderNr,false,OrderKey);
  RlColKey(331,331,"Customer",CustCode,false,CustCode);
  RlColKey(391,391,"Name",Addr0,false,CustName);
  SearchField("Search");
  EndWindow;
end;

window RetOrderSerTClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Number series - Return Orders",RetOrderSerTClass,CGHbl,HBlRecType); //
  SetBlid(RetOrderSerBlock);
  TSERW_ENG;
  EndWindow;
end;

window TelemaRunReqVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Run Telema data exchange",TelemaRunReqVClass,CGMnt,RcType);
  SetWRect(60,80,400,150);
  h = 20; v = 20; vs = 20;
  StaticText(h,v+=vs,"Telema documents will be imported into",false);
  StaticText(h,v+=vs,"folder defined in Telema settings.",false);
  StaticText(h,v+=vs,"Please ensure Telema API service is active,",false);
  StaticText(h,v+=vs,"Client ID and Client secret are filled and",false);
  StaticText(h,v+=vs,"database has active internet enabler key",false);
  EndWindow;
end;

window TelemaExpIVRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define Telema invoice status",TelemaExpIVRClass,CGRcW,RcType);
  SetWRect(20,80,400,250);
  vs = 20; h = 100; v = 5;
  EditFieldTL(h,v,100,"Invoice nr.",M4Long,Normal,0,long1,false,ARSClass);
  EndWindow;
end;

window TelemaExpSHRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define Telema delivery status",TelemaExpSHRClass,CGRcW,RcType);
  SetWRect(20,80,400,250);
  vs = 20; h = 100; v = 5;
  EditFieldTL(h,v,100,"Delivery nr.",M4Long,Normal,0,long1,false,SHSClass);
  EndWindow;
end;

window TelemaExpDocRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h1,h2,v,vs;
  WindowBegin("Define Telema document status",TelemaExpDocRClass,CGRcW,RcType);
  SetWRect(20,80,400,250);
  vs = 20; h1 = 50; h2 = 100; v = 5;
  PeriodField(h2,v+=vs,"Period");
  CheckBox(h1,v+=vs, 70,"Deliveries",flags[0]);
  CheckBox(h1,v+=vs, 70,"Invoices",flags[1]);
  CheckBox(h1,v+=vs, 70,"Purchase Orders",flags[2]);
  v = v + vs;
  CheckBox(h1,v+=vs, 70,"Including documents with no errors",flags[10]);
  EndWindow;
end;

window TelemaExportQueLClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Telema API export queue",TelemaExportQueLClass,CGmlist,-);
  SetWRect(20,80,800,291);
  Sizeable(-1,-1,0,0);
  SpawnClass(TelemaExportQueDClass);
  UseView(TelemaExportQueVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Register",RecordType,false,RecordTypeID);
  RlCol(70,70,"Record nr.",RecordID,false);
  RlColKey(180,180,"Created date.",CreationDate,false,CreationDateTime);
  RlColKey(260,260,"Sent date",SendDate,false,SendDateTime);
  //RlColKey(340,340,"Reply date",ReplyDate,false,ReplyDateTime); //Bk not used
  RlColKey(340,340,"Status",StatusMessage,false,Status);  
  RlCol(420,420,"Attempts",Attempts,false);  
  RlCol(500,500,"Comment",Comment,false);
  SearchField("Search");
  SpecialMenu("Send again",' ',0,"TelemaExpQueRedoLsm");
  EndWindow;
end;

window TelemaExportQueDClass:1
  wtag("language","ENG"), wtag("product","Books"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Telema API export queue - record",TelemaExportQueDClass,CGview,-);
  SetWRect(20,80,500,150);
  UseView(TelemaExportQueVc);
  h=100 ; h2=300; vs=20;
  ActiveFieldOnNew("StatusMessage");  
  EditField(h,v=6,80,"Register",ViewOnly,RecordType,false,0);
  EditField(h2,v,80,"Status",ViewOnly,StatusMessage,false,0);
  EditField(h2+100,v,5,":",ViewOnly,Status,false,0);
  EditField(h,v+=vs,80,"Record nr.",ViewOnly,RecordID,false,0);
  EditField(h2,v,80,"Attempts",ViewOnly,Attempts,false,0);
  EditField(h,v+=vs,80,"Created date.",ViewOnly,CreationDate,false,0);
  EditField(h2,v,80,"Created time",ViewOnly,CreationTime,false,0);
  EditField(h,v+=vs,80,"Sent date",ViewOnly,SendDate,false,0);
  EditField(h2,v,80,"Sent time",ViewOnly,SendTime,false,0);
  //EditField(h,v+=vs,80,"Reply date",ViewOnly,ReplyDate,false,0); //Bk not used
  //EditField(h2,v,80,"Reply time",ViewOnly,ReplyTime,false,0); //Bk not used
  EditField(h,v+=vs,350,"Comment",Normal,Comment,false,0);
  EndWindow;
end;

window UpdPOMarksVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Update Purchase Orders browse window marks",UpdPOMarksVClass,CGMnt,RcType);
  SetWRect(64,80,440,300);
  EndWindow;
end;

//tsekk.ee
window TsekkTermsWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Costpocket service activation",TsekkTermsWClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  SetWRect(20,80,350,350);
  h = 25; v = 25; vs = 20;
  StaticText(h,v,"Costpocket digitizes your receipts and forwards",false);
  StaticText(h,v+=vs,"them to accounting software",false);
  v = v + vs;
  StaticText(h,v+=vs,"Costpocket account will be created with : ",false);
  v = v + vs;
  StaticText(h,v,"Email",false);
  EditField(h+100,v-15,150,"",Normal,f1,false,0);
  v = v + vs;
  StaticText(h,v,"Company reg. nr.",false);
  EditField(h+100,v-15,150,"",ViewOnly,f2,false,0);
  v = v + vs;
  StaticText(h,v,"Name and surname",false);
  EditField(h+100,v-15,150,"",Normal,f3,false,0);
  v = v + 2 * vs;
  StaticText(h,v,"NB! If you have Costpocket account already,",false);
  StaticText(h,v+=vs,"please activate according to manual",false);
  v = -30;
  HalPushButton(h,v,h+100,-25,"CloseActiveWindowTsekk","Cancel");
  HalPushButton(h+185,v,h+285,-25,"SendActivReqTsekk","Activate");
  EndWindow; 
end;

window TsekkSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,v,vs;
  WindowBegin("Costpocket settings",TsekkSetTClass,CGSbl,-);
  SetWRect(20,80,600,350);
  SetBlid(TsekkSetBlock);
  vs = 20; h = 180; v = 20; h1 = 230;  h2 = 330;
  StaticText(h,v+10,"Keep you 'login token' securely!",false);
  EditField(h,v+=vs,300,"Costpocket login token",Normal,AccessToken,false,0);
  EditField(h,v+=vs,150,"Account email",Normal,AccountEmail,false,0);
  EditField(h,v+=vs,150,"Name and surname",Normal,AccountUserName,false,0);
  StaticText(h-60,v+=vs*2,"If you have Costpocket account - insert the information",false);
  StaticText(h-60,v+=vs,"here, then disable and activate the service again.",false);
  StaticText(h-60,v+=vs,"NB! You must know your 'login token'",false);
  v = v + vs;
  ButtonFrame(20,v+=vs,540,4,"Receiving cheques");
  EditField(h1-10,v,70,"Last request date",Normal,LastSuccessReqDate,false,0);
  EditField(h2,v,70,"time",Normal,LastSuccessReqTime,false,0);
  EditField(h1-10,v+=vs,70,"Last cheque date",ViewOnly,LastInvDate,false,0);
  EditField(h2,v,70,"time",ViewOnly,LastInvTime,false,0);
  EditField(h1-10,v+=vs,70,"Last PDF (Suppl. e-inv nr)",Normal,LastPDFInvNr,false,0);
  v = v + vs;
  CheckBox(h1-200,v+=vs,0,"Receive cheques without PDF files",NoPdfFlag);
  EndFrame;
  EndWindow; 
end;

window TsekkCloseServiceWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Closing service",TsekkCloseServiceWClass,CGother,RcType);
  UseView(RcVc);
  SetWRect(20,160,330,280);
  h = 25; v = -50;
  StaticText(h,45,"Are you sure that your to stop the service?",false);
  HalPushButton(h     ,v,h+100,-25,"CloseActiveWindowTsekk","No");
  HalPushButton(-h-100,v,-h   ,-25,"SendDeActivReqTsekk","Yes");
  EndWindow; 
end;

window SelectVEIVTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Supplier e-invoices to Expense",SelectVEIVTClass,CGHbl,0);
  SetBlid(SelectVEIVBlock);
  SetWRect(60,80,600,300);
  Sizeable(-1,-1,0,0);
  ToolBar;
  HalPushButton(h=100,v=3,h+90,v+10,"ExpFromVEIVLAltsm","Create");
  HalPushButton(h=210,v=3,h+90,v+10,"RemSelectVEIVBlocksm","Clear");
  EndToolBar;
  h = 40; v = 27;
  MatrixBegin(h,v,-31,-20,-,99);
  MatColTL(1,25,"Ser. Nr",0,M4Long,Normal,0,VEIVSerNr,false,VEIVSClass);
  MatColTL(1,125,"Date",0,M4Date,ViewOnly,0,VEIVDate,false,0);
  MatColTL(1,225,"Supplier",0,M4Str,ViewOnly,0,VEIVVendor,false,0);
  MatColTL(1,-75,"Total sum",0,M4Val,ViewOnly,0,VEIVTotVal,false,0);
  InsertRowTest;
  DeleteRowTest;
  //SpecialMenu("Create Expense from selected",' ',1,"ExpFromVEIVLAltsm");
  //SpecialMenu("Clear the window",' ',2,"RemSelectVEIVBlocksm");
  EndMatrix;
  EndWindow;
end;

//KB tsekk.ee 09.01.2018 completely new window in Hansa
window VEIVSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Supplier e-invoice",VEIVSClass,CGslist,-);
  SetWRect(20,80,800,291);
  Sizeable(-1,-1,0,0);
  UseView(VEIVVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Nr",SerNr,false,SerNr);
  RlColKey(71,66,"OK",OKFlag,false,OKFlag);
  RlColKey(100,100,"Purch inv. nr.",VISerNr,false,VISerNr);
  RlColKey(180,180,"Inv. date",InvDate,false,InvDate);
  RlCol(260,260,"Order nr.",VEOrderNr,false);
  RlColKey(330,340,"Supplier",VECode,false,VECode);
  RlColKey(410,410,"Name",VECompName,false,VECompName);
  RlCol(-115,-115,"Sum",Sum4,true);
  RlCol(-15,-15,"",CredMark,true);
  SearchField("Search");
  EndWindow;
end;

//vd aruanne
window VDReportRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,v3,vm,vs;
  WindowBegin("Define VD report",VDReportRClass,CGRcW,RcType);
  SetWRect(20,80,432,360);
  vs = 20; h = 130; v = 6;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs, 150,"Customer",M4UStr,Normal,30,f1,false,CUSClass);
  EditFieldTL(h,v+=vs,70,"Classification",M4UStr,Normal,30,f2,false,CClassSClass);
  CheckBox(h,v+=16, 70,"Only customers with balance",flags[0]);
  ButtonFrame(h,v=v+40,200,3,"Type of trans.");
  CheckBox(h,v,0,"Product export",flags[1]);
  CheckBox(h,v+=16,0,"Triangle agreem.",flags[2]);
  CheckBox(h,v+=16,0,"Service",flags[3]);  
  EndWindow;
end;

window VDReportEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,v3,vm,vs;
  WindowBegin("Define VD report",VDReportEClass,CGEcW,RcType);
  SetWRect(20,80,432,360);
  vs = 20; h = 130; v = 6;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs, 150,"Customer",M4UStr,Normal,30,f1,false,CUSClass);
  EditFieldTL(h,v+=vs,70,"Classification",M4UStr,Normal,30,f2,false,CClassSClass);
  CheckBox(h,v+=16, 70,"Only customers with balance",flags[0]);
  ButtonFrame(h,v=v+40,200,3,"Type of trans.");
  CheckBox(h,v,0,"Product export",flags[1]);
  CheckBox(h,v+=16,0,"Triangle agreem.",flags[2]);
  CheckBox(h,v+=16,0,"Service",flags[3]);  
  EndWindow;
end;

//xml inkasso
window XMLVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("XML, Inkasso",XMLVClass,CGMnt,RcType);
  SetWRect(20,80,400,200);
  EditFieldTL(250,36,55,"Due Date exceeded days amount",M4Long,Normal,0,long1,false,0);
  EndWindow;
end;

//muu
window DefUserVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Define User Type as Concurrent",DefUserVClass,CGMnt,RcType);
  SetWRect(20,80,300,200);
  StaticText(50,70,"Run the maintenance",false);
  EndWindow;
end;

window ArtST2RClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real x,h,h1,h2,h3,h4,h5,h6,h7,v,v1,v2,l,vs,vm,vm2,f,t,hs,hof,es;
  Integer icn,icnovr,icndwn;

  WindowBegin("Specify Purchase Invoices Statistics",ArtST2RClass,CGRcW,RcType);
  SetWRect(20,80,450,200);
  EditFieldTL(h=160,v=6, 150,"Item",   M4UStr,Normal,50,f1,false,INSClass);
  EditFieldTL(h,v+=20, 150,"Item Group",   M4UStr,Normal,20,f3,false,ITSClass);
  EditFieldTL(h,v+=20, 150,"Customer (Invoice)",   M4UStr,Normal,41,f2,false,CUSClass);
  EditFieldTL(h,v+=20, 150,"Customer Category (Invoice)",   M4UStr,Normal,30,ObjStr,false,CCatSClass);
  EditFieldTL(h,v+=20, 150,"Supplier (Purchase Invoice)",   M4UStr,Normal,41,f5,false,VESClass);
  PeriodField(h,v+=20,"Period");
  EndWindow;
end;

//nk aruanne Ostuarvete manused 26.09.2018
window BK_VIPdfLinkRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Purchase Invoice Attachments",BK_VIPdfLinkRClass,CGRcW,RcType);
  SetWRect(20,80,400,180);
  vs = 20;
  PeriodField(h=120,v=6,"Period");
  ButtonFrame(h,vm=(v+=40),163,2,"Files");
  CheckBox(h,v,0,"Attached",flags[1]);
  CheckBox(h,v+=17,0,"Not attched",flags[2]);
  EndWindow;
end;

//e-arvete algandmed KB 30.01.2019
window EInvUpdBaseDataLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Updated base data",EInvUpdBaseDataLClass,CGmlist,-);
  SpawnClass(EInvUpdBaseDataDClass);
  SetWRect(65,80,400,300);
  Sizeable(-1,-1,0,0);
  UseView(EInvUpdBaseDataVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Register",RecordType,false,RecordTypeID);
  RlCol(80,80,"Record ID",RecordID,false);
  RlColKey(160,160,"Upd. date",UpdDate,false,UpdDateTime);
  RlCol(240,240,"Upd. time",UpdTime,false);
  EndWindow;
end;

window EInvUpdBaseDataDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Updated base data record",EInvUpdBaseDataDClass,CGview,-);
  UseView(EInvUpdBaseDataVc);
  SetWRect(65,80,200,300);
  h = 80; vs = 20;
  EditField(h,v+=vs,100,"Register",ViewOnly,RecordType,false,0);
  EditField(h,v+=vs,100,"Record ID",ViewOnly,RecordID,false,0);
  EditField(h,v+=vs,100,"Upd. date",ViewOnly,UpdDate,false,0);
  EditField(h,v+=vs,100,"Upd. time",ViewOnly,UpdTime,false,0);
  EndWindow;
end;

window SendEInvBaseDataVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define base data to e-inv portal",SendEInvBaseDataVClass,CGMnt,RcType);
  SetWRect(20,80,400,300);
  h = 20; vs = 20;
  StaticText(h,v+=vs,"This maintenance will find new and changed records",false);
  StaticText(h,v+=vs,"in database and then send them to e-invoicing portal",false);
  StaticText(h,v+=vs,"To send only updated data disable all checkboxes",false);
  CheckBox(h,v+=vs,0,"Send all data (add / update in portal)",flags[0]);
  v = v + 2 * vs;
  StaticText(h,v+=vs,"ATTENTION!",false);
  StaticText(h,v+=vs,"NB! The below option will overwrite all data in portal",false);
  StaticText(h,v+=vs,"with the records being sent from your database",false);
  CheckBox(h,v+=vs,0,"Ovewrite the data in portal",flags[1]);
  EndWindow;
end;

//intrastat
window IntrastatXMLTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Intrastat XML Settings",IntrastatXMLTClass,CGSbl,-);
  SetWRect(64,80,460,230);
  SetBlid(IntrastatXMLBlock);
  h = 160; h2 = 280; v = 6; vs = 20;

  Tile(0,50,false,"",envelopeID);
  TileButton(1,"General");
  TileButton(2,"Mail");
  Tile(1,50,false,"",envelopeID);
  EditField(h,v,80,"Export nr.(envelopeId)",Normal,envelopeID,false,0);
  EditField(h,v+=vs,80,"Sender Type",Normal,Sender,false,0);
  EditField(h,v+=vs,80,"Receiver Type",Normal,Receiver,false,0);
  EditField(h,v+=vs,80,"Receiver ID",Normal,IdReceiver,false,0);
  EditField(h,v+=vs,-40,"Receiver Name",Normal,ReceiverName,false,0);
  EditField(h,v+=vs,80,"Applicant reg. nr",Normal,PSIId,false,0);
  EditField(h,v+=vs,80,"Declaration Default nr.",Normal,DecSerNr,false,0);
  EditField(h,v+=vs,30,"Declaration Type",Normal,declarationTypeCode,true,0);
  Tile(2,50,false,"",emailAddr);
  EditField(h=90,v=20,140,"Receiver e-mail",Normal,emailAddr,false,0);
  EditField(h,v+=20,-20,"Header",Normal,Header,false,0);
  EditField(h,v+=20,70,"Start Text",Normal,FirstTxt,false,LTxtSClass);
  EditField(h+150,v,70,"End Text",Normal,LastTxt,false,LTxtSClass);
  EndWindow;
end;

window IntrastatDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,h2,vm;
  WindowBegin("Intrastat XML Declaration",IntrastatDClass,CGview,-);
  UseView(IntrastatVc);
  SetWRect(20,80,450,310);
  vs = 20; h = 150; h2 = 300;
  ActiveFieldOnNew("Period2Str");
  RadioButton(h=120,v=16,0,0,"Month",flags[13]);
  RadioButton(h+70,v,1,0,"Quarter",flags[13]);
  RadioButton(h+140,v,2,0,"Year",flags[13]);
  //selection window ----------------------------------------
  EditFieldTL(h=150,v+=26, 150,"Period",M4UStr,Normal,21,Period2Str,false,PerSClass);

  EditFieldTL(h,v+=vs, 150,"Items",M4Str,Normal,50,f1,false,INSClass);
  EditFieldTL(h,v+=vs, 150,"Item Group",M4UStr,Normal,50,f3,false,ITSClass);
  EditFieldTL(h,v+=vs, 150,"Sales Invoices",M4Str,Normal,50,f2,false,0);
  EditFieldTL(h,v+=vs, 150,"Purchase Invoices",M4Str,Normal,50,f4,false,0);
 // EditFieldTL(h,v+=vs, 150,"Previous Declaration ID",M4Str,Normal,60,f5,false,0);
  h=80;h2=230; 
  //if (HasModPOS) then begin
    //TEMP CheckBox(100,v,0,"K.a. POS arved",flags[0]); 
  //end;
  
  //CheckBox(100,v,0,"Don't show qty for weighted items",flags[7]);

  ButtonFrame(h=30,vm=(v+=40),134,2,"Declaration Flow");
  CheckBox(h,v,0,"Sales",flags[11]);
  CheckBox(h,v+=16,0,"Purchase",flags[12]);
/*
  ButtonFrame(h2=224,vm,123,4,"Operation");
  RadioButton(h2,vm,0,0,"Original",flags[10]);
  RadioButton(h2,vm+=16,1,0,"Replace",flags[10]);
  RadioButton(h2,vm+=16,3,0,"Correct",flags[10]);
  RadioButton(h2,vm+=16,2,0,"Delete",flags[10]);
  */
  ButtonFrame(h=30,v+=40,134,3,"Zone");
  CheckBox(h,v,0,"#Domestic#",flags[1]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabel_ENG(1),flags[2]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabel_ENG(2),flags[3]);
  
  ButtonFrame(h,v+=40,134,2,"Exclude Item Type");
  CheckBox(h,v,0,"Plain",flags[4]);
  CheckBox(h,v+=16,0,"Service",flags[5]);
  
  ButtonFrame(h2,vm,123,2,"Grouping");
  RadioButton(h2,vm,0,0,"Item code",flags[8]);
  RadioButton(h2,vm+=16,1,0,"ECN code",flags[8]);
  
  vm = vm + 40;
  ButtonFrame(h2,vm,123,2,"Rounding");
  RadioButton(h2,vm,0,0,"Exact",flags[6]);
  RadioButton(h2,vm+=16,1,0,"No Decimals",flags[6]);
  StaticText(20,v+=vs*2,"______________________________________________________________________",false);
  h = 150;
  HalPushButton(h+105,v+=vs,-60,v+26,"InstrastaXMLEn","Run Export");
  EditFieldTL(h,v,82,"Code (envelopeID)",M4Code,St_i,20,Code,true,0);
  HalPushButton(h+105,v+30,-60,v+56,"InstrastaXMLMailEn","Create e-mail");
  EditField(h,v+=vs,82,"Sales Declaration ID",ViewOnly,Sales,true,0);
  EditField(h,v+=vs,82,"Purchase Declaration ID",ViewOnly,Purchases,true,0);
  EditField(h,v+=vs,82,"User",ViewOnly,UserCode,false,0);
  EditField(h,v+=vs,82,"Created",ViewOnly,TransDate,false,0);  
  EndWindow;
end;

window BK_IntrastatRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("device","computer")
begin
  real h,h1,h2,v,vm,vs;
  WindowBegin("Specify Intrastat Report",BK_IntrastatRClass,CGRcW,RcType);
  SetWRect(20,80,400,310);
  vs = 20; h = 150; h2 = 300;
  ActiveFieldOnNew("Period2Str");
  
  RadioButton(h=120,v=16,0,0,"Month",flags[13]);
  RadioButton(h+70,v,1,0,"Quarter",flags[13]);
  RadioButton(h+140,v,2,0,"Year",flags[13]);
  
  PeriodField(h=160,v+=26,"Period");
  EditFieldTL(h,v+=vs, 150,"Items",M4Str,Normal,50,f1,false,INSClass);
  EditFieldTL(h,v+=vs, 150,"Item Group",M4UStr,Normal,50,f3,false,ITSClass);
  EditFieldTL(h,v+=vs, 150,"Sales Invoices",M4Str,Normal,50,f2,false,0);
  EditFieldTL(h,v+=vs, 150,"Purchase Invoices",M4Str,Normal,50,f4,false,0);
  //EditFieldTL(h,v+=vs, 150,"Eelmise deklaratsiooni ID",M4Str,Normal,60,f5,false,0);
  h=80;h2=200;v = v + 20;
  //if (HasModPOS) then begin
    //TEMP CheckBox(100,v,0,"K.a. POS arved",flags[0]); 
  //end;
  //CheckBox(100,v,0,"Don't show qty for weighted items",flags[7]);
  CheckBox(100,v,0,"Check XML Report header",flags[20]);
  
  ButtonFrame(h=30,vm=(v+=40),134,2,"Declaration Flow");
  RadioButton(h,v,0,0,"Sales",flags[21]);
  RadioButton(h,v+=16,1,0,"Purchase",flags[21]);
 
  ButtonFrame(h2,vm,123,2,"Grouping");
  RadioButton(h2,vm,0,0,"Item code",flags[8]);
  RadioButton(h2,vm+=16,1,0,"ECN code",flags[8]);

  ButtonFrame(h=30,vm=(v+=40),134,3,"Zone");
  CheckBox(h,v,0,"#Domestic#",flags[1]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabel_ENG(1),flags[2]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabel_ENG(2),flags[3]);
  
  ButtonFrame(h2,vm,123,2,"Rounding");
  RadioButton(h2,vm,0,0,"Exact",flags[6]);
  RadioButton(h2,vm+=16,1,0,"No Decimals",flags[6]);

  ButtonFrame(h,v+=40,134,2,"Exclude Item Type");
  CheckBox(h,v,0,"Plain",flags[4]);
  CheckBox(h,v+=16,0,"Service",flags[5]);
  EndWindow;
end;  

window IntrastatLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Intrastat XML Declarations",IntrastatLClass,CGmlist,-);
  SetWRect(64,80,720,298);
  SpawnClass(IntrastatDClass);
  UseView(IntrastatVc);
  Sizeable(-1,-1,0,0);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Code",Code,false,Code);
  RlColKey(81,81,"Period",Period2Str,false,Period2Str);
  RlColKey(221,221,"Created",TransDate,false,TransDate);
  RlColKey(-280,-280,"Sales Decl.ID",Sales,false,Sales);
  RlColKey(-140,-140,"Purchase Decl.ID",Purchases,false,Purchases);
  SearchField("Search");
  EndWindow;
end;

//pangaliidestus
window BankActivWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs,vm;
  WindowBegin("Bank services activation",BankActivWClass,CGother,RcType);
  UseView(RcVc);
  SetWRect(20,80,450,300);
  h = 50; h2 = 55; v = 20; vs = 20;
  StaticText(h,v,"Please choose required services",false);
  v = v + vs;
  ButtonFrame(h,v+=vs,300,5,"Swedbank");
  CheckBox(h,v,0,"Sending payments",flags[0]);
  CheckBox(h,v+=vs,0,"Previous day end statement",flags[1]);
  CheckBox(h,v+=vs,0,"Current day statement (paid service)",flags[2]);
  v = v + vs;
  EditFieldTL(h+90,v+=vs,h+40,"SGW agreement ID",M4Star,Normal,40,f1,false,0);
  EndFrame;
  HalPushButton(h,-50,h+100,-25,"BankActivClose","Cancel");
  HalPushButton(-h-100,-50,-h   ,-25,"BankActivOK","Activate");
  EndWindow; 
end;

window ExcPINWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h1,h2,v;
  WindowBegin("Please confirm",ExcPINWClass,CGother,RcType);
  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(80,200,450,320);
  Sizeable(-1,-1,0,0);
  h1 = 140; h2 = 55; v = 30;
  v = 20;
  //EditFieldTL(h1,v,100,"PIN2",M4Star,Normal,10,f1,false,0); //not allowed by SGW yet
  StaticText(h2,v,"NB! Payment will be sent to bank for approval",false);
  StaticText(h2,v+=16,"Please confirm sending to bank",false);
  //HalPushButton(h2,v+=30,h2+105,v+20,"ExcPINWClassOK","Allkirjasta"); //not allowed by SGW yet
  v = v + 30;
  h2 = 53;
  HalPushButton(h2,v,h2+105,v+20,"ExcPINWClassNoSign","Confirm");
  HalPushButton(h2+=158,v,h2+105,v+20,"CancelPINWClass","Cancel");
  EndWindow;
end;

window BankReqQueLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Bank request queue",BankReqQueLClass,CGmlist,-);
  SetWRect(20,80,1000,300);
  Sizeable(-1,-1,0,0);
  SpawnClass(BankReqQueDClass);
  UseView(BankReqQueVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Ser. number",SerNr,false,SerNr);
  RlColKey(100,100,"Type",BankReqType,false,BankReqType);
  RlColKey(190,190,"Status",Status,false,StatusDateTime);  
  RlColKey(260,260,"Creat. date",CreationDate,false,CreationDateTime);  
  RlColKey(340,340,"Send. date",SendDate,false,SendDateTime);  
  RlColKey(420,420,"Reply date",ReplyDate,false,ReplyDateTime);  
  RlCol(500,500,"Attempts",SendAttempts,false);  
  RlCol(580,580,"Comment",StatusMessage,false);
  SearchField("Search");
  EndWindow;
end;

window BankReqQueDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,length0,length1,length2,length3;
  WindowBegin("Bank request",BankReqQueDClass,CGview,-);
  SetWRect(20,80,750,600);
  Sizeable(-1,-1,0,0);
  UseView(BankReqQueVc);
  h = 100 ; h2 = 300; h3 = 500; vs = 20; length0 = 300; length1 = 190; length2 = 100; length3 = 60;
  ActiveFieldOnNew("SerNr");  
  EditField(h,v=6,length3,"Ser. number",Normal,SerNr,false,0);
  EditField(h2,v,length2,"Request type",Normal,BankReqType,false,0);
  EditField(h3,v,length1,"Request ID",Normal,ReqUniqueID,false,0);
  EditField(h,v+=vs,length2,"PmtInfId",Normal,PmtInfId,false,0);
  EditField(h3,v,length3,"Status",Normal,Status,false,SetSClass);
  EditField(h,v+=vs,length3,"Partner",Normal,Partner,false,0);
  EditField(h2,v,length2,"Reg. num.",Normal,RegNr,false,0);
  EditField(h3,v,length2,"User name",Normal,UserName,false,0);
  EditField(h,v+=vs,length3,"Bank code",Normal,BankCode,false,0);
  EditField(h3,v,length1,"Acc. | IBAN",Normal,IBAN,false,0);
  v = v + vs;
  EditField(h+50,v+=vs,length3,"Creat. date",Normal,CreationDate,false,0);
  EditField(h2,v,length3,"time",Normal,CreationTime,false,0);
  EditField(h+50,v+=vs,length3,"Send. date",Normal,SendDate,false,0);
  EditField(h2,v,length3,"time",Normal,SendTime,false,0);
  EditField(h3,v,length3,"Send attempts",Normal,SendAttempts,false,0);
  EditField(h+50,v+=vs,length3,"Reply date",Normal,ReplyDate,false,0);
  EditField(h2,v,length3,"time",Normal,ReplyTime,false,0);
  EditField(h3,v,length3,"Reply status",Normal,ReplyStatCode,false,SetSClass);
  v = v + vs;
  EditField(h,v+=vs,length3,"Record type",Normal,RecordType,false,0);
  EditField(h2,v,length3,"Record ID",Normal,RecordID,false,0);
  EditField(h3,v,length1,"Req. file name",Normal,ReqFileName,false,0);
  EditField(h,v+vs,length0 + length2,"Comment",Normal,StatusMessage,false,0);
  //EditField(h2,v,length3,"Correl. ID",Normal,CorrelID,false,0);
  //EditField(h3,v,length2,"MsgID",Normal,MsgID,false,0);
  v = v + 3 * vs;
  MatrixBegin(20,v+=vs,-50,-24,-,199);
  Flip(0);
  MatColTL(1,28,"Record ID",0,M4Str,ViewOnly,-1,RecordID,false,0);
  MatColTL(1,100,"PmtInfId",0,M4Str,ViewOnly,-1,PmtInfId,false,0);
  //MatColTL(1,200,"Vastuse hetkeseis",0,M4Set,ViewOnly,-1,ReplyStatCode,false,SetSClass);
  MatColTL(1,200,"Comment",0,M4Str,Normal,-1,StatusMessage,false,0);
  EndMatrix;

  EndWindow;
end;

window BankServicesTCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,l,v,vm,vs;
  WindowBegin("Bank requests settings",BankServicesTCLass,CGSbl,-);
  SetBlid(BankServicesBlock);
  SetWRect(90,80,500,500);
  h = 100; h1 = 230; vs = 20; v = 6;

  Tile(0,20,false,"",Bank1EPayFlag);
  CheckBox(30,v,0,"Bank requests debug mode",DebugFlag);
  CheckBox(30,v+=vs,0,"Bank requests test mode",TestFlag);
  TileButton(1,"Swedbank");
  //TileButton(2,"Other bank");
  //TileButton(3,"Other bank");

  Tile(1,20,true,"1",Bank1EPayFlag);
  EditFieldTL(h1,v+=vs,h+40,"SGW agreement ID",M4Star,Normal,40,Bank1AgreementId,false,0);
  v = v + vs * 2;
  ButtonFrame(30,v+=vs,440,4,"Sending payments");
  CheckBox(30,v,0,"Activate",Bank1EPayFlag);
  EditField(h1,v+=vs,80,"Last send. date",Normal,Bank1EPayLastDate,false,PasteCurDate);
  EditField(h1+120,v,50,"time",Normal,Bank1EPayLastTime,false,0);
  EditField(h1,v+=vs,80,"Last sent payment",Normal,Bank1EPayLastRecord,false,0);
  EndFrame;
  v = v + vs * 2;
  ButtonFrame(30,v+=vs,440,3,"Previous day end statement");
  CheckBox(30,v,0,"Activate",Bank1AccStmtFlag);
  EditField(h1,v+=vs,80,"Last statement 'to' date",Normal,Bank1AccStmtLastDate,false,PasteCurDate);
  EditField(h1+120,v,50,"time",Normal,Bank1AccStmtLastTime,false,0);
  EndFrame;
  v = v + vs * 2;
  ButtonFrame(30,v+=vs,440,3,"Current day statement (paid service)");
  CheckBox(30,v,0,"Activate",Bank1TodayAccStmtFlag);
  EditField(h1,v+=vs,80,"Last statement 'to' date",Normal,Bank1TodayAccStmtLastDate,false,PasteCurDate);
  EditField(h1+120,v,50,"time",Normal,Bank1TodayAccStmtLastTime,false,0);
  EndFrame;
  EndWindow;
end;

window BankStmntStatRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;
  WindowBegin("Define bank statement status",BankStmntStatRClass,CGRcW,RcType);
  SetWRect(20,80,440,250);
  vs = 20; h = 140; v = 6;
  PeriodField(h,v=6,"Added during period");
  EndWindow;
end;

window EPayStatRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;
  WindowBegin("Define e-payment status (Books)",EPayStatRClass,CGRcW,RcType);
  SetWRect(20,80,440,250);
  vs = 20; h = 140; v = 6;
  EditFieldTL(h,v+=20,150,"Payments",M4UStr,Normal,21,f1,false,0);
  EndWindow;
end;

window BankStmntVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Bank statement request",BankStmntVClass,CGMnt,RcType);
  SetWRect(60,80,450,150);
  h = 20; v = 20; vs = 20;
  StaticText(h,v+=vs,"NB! This is paid service!",false);
  StaticText(h,v+=vs,"During this maintenance, new bank statement request",false);
  StaticText(h,v+=vs,"will be added to bank request queue and program",false);
  StaticText(h,v+=vs,"will send it out according to bank queue interval",false);
  StaticText(h,v+=vs,"(Electronic Invoices Queries Intervals).",false);
  StaticText(h,v+=vs,"The status can be checked in report 'Bank statement status'",false);
  EndWindow;
end;

window BankInfoWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h1,h2,v;
  WindowBegin("INFO: Bank services",BankInfoWClass,CGother,RcType);
  Modality(kModalityGlobal);
  UseView(RcVc);
  SetWRect(0,300,400,480);
  Sizeable(-1,-1,0,0);
  h1 = 30; h2 = 147; v = 20;
  StaticText(h1,v,"NB! Bank services are disabled.",false);
  v = v + 15;
  StaticText(h1,v+=15,"Check for more info about the services at Swedbank homepage",false);
  StaticText(h1,v+=15,"(www.swedbank.ee)",false);
  StaticText(h1,v+=15,"and Excellent support web page",false);
  StaticText(h1,v+=15,"(www.excellent.ee/kasutajatugi/)",false);
  //HalPushButton(h2,v+=30,h2+105,v+20,"OpenSGWHomePage","Swedbank"); //not working without IE on Win KB 17.06.2019
  //HalPushButton(h2,v+=30,h2+105,v+20,"OpenSGWActivPage","Activation"); //not working without IE on Win KB 17.06.2019
  HalPushButton(h2,v+=30,h2+105,v+20,"CloseBankInfo","Close");
  EndWindow;
end;

//lao muugivaartus
window BKInvSaleValRClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,v1,vm,vs,v2;
  Integer tilenr;
  
  WindowBegin("Specify #Stock# sale value",BKInvSaleValRClass,CGRcW,RcType);
  h = 160; v = 6; vs = 20; h2 = 30; h3 = 180; h4 = 330;

  if (IsBooks) then begin
    SetWRect(20,80,580,470);
    Tile(0,40,false,"",f1);
    h4 = 330;
  end else begin
    SetWRect(20,80,400,470);
    h4 = 227;
    h = 120;
  end;

  EditFieldTL(h,v,150,"Item No.",M4UStr,Normal,50,f1,false,INSClass); v = v + vs;
  if (IsBooks) then begin
    TileButtons(v,2);
    tilenr = 1;
    Tile(tilenr,340,false,tilenr,d1); tilenr = tilenr + 1;
    v = 6;
  end;
  if (true) then begin
    EditFieldTL(h,v,150,"Item Group",M4UStr,Normal,11,f3,false,ITSClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,150,"Item Classification", M4UStr,Normal,100,f4,false,DISClass); v = v + vs;
    EditFieldTL(h,v,150,"Classification Type",M4UStr,Normal,60,f5,false,CTypeSClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,80,"Location",M4Code,Normal,10,f2,false,LocationSClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,150,"Position",M4Code,Normal,10,FirstAcc,false,PosSClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,150,"Department",M4UStr,Normal,10,AccStr,false,DepSClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,150,"#Supplier#",M4UStr,Normal,20,LastAcc,false,VESClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,50,"#Supplier#. Category",M4UStr,Normal,5,f9,false,VGSClass); v = v + vs;
  end;
  if (true) then begin
    EditFieldTL(h,v,150,"#Supplier# Class.",M4UStr,Normal,30,f8,false,CClassSClass); v = v + vs;
  end;
  EditFieldTL(h,v,80,"Date",M4Date,Normal,0,d1,false,PasteCurDate); v = v + vs;
  ButtonFrame(h2,vm=(v+=30),123,5,"Function");
  RadioButton(h2,v,0,0,"Overview",ArtMode);
  RadioButton(h2,v+=16,1,0,"Detailed",ArtMode);
  if (true) then begin
    RadioButton(h2,v+=16,2,0,"Per Location",ArtMode);
    CheckBox(h2+30,v+=16,0,"Inc Values",flags[14]);
    RadioButton(h2,v+=16,3,0,"Location Totals",ArtMode);
  end;
  EndFrame;
  if (true) then begin
    v = v + 45; v1 = v;
  end;
  if (IsBooks) then begin //Bk
    ButtonFrame(h3,v=vm,123,5,"Valuation Method");
    RadioButton(h3,v,0,0,"Default",flags[11]);
    RadioButton(h3,v+=16,1,0,"Cost Price",flags[11]);
    RadioButton(h3,v+=16,2,0,"% of Base Price",flags[11]);
    RadioButton(h3,v+=16,3,0,"Weighted Average",flags[11]);
    RadioButton(h3,v+=16,4,0,"Queued",flags[11]);
    ButtonFrame(h3,v=v1,123,3,"Display");
    RadioButton(h3,v,0,0,"Normal",flags[19]);
    RadioButton(h3,v+=16,1,0,"#Summarised#",flags[19]);
    RadioButton(h3,v+=16,2,0,"#De-Summarised#",flags[19]);
  end;
  ButtonFrame(h4,v=vm,123,5,"Sorting");
  RadioButton(h4,v,0,0,"No.",flags[2]);
  if (true) then begin
    RadioButton(h4,v+=16,1,0,"Group",flags[2]);
  end;
  RadioButton(h4,v+=16,2,0,"N_ame",flags[2]);
  if (IsBooks) then begin //Bk
    RadioButton(h4,v+=16,3,0,"Barcode",flags[2]);
    if (true) then begin
      RadioButton(h4,v+=16,4,0,"Classification",flags[2]);
    end;
  end;
  EndFrame;
  v2 = v + 16;
  v = v1;
  if (IsBooks) then begin //Bk
    CheckBox(h4,v=20,0,"Only with Balance",UsedOnly);
    CheckBox(h4,v+=16,0,"Negative Qtys only",flags[17]);
  end;
  if (IsBooks==false) then begin //Bk
    v = v2;
  end;
  if (true) then begin
    CheckBox(h4,v+=16,0,"Show Serial No.",flags[10]); v = v + 16;
  end;
  if (true) then begin
    CheckBox(h4,v,0,"Show Quantity 2",flags[15]); v = v + 16;
  end;
  if (IsBooks) then begin //Bk
    CheckBox(h4,v,0,"Value - Two Decimals",flags[16]); v = v + 16; // Who wanted this? Decimals per report....nahh.., I haven't added this one, JJ
    CheckBox(h4,v,0,"Include Closed Items",flags[18]); v = v + 16;
    CheckBox(h4,v,0,"Report Calculates Back Dated WA",flags[20]); v = v + 16;
    if (true) then begin
      CheckBox(h4,v,0,"Show with Supersessions",flags[21]); v = v + 16;
    end;
    CheckBox(h4,v,0,"Show profit",flags[24]); v = v + 16;
  end;
  if (IsBooks) then begin //Bk
    Tile(tilenr,340,false,tilenr,-); tilenr = tilenr + 1;
    v = 6;
    EditFieldTL(h,v,150,"Location Group",M4Code,Normal,10,f10,false,LocGrSClass);
    EditFieldTL(h,v+=vs,150,"Location Classification",M4List,Normal,200,f11,false,LocClSClass);
    ButtonFrame(h=30,vm=(v+=40),188,3,"Function");
    RadioButton(h,v,0,0,"Include Consignment #Stock#",flags[12]);
    RadioButton(h,v+=16,1,0,"Exclude Consignment #Stock#",flags[12]);
    RadioButton(h,v+=16,2,0,"Consignment #Stock# Only",flags[12]);
  end else begin
    vm = v;
  end;
  if (false) then begin
    CheckBox(h4,v=vm,0,"Show Varieties",flags[22]); v = v + 16;
  end;
  if (HasLocalization("ARG,MEX,USA") and IsStandardProduct==false) then begin
    CheckBox(h4,v,0,"Show Dispatch Number (Detailed)",flags[23]); v = v + 16;
  end;
  EndWindow;
end;

//klientide statistika riikide loikes
window CustCntrySTRClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify Customer Statistics by Country",CustCntrySTRClass,CGRcW,RcType);
  SetWRect(20,80,410,340);
  vs = 20;
  h = 145;
  PeriodField(h,v=6,"Period");
  EditFieldTL(h,v+=vs, 150,"Customers",   M4UStr,Normal,30,f1,false,CUSClass);
  if (true) then begin
    EditFieldTL(h,v+=vs, 150,"Categories",   M4UStr,Normal,30,f3,false,CCatSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs,150,"Classification",M4UStr,Normal,30,Stext,false,CClassSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs, 150,"Item",   M4UStr,Normal,41,f2,false,INSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs,150,"Item Groups",M4UStr,Normal,20,f4,false,ITSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs,150,"Item Classification",M4UStr,Normal,100,f5,false,DISClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs ,100,"#Salesman# (from Cust.)",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs ,100,"Sales Group (from Cust.)",M4UStr,Normal,5,Language,false,SalesGroupSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs ,100,"Min. Turnover",M4Val,Normal,0,vals0,true,0);
  end;
  if (IsBooks) then begin
    if (UserCanAction("ViewCostPrice",true) and true) then begin
    EditFieldTL(h,v+=vs ,100,"Min. GP",M4Val,Normal,0,vals1,true,0);
    end;
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs, 150,"Tag/Object on Customer",M4UStr,Normal,20,ObjStr,false,ObjSClass);
  end;
  if (true) then begin
    EditFieldTL(h,v+=vs, 100,"Country",M4UStr,Normal,5,TransStr,false,CountrySClass);
  end;  
  if (IsBooks) then begin
    ButtonFrame(h,v+=40,130,3,"Sorting");
    RadioButton(h,v,0,0,"Nr.",flags[1]);
    RadioButton(h,v+=16,1,0,"Name",flags[1]);
    RadioButton(h,v+=16,2,0,"Country",flags[1]);
    CheckBox(h,v+=26,0,"Customer Info Only",flags[2]);
  end;
  EndWindow;
end;

//valjamaksmata kulutused
window PersExpPayRCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Define Personnel Statement - unpaid expenses",PersExpPayRCLass,CGRcW,RcType);
  SetWRect(20,80,430,150);
  h = 150;
  PeriodField(h,v+=20,"Trans. period");
  EditFieldTL(h,v+=20,150,"Document period",M4UStr,Normal,21,Stext,false,PerSClass);
  //EditFieldTL(h,v+=20, 150,"Expense nr",M4UStr,Normal,30,f2,false,0);
  EditFieldTL(h,v+=20, 150,"Person",M4UStr,Normal,30,f1,false,UserSClass);
  EditFieldTL(h,v+=20, 150,"Object from person card",M4UStr,Normal,30,ObjStr,false,ObjSClass);
  CheckBox(h,v+=20,0,"Only persons with balance",flags[0]);
  EndWindow;
end;

//kasumiaruanne ja eelarve kuude loikes
window MonthResBudRCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  WindowBegin("Specify Profit & Loss and Budget per month ",MonthResBudRCLass,CGRcW,RcType);
  SetWRect(20,80,527,430);
  PeriodField(h=110,v=6,"Period");
  if (true) then begin
  EditFieldTL(h,v+=20,150,"Tag/Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=20,50,"Tag/Object Type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  CheckBox(180,v,0,"Including unspecified",flags[2]);
  end;
  if (true) then begin
  EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (true) then begin
  EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);  
  end;
  if (true) then begin
  EditFieldTL(h,v+=20,150,"Exclude Tag/Object",M4UStr,Normal,60,f6,false,ObjSClass);
  end;
  EditFieldTL(345,6,120,"Header",M4Str,Normal,60 ,f1,false,0);
  ButtonFrame(h=30,vm=(v+=41),123,5,"Accounts");
  RadioButton(h,v,0,0,"A_ll",AccSpec);
  RadioButton(h,v+=16,1,0,"Used Only",AccSpec);
  if (true) then begin 
  RadioButton(h,v+=16,2,0,"Groups Only",AccSpec);
  RadioButton(h,v+=16,3,0,"Used Groups Only",AccSpec);
  RadioButton(h,v+=16,4,0,"With Balance",AccSpec);
  end;
  EndFrame;
  /* //not implemented yet
  ButtonFrame(h+=148,v=vm,123,5,"Notation");
  RadioButton(h,v,0,0,"Exact",Notation);
  RadioButton(h,v+=16,4,0,"No Decimals",Notation);
  RadioButton(h,v+=16,1,0,"Thousands",Notation);
  RadioButton(h,v+=16,2,0,"Millions",Notation);
  if (HasAdvancedAccounting) then begin
  RadioButton(h,v+=16,3,0,"% _Turnover",Notation);
  end;
  EndFrame;
  */
  if (HasAdvancedAccounting or HasLocalization("FIN")) then begin
    ButtonFrame(h,v+=40,123,3,"Show Comparison"); 
    RadioButton(h,v,0,0,"In Values",flags[1]); 
    RadioButton(h,v+=16,1,0,"In %",flags[1]);
    RadioButton(h,v+=16,3,0,"Don't Show",flags[1]); 
  end;
  ButtonFrame(h+=148,v=vm,160,2,"Comparison");
  //RadioButton(h,v,0,0,"A_ccumulated",Comparison);
  //RadioButton(h,v+=16,1,0,"Previous _Year",Comparison);
  //RadioButton(h,v+=16,4,0,"Previous _Result",Comparison);
  if (true) then begin
    RadioButton(h,v,2,0,"Budget",Comparison);
    if (true) then begin
      EditFieldTL(h+120,v+2,35,"",M4Code,Normal,5 ,FirstAcc,false,BudgetClassSClass);
    end;
    RadioButton(h,v+=16,3,0,"Revised Budget",Comparison);
//    CheckBox(h+115,v,0,"Add",flags[6]);//for internal use only
  end;
  EndFrame;
  if (true) then begin
  ButtonFrame(h,v+=40,123,2,"Values in");
  RadioButton(h,v,0,0,"Base Currency 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Base Currency 2",basecurncy);
  end;
  h = 30; v = 270;
  /* //not implemented yet
  if (true) then begin
    CheckBox(h,v,0,"Including _Simulations",SimVerf);
    v = v + 16;
  end;
  */
  v = v + 3 * 16;
  if (HasAdvancedAccounting) then begin
    CheckBox(h,v,0,"List Transaction No.",flags[4]);
    CheckBox(h,v+=16,0,"No Header",flags[5]);
  end;
//  CheckBox(h,v+=16,0,"Show zeros instead of blank strings",flags[19]);// reserved
  EndWindow;
end;

//artiklite pakendiretseptid
window ItemPackRecRCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define sold items package recipes",ItemPackRecRCLass,CGRcW,RcType);
  SetWRect(20,80,430,150);
  h = 150; vs = 20; v = 6;
  PeriodField(h,v+=vs,"Period");
  EditFieldTL(h,v+=vs,150,"Item",M4UStr,Normal,50,f1,false,INSClass);
  EditFieldTL(h,v+=vs,150,"Item group",M4UStr,Normal,11,f2,false,ITSClass);
  CheckBox(h,v+=vs,0,"Package exists",flags[0]);
  CheckBox(h,v+=vs,0,"Package missing",flags[1]);
  EndWindow;
end;

window PackRecToINVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define add package recipe to items",PackRecToINVClass,CGMnt,RcType);
  SetWRect(20,80,430,300);
  h = 150; vs = 20;
  EditFieldTL(h,v+=vs,120,"Item",M4UStr,Normal,20,f1,false,INSClass);
  EditFieldTL(h,v+=vs,120,"Item group",M4UStr,Normal,20,f2,false,ITSClass);
  EditFieldTL(h,v+=vs,120,"Item classification",M4UStr,Normal,100,f3,false,DISClass);
  EditFieldTL(h,v+=vs,120,"Classification type",M4UStr,Normal,30,f4,false,CTypeSClass);
  EditFieldTL(h,v+=vs,120,"Package recipe",M4UStr,Normal,20,f5,false,PackageRecSClass);
  v = v + vs;
  CheckBox(h-50,v+=vs,0,"Overwrite existing package recipes",flags[0]);
  EndWindow;
end;

//scoro liidestus
window ScoroTermsWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h1,h2,v,vs;
  WindowBegin("Scoro API activation",ScoroTermsWClass,CGother,RcType);
  DynamicWindow;
  UseView(RcVc);
  SetWRect(20,80,520,300);
  h1 = 25; h2 = 350; v = 30; vs = 20;
  StaticText(h1,v,"Scoro API URL:",false);
  EditField(h1+150,v-15,155,"",Normal,f1,false,0);
  StaticText(h2,v,"Port",false);
  EditField(h2+50,v-15,50,"",Normal,long1,false,0);
  v = v + vs;
  StaticText(h1,v,"Scoro account ID:",false);
  EditField(h1+150,v-15,155,"",Normal,f2,false,0);
  v = v + vs;
  StaticText(h1,v,"Scoro API key:",false);
  EditField(h1+150,v-15,155,"",Normal,f3,false,0);
  v = v + vs;
  StaticText(h1,v,"Language",false);
  EditField(h1+150,v-15,155,"",Normal,f4,false,0);
  v = v + 1.5 * vs;
  ButtonFrame(h1,v,200,2,"Request type"); 
  RadioButton(h1,v,0,0,"Invoices to Standard Books",flags[0]); 
  RadioButton(h1,v+=16,1,0,"Invoices to Scoro",flags[0]);
  EndFrame;
  v = v + 2 * vs;
  v = -30;
  HalPushButton(90,v,90 + 100,-25,"CloseActiveWindowScoro","Cancel");
  HalPushButton(90 + 180,v,90 + 180 + 100,-25,"SendScoroActivRequest","Activate");
  EndWindow; 
end;

window ScoroSettTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Scoro API settings",ScoroSettTClass,CGSbl,OPTType);
  SetBlid(ScoroSettBlock);
  SetWRect(90,80,600,500);
  h = 190; vs = 20;

  Tile(0,20,false,"",LiveHost);

  TileButton(1,"Activation");
  TileButton(2,"Settings");
  TileButton(3,"Debug");

  Tile(1,20,true,"1",LiveHost);
  EditField(h,v+=vs,h+20,"Scoro API live host",Normal,LiveHost,false,0);
  EditField(-70,v,-30,"port",Normal,LivePort,false,0);
  EditField(h,v+=vs,h+20,"Scoro API TEST host",Normal,TestHost,false,0);
  EditField(-70,v,-30,"port",Normal,TestPort,false,0);
  EditField(h,v+=vs,-20,"API key",Normal,APIKey,false,0);
  EditField(h,v+=vs,-20,"Company account ID",Normal,CompAccID,false,0);
  v = v + 2 * vs;
  ButtonFrame(h,v,200,2,"Request type"); 
  RadioButton(h,v,0,0,"Invoices to Standard Books",SendDirection); 
  RadioButton(h,v+=16,1,0,"Invoices sending to Scoro",SendDirection);
  EndFrame;


  Tile(2,20,true,"2",Language);
  v = 6;
  EditField(h,v+=vs,h+30,"Scoro response language",Normal,Language,false,0);
  EditField(h,v+=vs,h+30,"Pagination (0-100, default 20)",Normal,PerPage,false,0);
  CheckBox(20,v+=vs,0,"Import only sent invoices from Scoro",ImportOnlySentIV);
  v = v + vs;
  ButtonFrame(20,v+=vs,280,2,"Items import from Scoro");
  RadioButton(20,v,0,0,"Use mapping table (initial import)",INVcImpMethod);
  RadioButton(20,v+=16,1,0,"Always create new item from Scoro",INVcImpMethod);
  v = v + vs;
  EndFrame;
  ButtonFrame(20,v+=vs,280,2,"Row description to purch. invoice");
  RadioButton(20,v,0,0,"Account descr.",VIVcRowCommMethod);
  RadioButton(20,v+=16,1,0,"Scoro row descr.",VIVcRowCommMethod);
  EndFrame;
  v = v + vs;

  Tile(3,20,true,"3",RequestPath);
  v = 6;
  h = 200;
  EditField(h+60,v+=vs,-30,"Requests path (debug mode)",Normal,RequestPath,false,0);
  EditField(h+60,v+=vs,-30,"Replies path (debug mode)",Normal,ReplyPath,false,0);
  EditField(h+60,v+=vs,-30,"Errors path",Normal,ErrorPath,false,0);
  v = v + vs;
  EditField(h,v+=vs,h-70,"Last contacts import, date",Normal,CUVcLastReplyDate,false,PasteCurDate);
  EditField(-130,v,-60,"time",Normal,CUVcLastReplyTime,false,0);
  EditField(h,v+=vs,h-70,"Last items import, date",Normal,INVcLastReplyDate,false,PasteCurDate);
  EditField(-130,v,-60,"time",Normal,INVcLastReplyTime,false,0);
  EditField(h,v+=vs,h-70,"Last invoices import, date",Normal,IVVcLastReplyDate,false,PasteCurDate);
  EditField(-130,v,-60,"time",Normal,IVVcLastReplyTime,false,0);
  EditField(h,v+=vs,h-70,"Last purch. inv. import, date",Normal,VIVcLastReplyDate,false,PasteCurDate);
  EditField(-130,v,-60,"time",Normal,VIVcLastReplyTime,false,0);
  v = v + vs;
  StaticText(h-100,v+=vs,"NB! Requesting all changed and new entries",false);
  StaticText(h-100,v+=vs,"since the last imp. moment to new req moment. Change wisely",false);
  EndWindow;
end;

window ScoroExpQueLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Scoro API export queue",ScoroExpQueLClass,CGmlist,-);
  SetWRect(20,80,550,291);
  Sizeable(-1,-1,0,0);
  SpawnClass(ScoroExpQueDClass);
  UseView(ScoroExpQueVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Register",RecordName,false,RecordName);
  RlColKey(100,100,"Record nr.",RecordIdentifier,false,RecordIdentifier);
  RlColKey(180,180,"Date",CreationDate,false,CreationDate);  
  RlColKey(260,260,"Status",Status,false,Status);  
  RlCol(320,320,"Attempts",Attempts,false);  
  RlCol(400,400,"Comment",StatusMessage,false);
  SearchField("Search");
  SpecialMenu("Send again",' ',0,"ScoroExpQueRedoLsm");
  EndWindow;
end;

window ScoroExpQueDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Scoro API export queue - record",ScoroExpQueDClass,CGview,-);
  SetWRect(20,80,500,150);
  UseView(ScoroExpQueVc);
  h=100 ; h2=300; vs=20;
  ActiveFieldOnNew("StatusMessage");  
  EditField(h,v=6,80,"Register",ViewOnly,RecordName,false,0);
  EditField(h2,v,80,"Status",ViewOnly,Status,false,SetSClass);
  EditField(h,v+=vs,80,"Scoro module",ViewOnly,ScoroModName,false,0);
  EditField(h2,v,80,"Record nr.",ViewOnly,RecordIdentifier,false,0);
  EditField(h,v+=vs,50,"Attempts",ViewOnly,Attempts,false,0);
  EditField(h2,v,80,"Creat. date",ViewOnly,CreationDate,false,0);
  EditField(h2,v+=vs,80,"Creat. time",ViewOnly,CreationTime,false,0);
  EditField(h,v+=vs,350,"Comment",Normal,StatusMessage,false,0);
  EndWindow;
end;

window ScoroConvDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Scoro fields mapping",ScoroConvDClass,CGview,-);
  SetWRect(64,80,500,207);
  UseView(ScoroConvVc);
  //also see ScoroConvDClassSpecPasteName
  EditField(h=120,v=6,200,"Register",Normal,Register,false,SetSClass);
  EditField(h,v+=20,200,"Scoro code",Normal,ScoroCode,true,0);
  EditField(h,v+=20,200,"Books code",Normal,HansaRecID,true,SetSClass);
  EndWindow;
end;

window ScoroConvLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,l,v,vm,vs;
  WindowBegin("Scoro fields mappings",ScoroConvLClass,CGmlist,-);
  SpawnClass(ScoroConvDClass);
  SetWRect(65,80,750,300);
  Sizeable(200,100,0,0);
  UseView(ScoroConvVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Register",Register,false,RegScoroCode);
  RlColKey(250,100,"Scoro code",ScoroCode,false,ScoroCodeReg);
  RlColKey(500,300,"Books code",HansaRecID,false,HansaCodeReg);
  SearchField("Search");
  EndWindow;
end;

window ScoroApprTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Scoro records for approval",ScoroApprTClass,CGHbl,HBlRecType);
  SetBlid(ScoroApprBlock);
  SetWRect(20,80,700,230);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,-,10000);
  MatCol(1,50,"Register",0,Register,false,SetSClass);
  MatCol(1,150,"Scoro ID",0,ScoroRecID,false,0);
  MatCol(1,250,"Scoro code",0,ScoroCode,false,0);
  MatCol(1,350,"Scoro name",0,ScoroRecName,false,0);
  MatCol(1,450,"Std. Books code",0,HansaRecID,false,0);
  MatCol(1,550,"Std. Books name",0,HansaRecName,false,0);
  EndMatrix;
  SpecialMenu("Approve and pass to mapping table",' ',0,"ScoroApprOK"); 
  EndWindow;
end;

window ScoroMapTblDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Scoro record mapping",ScoroMapTblDClass,CGview,-);
  SetWRect(64,80,500,210);
  UseView(ScoroMapTblVc);
  EditField(h=120,v=6,200,"Register",Normal,Register,false,SetSClass);
  EditField(h,v+=20,200,"Scoro ID",Normal,ScoroRecID,true,0);
  EditField(h,v+=20,200,"Scoro code/nr",Normal,ScoroCode,true,0);
  EditField(h,v+=20,200,"Scoro name",Normal,ScoroRecName,true,0);
  EditField(h,v+=20,200,"Our code/nr",Normal,HansaRecID,true,0);
  EditField(h,v+=20,200,"Our name",Normal,HansaRecName,true,0);
  CheckBox(h,v+=20,0,"Approve",OKFlag);
  CheckBox(h,v+=20,0,"Updated",Updated);
  EndWindow;
end;

window ScoroMapTblLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,l,v,vm,vs;
  WindowBegin("Scoro record mappings",ScoroMapTblLClass,CGmlist,-);
  SpawnClass(ScoroMapTblDClass);
  SetWRect(65,80,750,300);
  Sizeable(200,100,0,0);
  UseView(ScoroMapTblVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Register",Register,false,RegScoroRecID);
  RlColKey(100,100,"Scoro ID",ScoroRecID,false,RegScoroRecID);
  RlColKey(180,180,"Scoro code/nr",ScoroCode,false,ScoroCode);
  RlCol(280,280,"Scoro name",ScoroRecName,false);
  RlColKey(380,380,"Our code/nr",HansaRecID,false,HansaRecID);
  RlColKey(480,480,"Our name",HansaRecName,false,HansaRecName);
  RlColKeyTL(-70,-70,"Upd.",M4Mark,Updated,false,OKFlagUpdated);
  RlColKeyTL(-30,-30,"OK",M4Mark,OKFlag,false,OKFlagUpdated);
  SearchField("Search");
  EndWindow;
end;

window ScoroExpDataVCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define send data to Scoro",ScoroExpDataVCLass,CGMnt,RcType);
  SetWRect(64,80,442,350);
  h = 150; v = 20; vs = 20;
  ButtonFrame(h-130,v,300,5,"Items");
  CheckBox(h-120,v+=6,0,"Export items",flags[0]);
  EditFieldTL(h,v+=vs,120,"Item",M4UStr,Normal,20,f1,false,INSClass);
  EditFieldTL(h,v+=vs,120,"Item type",M4UStr,Normal,20,f2,false,ITSClass);
  EditFieldTL(h,v+=vs,120,"Item classification",M4UStr,Normal,100,f3,false,DISClass);
  v = v + vs * 3;
  ButtonFrame(h-130,v,300,5,"Contacts");
  CheckBox(h-120,v+=6,0,"Export Contacts",flags[1]);
  EditFieldTL(h,v+=vs,120,"Contact",M4UStr,Normal,20,f6,false,AllCUSClass);
  EditFieldTL(h,v+=vs,120,"Contact category",M4UStr,Normal,20,f7,false,CCatSClass);
  EditFieldTL(h,v+=vs,120,"Classification",M4UStr,Normal,100,f8,false,CClassSClass);
  EndWindow;
end;

//artiklid lahetusaadressidele
window DelAddrItemRCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define ordered items to delivery addresses",DelAddrItemRCLass,CGRcW,RcType);
  SetWRect(20,80,430,150);
  h = 150; vs = 20; v = 6;
  PeriodField(h,v+=vs,"Period");
  EditFieldTL(h,v+=vs,150,"Customer code",M4UStr,Normal,50,f1,false,CUSClass);
  EditFieldTL(h,v+=vs,150,"Item code",M4UStr,Normal,11,f2,false,INSClass);
  EndWindow;
end;

//earvete erinouded
window EInvObjTypeTCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Electronic invoice object types",EInvObjTypeTCLass,CGHbl,HBlRecType);
  SetBlid(EInvObjTypeBlock);
  SetWRect(20,80,400,230);
  Sizeable(-1,-1,0,0);
  MatrixBegin(5,27,-21,-20,-,2);
  MatColTL(1,24,"E-inv field",0,M4StrSet,Normal,680,EInvElem,false,StrSetSClass);
  MatCol(1,200,"Inv. obj. type",0,IVObjType,false,OTSClass);
  EndMatrix;
  EndWindow;
end;

window MedCOSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Paste contract number",MedCOSClass,CGother,HBlRecType);
  SetWRect(240,80,700,348);
  StringList(9,9,-19,-19);
  EndWindow;
end;

//inf3
window INF3EClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify INF3 export",INF3EClass,CGEcW,RcType);
  SetWRect(140,80,509,200);
  vs = 20;
  PeriodField(h=120,v=6,"Period");
  EndWindow;
end;

window INF3RClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Specify INF3 Report",INF3RClass,CGRcW,RcType); 
  SetWRect(20,80,400,150);
  v= 6; vs = 20;
  PeriodField(h=100,v,"Period");
  //EditFieldTL(h,v+=vs ,150,"Maksja",M4UStr,Normal,50,f1,false,CUSClass);
  EditFieldTL(h,v+=vs ,150,"Trained Person",M4UStr,Normal,50,f1,false,CUSClass);
  ButtonFrame(h,v+=vs*2,123,2,"Function");
  RadioButton(h,v,0,0,"Overview",ArtMode);
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  EndWindow;
end;

window INF3ObjTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("INF3 Setting",INF3ObjTClass,CGsbl,-);
  SetWRect(64,80,310,180);
  SetBlid(INF3ObjBlock);
  v = 10; vs = 20; h = 130;
  CheckBox(80,v,0,"Activate INF3 setting",INF3Active);
  EditField(h,v+=vs,80,"Type 1",Normal,Object1,false,ObjSClass);
  EditField(h,v+=vs,80,"Type 2",Normal,Object2,false,ObjSClass);
  EditField(h,v+=vs,80,"Type 3",Normal,Object3,false,ObjSClass);
  EndWindow;
end;

window BK_INF3IPDCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v;
  WindowBegin("INF3 Payment",BK_INF3IPDCLass,CGview,-);
  SetWRect(64,80,789,170); 
  UseView(BK_INF3IPVc);
  
  EditField(h=160,v=6,100,"Payment nr. ",ViewOnly,IPSerNr,true,0)
  EditField(h2=360,v,80,"Payment Date ",ViewOnly,TransDate,true,0);
  EditField(h,v+=20,100,"Register",ViewOnly,RecType,true,0);
  EditField(h2,v,20,"Row nr.",ViewOnly,IProw,true,0);

  EditField(h,v+=20,100,"Trained Person",Normal,CustCode,true,CUSClass);
  EditField(h2,v,100,"   Payer",Normal,MaksCustCode,true,CUSClass);
  EditField(h,v+=20,100,"Invoice Sum ",ViewOnly,InvSum,true,0);
  EditField(h2,v,100,"Invoice nr.",ViewOnly,IVSerNr,true,IVSClass);

  EditField(h,v+=20,100,"Total Paid ",ViewOnly,RecSum,true,0);
  
  EditField(h,v+=26,100,"Study Sum, Type 1",Normal,Sum1,true,0);
  EditField(h,v+=20,100,"Study Sum, Type 2",Normal,Sum2,true,0);
  EditField(h,v+=20,100,"Study Sum, Type 3",Normal,Sum3,true,0);
  EndWindow;
end; 
 
//inf3
window BK_INF3IPLCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer") 
begin
  real h,v;

  WindowBegin("INF3 Payments",BK_INF3IPLCLass,CGmlist,-); 
  SetWRect(20,80,800,355);
  SpawnClass(BK_INF3IPDCLass);
  Sizeable(-1,-1,0,0);
  UseView(BK_INF3IPVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,"Nr.",IPSerNr,false,IPSerNr);
  RlColKey(90,90,"Date",TransDate,false,TransDate);
  RlColKey(160,160,"Payer",MaksCustCode,false,MaksCustCode);
  RlCol(260,260,"Trained Person",CustCode,false);
  RlCol(-380,-380,"Rec.Type",RecType,false);
  RlCol(-300,-300,"Type 1",Sum1,true);
  RlCol(-200,-200,"Type 2",Sum2,true);
  RlCol(-100,-100,"Type 3",Sum3,true);
  SearchField("Search");
  EndWindow;
end;

window BK_INF3IVDCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v;
  WindowBegin("INF3 Invoice",BK_INF3IVDCLass,CGview,-);
  SetWRect(64,80,789,170); 
  UseView(BK_INF3IVVc);
  EditField(h=160,v=6,100,"Invoice nr. ",ViewOnly,SerNr,true,0)
  EditField(h2=360,v,80,"Invoice Date ",ViewOnly,TransDate,true,0);
  
  EditField(h,v+=20,100,"Trained Person",Normal,CustCode,true,CUSClass);
  EditField(300,v,220,"",Normal,CustName,false,0);
  EditField(560,v,-20,"ID ",Normal,KoolRegNr1,false,0);
  EditField(h,v+=20,100,"   Payer",Normal,MaksCustCode,true,CUSClass);
  EditField(300,v,220,"",Normal,MaksName,false,0);
  EditField(560,v,-20,"ID ",Normal,MaksRegNr1,false,0);

  EditField(h,v+=20,100,"Total Sum ",ViewOnly,Sum4,true,0);
  EditField(h,v+=26,100,"Study Sum, Type 1",Normal,Liik1,true,0);
  EditField(h,v+=20,100,"Study Sum, Type 2",Normal,Liik2,true,0);
  EditField(h,v+=20,100,"Study Sum, Type 3",Normal,Liik3,true,0);
  EndWindow;
end; 

window BK_INF3IVLCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer") 
begin
  real h,v;

  WindowBegin("INF3 Invoices",BK_INF3IVLCLass,CGmlist,-); 
  SetWRect(20,80,800,355);
  SpawnClass(BK_INF3IVDCLass);
  Sizeable(-1,-1,0,0);
  UseView(BK_INF3IVVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,"Nr.",SerNr,false,SerNr);
  RlCol(90,90,"Date",TransDate,false);
  RlColKey(160,160,"Trained Person",CustCode,false,CustCode);
  RlColKey(260,260,"Name",CustName,false,CustName);
  RlCol(-300,-300,"Type 1",Liik1,true);
  RlCol(-200,-200,"Type 2",Liik2,true);
  RlCol(-100,-100,"Type 3",Liik3,true);
  SearchField("Search");
  EndWindow;
end;

//attach failide eemaldamine
window DelCompAttachVCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define delete company attach files",DelCompAttachVCLass,CGMnt,RcType);
  SetWRect(20,80,430,200);
  h = 50; vs = 20;
  StaticText(h,v+=vs,"WARNING!",false);
  StaticText(h,v+=vs,"FILES ARE BEING REMOVED FROM SERVER FOREVER",false);
  StaticText(h,v+=vs,"THIS OPERATION CANNOT BE UNDONE",false);
  CheckBox(h,v+=16,0,"Actually remove (only simulating by default)",flags[0]);
  v = v + vs;
  StaticText(h,v+=vs,"Only one company per time!",false);
  StaticText(h,v+=vs,"Company 0 does nothing.",false);
  EditFieldTL(h+100,v+=vs,50,"Company nr.",M4Int,Normal,5,Comparison,false,Companies2SClass);
  v = v + vs;
  CheckBox(h,v+=vs,0,"Delete Attach2Vc files which have no RLinkVc",flags[1]);
  CheckBox(h,v+=vs,0,"Delete files from folder, if they are not in Attach2Vc register",flags[2]);
  v = v + 15;
  StaticText(h,v+=vs,"(slower operation)",false);
  EndWindow;
end;

//EKN koodi lisamine artiklile
window EKNToINVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define add EKN code to items",EKNToINVClass,CGMnt,RcType);
  SetWRect(20,80,430,300);
  h = 150; vs = 20;
  EditFieldTL(h,v+=vs,120,"Item",M4UStr,Normal,20,f1,false,INSClass);
  EditFieldTL(h,v+=vs,120,"Item group",M4UStr,Normal,20,f2,false,ITSClass);
  EditFieldTL(h,v+=vs,120,"Item classification",M4UStr,Normal,100,f3,false,DISClass);
  EditFieldTL(h,v+=vs,120,"Classification type",M4UStr,Normal,30,f4,false,CTypeSClass);
  EditFieldTL(h,v+=vs,120,"EKN code",M4UStr,Normal,100,f5,false,0);
  v = v + vs;
  CheckBox(h-50,v+=vs,0,"Overwrite existing EKN codes",flags[0]);
  v = v + vs * 3;
  EndWindow;
end;

//kulutused soidulehtedest
window WayListToExpVCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define create expenses from #Mileages#",WayListToExpVCLass,CGMnt,RcType);
  SetWRect(20,80,500,300);
  h = 150; vs = 20; v = 6;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs,100,"Person",M4UStr,Normal,10,f1,false,UserSClass);
  EndWindow;
end;

//valjamaksed kulutustest
window ExpToPPVCLass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Define create personnel payments",ExpToPPVCLass,CGMnt,RcType);
  SetWRect(20,80,400,300);
  h = 150; vs = 20; v = 6;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs,100,"Person",M4UStr,Normal,10,f1,false,UserSClass);
  EditFieldTL(h,v+=vs,100,"Pay. mode",M4UStr,Normal,10,f2,false,PMSClass);
  EditFieldTL(h,v+=vs,100,"Pay. date",M4Date,Normal,0,d1,false,PasteCurDate);
  v = v + vs;
  CheckBox(h-50,v+=vs,0,"One person per payment record",flags[0]);
  EndWindow;
end;