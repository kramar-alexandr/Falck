external procedure StripSpace(var string,string);
external function boolean ValidateIBAN(string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure NewLineExport();
external function string 255 AddStr(string,string,string);
external function string 255 ConvertXmlString(string,Boolean);
external procedure GetMonthText(string,Date,var string);

procedure ExportTheLevel(Integer level)
begin
  string 255 tstr;
  Integer i;
  
  tstr = "";
  for (i=0;i<level;i=i+1) begin
    tstr = tstr & "  ";
  end;
  ExportPadString(tstr,len(tstr)," ",false);
  return;
end;

procedure ExportPlainXml(string value,Integer level)
begin
  ExportTheLevel(level);
  ExportPadString(value,BytesInString(value)," ",false);
  NewLineExport;
  return;
end;

procedure ExportTagXml(string tag,string pvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure ExportAttributeTagXml(string tag,string pvalue,string attr,string attrvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  if (nonblank(attr)) then begin
    ExportPadString(" ",1," ",false);
    ExportPadString(attr,len(attr)," ",false);
    ExportPadString("=""",2," ",false);
    ExportPadString(attrvalue,BytesInString(attrvalue)," ",false);
    ExportPadString("""",1," ",false);
  end;
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure AddToPerSupplierArray(Integer ExportSuppInvNr,row PaymPayrollVc PPrw,string emplcode,string bankacc,string curcode,string pmcode,date transdate,LongInt DocSerNr,
                                Array string apremplcode,Array string aprbankacc,
                                Array string aprreccur,Array val aprnetoval,Array string aprpmcode,Array date aprdate,Array LongInt aprfirstser,var Integer acnt)
begin
  Integer i;
  record CalcPayrollVc CPr;

  CPr.SerNr = PPrw.CalcSerNr;
  ReadFirstMain(CPr,1,true);
  for (i=0;i<acnt;i=i+1) begin
    if (apremplcode[i]==emplcode) and (aprbankacc[i]==bankacc) then begin//and (apmcode[i]==pmcode)
      aprnetoval[i] = aprnetoval[i] + PPrw.NetoSum;
      goto LAddToPerSupplierArray;
    end;
  end;
  apremplcode[acnt] = emplcode;
  aprbankacc[acnt] = bankacc;
  aprpmcode[acnt] = pmcode;
  aprreccur[acnt] = curcode;
  aprnetoval[acnt] = PPrw.NetoSum;
  aprfirstser[acnt] = DocSerNr;
  acnt = acnt + 1;
LAddToPerSupplierArray:;
  return;
end;

global
procedure BankExpEstoniaSEPA_Domestic_GroupFooter_PaymPayroll()
begin
  string 255 tstr;

  ExportPlainXml("</CstmrCdtTrfInitn>",0);
  ExportPlainXml("</Document>",0);
  return;
end;

procedure BankExpEstoniaSEPA_Domestic_Header(record RcVc RepSpec,date PaymDate,string PMCode,string curcode,record BankFileBlock bfr,val CtrlSum,Integer NbOfTxs)
begin
  string 255 tstr;
  LongInt rowsernr;
  record CYBlock CYb;
  record BankVc Bankr;
  row PMBlock PMrw;
  
  BlockLoad(CYb);
  rowsernr = bfr.RowSerNr;
  if (rowsernr<=0) or (rowsernr>999999) then begin
    rowsernr = 1;
  end;
  ExportPlainXml("<PmtInf>",1);

  ExportTagXml("PmtInfId",rowsernr,2);
  ExportTagXml("PmtMtd","TRF",2);
  ExportTagXml("BtchBookg","false",2);
  ExportTagXml("NbOfTxs",NbOfTxs,2);
  ExportTagXml("CtrlSum",ValToString(CtrlSum,M4UVal,"",".",0),2);
  ExportPlainXml("<PmtTpInf>",2);

  ExportPlainXml("<SvcLvl>",3);
  ExportTagXml("Cd","SEPA",4);
  ExportPlainXml("</SvcLvl>",3);
  
  ExportPlainXml("<CtgyPurp>",3);
//  ExportTagXml("Cd","SALA",4);
  ExportTagXml("Cd","SUPP",4);
  ExportPlainXml("</CtgyPurp>",3);

  ExportPlainXml("</PmtTpInf>",2);

  if (RepSpec.flags[0]==1) then begin
    if (PaymDate>CurrentDate) then begin
      ExportTagXml("ReqdExctnDt",DateToString(PaymDate,"YYYY-MM-DD"),2);
    end else begin
      ExportTagXml("ReqdExctnDt",DateToString(CurrentDate,"YYYY-MM-DD"),2);
    end;
  end else begin
    ExportTagXml("ReqdExctnDt",DateToString(CurrentDate,"YYYY-MM-DD"),2);
  end;

  ExportPlainXml("<Dbtr>",2);
  ExportTagXml("Nm",ConvertXmlString(Left(CYb.CompName,70),false),3);
  if(nonblank(CYb.Addr0) and nonblank(CYb.Addr1)) then begin
    ExportPlainXml("<PstlAdr>",3);
    ExportTagXml("Ctry",left(CYb.Bank2,2),4);
    ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr0,false),4);
    ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr1,false),4);
    ExportPlainXml("</PstlAdr>",3);
  end;
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",5);
  GetPMRow(PMCode,PMrw);
  Bankr.Code = PMrw.BankCode;
  ReadFirstMain(Bankr,1,true);
  if(nonblank(PMrw.SortCode)) then begin
    ExportTagXml("Id",PMrw.SortCode,6);
  end else begin
    if(nonblank(Bankr.BankIDCode)) then begin
      ExportTagXml("Id",Bankr.BankIDCode,6);
    end else begin
      ExportTagXml("Id",PMrw.BankCode,6);
    end;
  end;
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","COID",7);
  ExportPlainXml("</SchmeNm>",6);
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);  
  ExportPlainXml("</Dbtr>",2);
  
  ExportPlainXml("<DbtrAcct>",2);
  ExportPlainXml("<Id>",3);
  if (nonblank(PMrw.BankNr)) then begin
    tstr = PMrw.BankNr;
  end else begin
    if (nonblank(Bankr.Nr2)) then begin
      tstr = Bankr.Nr2;
    end else begin
      tstr = CYb.Bank2;
    end;
  end;
  StripSpace(tstr,tstr);
  if (ValidateIBAN(tstr)) then begin
    ExportTagXml("IBAN",tstr,4);
  end else begin
//    ExportTagXml("BBAN",tstr,4);
  end;
  ExportPlainXml("</Id>",3);    
  ExportTagXml("Ccy",curcode,3);  
  ExportPlainXml("</DbtrAcct>",2);

  ExportPlainXml("<DbtrAgt>",2);
  ExportPlainXml("<FinInstnId>",3);
  ExportTagXml("BIC",Bankr.SWIFT,4);  
  ExportPlainXml("</FinInstnId>",3);
  ExportPlainXml("</DbtrAgt>",2);

  if (RepSpec.flags[4]==2) then begin
    ExportTagXml("ChrgBr","SLEV",2);  
  end;
  bfr.RowSerNr = rowsernr + 1;
  return;
end;

procedure BankExpEstoniaSEPA_Domestic_Footer()
begin
  ExportPlainXml("</PmtInf>",1);
  return;
end;

global
updating procedure BankExpEstoniaSEPA_Domestic_GroupHeader_PaymPayroll(record RcVc RepSpec,var record BankFileBlock bfr,string curcode)
begin
  string 255 tstr,refstr;
  LongInt appsernr;
  record CYBlock CYb;
  record PaymPayrollVc PPr;
  row PaymPayrollVc PPrw;
  record EmplVc Emplr;
  record ContractVc Contrr;
  Boolean found,testf;
  Integer keys;
  string 255 ckey;
  LongInt afr,ato;
  Integer i,rwcnt;
  Integer NbOfTxs;
  string 255 bankacc;
  Array string 255 apremplcode;
  Array string 255 aprbankacc;
  Array string 255 aprreccur;
  Array date aprdate;
  Array val aprnetoval;
  Array string 10 aprpmcode;
  Array LongInt aprfirstser;
  Integer prevacnt,acnt;
  string 255 timestamp,emplcode,name;
  time curtime;
  string 255 codepage;
  val CtrlSum;
  Boolean storedf;
  Date paymdate;

  codepage = StringSetFromString(89,RepSpec.f12);
  if (blank(codepage)) then begin
    codepage = "UTF-8";
  end;
  NbOfTxs = 0;
  CtrlSum = 0;
  BlockLoad(CYb);
  appsernr = bfr.LastSerNr;
  if (appsernr<=0) or (appsernr>999999) then begin
    appsernr = 1;
  end;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  found = true;
  if (RepSpec.OnlyUnprntd==0) then begin
    PPr.SentFlag = 0;
    PPr.SerNr = afr;
    keys = 2;
    ckey = "SentFlag";
  end else begin
    PPr.SerNr = afr;
    keys = 1;
    ckey = "SerNr";
  end;
  while (LoopKey(ckey,PPr,keys,found)) begin
    if (RepSpec.OnlyUnprntd==0) then begin
      if (PPr.SentFlag==1) then begin
        found = false;
      end;
    end;
    if (ato<>-1) then begin
      if (PPr.SerNr>ato) then begin
        found = false;
      end;
    end;
    testf = true;
    if (PPr.Invalid!=0) then begin
      testf = false;
    end;
    if (PPr.OKFlag==0) then begin
      testf = false;
    end;
    if (DateInRange(PPr.PaymDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;
    if (PPr.NetoTotal==0) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.FirstAcc)) then begin
      if (PPr.PMCode != RepSpec.FirstAcc) then begin
        testf = false;
      end;
    end;
    if (found==false) then begin
      testf = false;
    end;
    if (testf==true) then begin
      paymdate = PPr.PaymDate;
      rwcnt = MatRowCnt(PPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PPr,i,PPrw);
        Contrr.SerNr = PPrw.ContrSerNr;
        ReadFirstMain(Contrr,1,true);
        emplcode = Contrr.EmplCode;
        Emplr.Code = Contrr.EmplCode;
        ReadFirstMain(Emplr,1,true);
        if nonblank(Emplr.RecipientName) and nonblank(Emplr.RecipientBankAcc) then begin
          bankacc = Emplr.RecipientBankAcc;
        end else begin
          bankacc = Emplr.BankAccount;
        end;
        prevacnt = acnt;
        AddToPerSupplierArray(1,PPrw,emplcode,bankacc,curcode,PPr.PMCode,PPr.PaymDate,PPr.SerNr,apremplcode,aprbankacc,aprreccur,aprnetoval,aprpmcode,aprdate,aprfirstser,acnt);
        if (prevacnt!=acnt) then begin              
          NbOfTxs = NbOfTxs + 1;
        end;
        CtrlSum = CtrlSum + PPrw.NetoSum;
      end;
      PPr.SentFlag = 1;
      storedf = RecordStore(PPr,true);
    end;
  end;
  ExportPlainXml("<?xml version=""1.0"" encoding=""" & codepage & """?>",0); 

  tstr = "<Document xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"">";
  ExportPlainXml(tstr,0); 

  ExportPlainXml("<CstmrCdtTrfInitn>",0);

  ExportPlainXml("<GrpHdr>",1);
  curtime = CurrentTime;
  timestamp = DateToString(CurrentDate,"YYMMDD") & GetHour(curtime) & GetMinute(curtime);
  ExportTagXml("MsgId",appsernr & "-" & timestamp,2);
  tstr = DateToString(CurrentDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  tstr = tstr & CurrentTime;
  ExportTagXml("CreDtTm",tstr,2);
  ExportTagXml("NbOfTxs",NbOfTxs,2);
  ExportTagXml("CtrlSum",ValToString(CtrlSum,M4UVal,"",".",0),2);
  ExportPlainXml("<InitgPty>",2);
  ExportTagXml("Nm",ConvertXmlString(Left(CYb.CompName,70),false),3);
  if(nonblank(CYb.Addr0) and nonblank(CYb.Addr1) and nonblank(CYb.CountryCode)) then begin
    ExportPlainXml("<PstlAdr>",3);
    ExportTagXml("Ctry",CYb.CountryCode,4);
    ExportTagXml("AdrLine",ConvertXmlString((CYb.Addr0 & "," & CYb.Addr1),false),4);
    ExportPlainXml("</PstlAdr>",3);
  end;
  ExportPlainXml("</InitgPty>",2);
  ExportPlainXml("</GrpHdr>",1);
  bfr.LastSerNr = appsernr + 1;

  BankExpEstoniaSEPA_Domestic_Header(RepSpec,paymdate,aprpmcode[0],curcode,bfr,CtrlSum,acnt);

  for (i=0;i<acnt;i=i+1) begin
    Emplr.Code = apremplcode[i];
    ReadFirstMain(Emplr,1,true);
    name = "";
    if nonblank(Emplr.RecipientName) and nonblank(Emplr.RecipientBankAcc) then begin
      name = Emplr.RecipientName;
    end else begin
      name = Emplr.Firstname & " " & Emplr.Surname;
    end;

    ExportPlainXml("<CdtTrfTxInf>",1);

    ExportPlainXml("<PmtId>",2);    
    ExportTagXml("InstrId",aprfirstser[i],3);  
    ExportTagXml("EndToEndId",aprfirstser[i] & "-1",3);  
    ExportPlainXml("</PmtId>",2);

    ExportPlainXml("<Amt>",2);
    ExportAttributeTagXml("InstdAmt",ValToString(aprnetoval[i],M4Val,"",".",0),"Ccy",aprreccur[i],3);
    ExportPlainXml("</Amt>",2);

    ExportPlainXml("<Cdtr>",2);
    ExportTagXml("Nm",ConvertXmlString(Left(name,70),false),3); 
    if (nonblank(Emplr.Addr1) or nonblank(Emplr.Addr2)) then begin
      ExportPlainXml("<PstlAdr>",3);
      ExportTagXml("Ctry",Left(aprbankacc[i],2),2);
      ExportTagXml("AdrLine",ConvertXmlString(Emplr.Addr1,false),4);  
      ExportTagXml("AdrLine",ConvertXmlString(Emplr.Addr2,false),4);  
      ExportPlainXml("</PstlAdr>",3);
    end;
    ExportPlainXml("</Cdtr>",2);

    ExportPlainXml("<CdtrAcct>",2);
    ExportPlainXml("<Id>",3);
    StripSpace(tstr,aprbankacc[i]);
    if (ValidateIBAN(tstr)) then begin
      ExportTagXml("IBAN",tstr,4);
    end else begin
      ExportPlainXml("<Othr>",4);
      ExportTagXml("Id",tstr,5);
      ExportPlainXml("</Othr>",4);
    end;
    ExportPlainXml("</Id>",3);
    ExportPlainXml("</CdtrAcct>",2);
      
    ExportPlainXml("<RmtInf>",2);
    
    if (blank(RepSpec.f2)) then begin
      GetMonthText("",aprdate[i],refstr);
      refstr = refstr & " " & USetStr(1500484);
    end else begin
      refstr = RepSpec.f2;
    end;
    ExportTagXml("Ustrd",refstr,3);

    ExportPlainXml("</RmtInf>",2);
      
    ExportPlainXml("</CdtTrfTxInf>",1);
  end;
  BankExpEstoniaSEPA_Domestic_Footer;
  return;
end;
