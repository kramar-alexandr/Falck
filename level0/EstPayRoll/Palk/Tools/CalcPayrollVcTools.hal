external updating procedure UpdateCPUnpaidVc(LongInt,string,string,longint,integer,string,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,boolean,string,LongInt,integer,var val);
external updating procedure CalcPaymTypeSumsAndTaxes(record PaymTypeVc,val,var val,var val,var val,var val,val,val,var val,var val,var val,var val,var val,var val,var val,LongInt,integer,string,string,date,integer,var val,var val,var val,date,date,LongInt,integer,integer,integer,integer);
external procedure CalculateTaxes(val,var val,var val,var val,var val,val,val,val,var val,var val,var val,var val,var val,var val,string,string,date,integer,var val);
external procedure IncTaxFreeMinToUse(LongInt,LongInt,date,string,val,val,var val,var val,var val,var val);
external function val DPDiscToUse(LongInt,LongInt,date,date,string,val,Boolean);
external updating procedure UpdateITFMUsedVc(LongInt,date,var val,var val,boolean,boolean);
external updating procedure UpdateDPDUsedVc(LongInt,date,date,var val,var val,boolean);
external function boolean GetRightPeriod(var date,var date,date,date);
external procedure MakeMinusSums(var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external function string 20 GetPWTPaymTypeCode(string);
external function string 20 GetWHTPaymTypeCode(string);
external function roundmode GetSalaryRoundMode(string);
external function val GetMinSocTax(date);
//not used external procedure GetAdvPaymSum(LongInt,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure SetMarkFlag(integer,var integer);
external updating procedure UpdateBailiffVc(LongInt,string,val,boolean);
external procedure GetFullMonth(date,var date,var date);
external function val GetBailiffSum(string,var val,array string,var array val,var integer);
external procedure GetBailiffData(LongInt,date,var val,var array string,var array val,var integer);
external function val GetPaidNetoSumForPeriod(LongInt,date,date);
external function val GetCPrNetoSum(record CalcPayrollVc,integer);

global
procedure DblCalcPayrollVc(string dblstr,string l,integer currepwn)
begin
  record CalcPayrollVc CPr;
  integer wn;

  if (nonblank(dblstr)) then begin
    CPr.SerNr = FirstInRange(dblstr,12);
    if (ReadFirstMain(CPr,1,true)) then begin
      wn = OpenWindow("CalcPayrollDClass",1,0,"","",CPr);
    end;
  end;
  return;
end;

global
function boolean GetNextCalcPayrollSerNr(date calcdate,var LongInt cpsernr)
begin
  boolean res;
  record TRVc TRr;
  LongInt tmp,tmp1,nrofCPrs;
  
  cpsernr=-1;
  nrofCPrs = CountRecords("CalcPayrollVc");
  if (nrofCPrs==0) then begin
    TRr.IntYc=SalaryCalcYc;
    TRr.Number = 99999999999;
    if (ReadLastMain(TRr,2,false)) then begin
      tmp=TRr.Number+1;
    end;
    TRr.IntYc=SalaryPayment2Yc;
    TRr.Number = 99999999999;
    if (ReadLastMain(TRr,2,false)) then begin
      tmp1=TRr.Number+1;
    end;
    if (tmp<tmp1) then begin
      tmp=tmp1;
    end;
    cpsernr = NextSerNr("CalcPayrollVc",calcdate,-1,false,"");
    if (cpsernr<tmp) then begin
      cpsernr=tmp;
    end;
  end else begin
    cpsernr = NextSerNr("CalcPayrollVc",calcdate,-1,false,"");
  end;
  GetNextCalcPayrollSerNr = res;
  return;
end;

global
function Boolean SerNrTestCalcPayrollVc(LongInt sernr,Date tdp,var Boolean gentrans)
begin
  Boolean res;
  record CalcPayrollSerBlock CPSerr;
  row CalcPayrollSerBlock CPSerrw;
  Integer i,rwcnt;

  gentrans = true;
  if (sernr==-1) then begin
    res = false;
    goto L1;
  end;
  BlockLoad(CPSerr);
  rwcnt = MatRowCnt(CPSerr);
  if (rwcnt==0) then begin
    res = true;
    goto L1;
  end;
  for (i=0; i<rwcnt ;i=i+1) begin
    MatRowGet(CPSerr,i,CPSerrw);
    if ((sernr<CPSerrw.TSerStart) or (sernr>CPSerrw.TSerEnd)) then begin
      goto L2;
    end;  
    if (nonblankdate(CPSerrw.StartDate)) then begin
      if (tdp<CPSerrw.StartDate) then begin goto L2; end;
    end;  
    if (nonblankdate(CPSerrw.EndDate)) then begin
      if (tdp>CPSerrw.EndDate) then begin goto L2; end;
    end;  
    if (CPSerrw.DonotGenTrans==1) then begin gentrans = false; end;
    res = true;
    goto L1;
L2:;
  end;
L1:;
  SerNrTestCalcPayrollVc = res;
  return;
end;

global
updating procedure RemoveRowCPAbsVc(LongInt calcsernr,integer calcrownr)
begin
  record CPAbsVc CPAbsr;
  record AbsenceVc Absr;
  record AbsenceVc oldAbsr;
  boolean TrHs;

  ResetLoop(CPAbsr);
  TrHs = true;
  CPAbsr.CalcSerNr=calcsernr;
  CPAbsr.CalcRowNr=calcrownr;
  while (LoopMain(CPAbsr,2,TrHs)) begin
    if (CPAbsr.CalcSerNr!=calcsernr) then begin
      TrHs=false;
    end;
    if (CPAbsr.CalcRowNr!=calcrownr) then begin
      TrHs=false;
    end;
    if (TrHs) then begin
      Absr.SerNr=CPAbsr.AbsSerNr;
      if (ReadFirstMain(Absr,1,true)) then begin
        RecordCopy(oldAbsr,Absr);    
        Absr.CalcSerNr=blankval;
        RecordUpdate(oldAbsr,Absr,false);
      end;  
      RecordDelete(CPAbsr);
      StepBack(CPAbsr);
    end;
  end;
  return;
end;

global
updating procedure RemoveCPAbsVc(record CalcPayrollVc CPr)
begin
  row CalcPayrollVc CPrw;
  record CPAbsVc CPAbsr;
  record AbsenceVc Absr;
  record AbsenceVc oldAbsr;
  boolean TrHs;
  integer rwcnt,i;

  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    RemoveRowCPAbsVc(CPr.SerNr,i);
  end;
  return;
end;

global
updating procedure InsertCPAbsVc(LongInt calcsernr,integer calcrownr,LongInt abssernr)
begin
  record CPAbsVc CPAbsr;

  RecordNew(CPAbsr);
  CPAbsr.CalcSerNr=calcsernr;
  CPAbsr.CalcRowNr=calcrownr;
  CPAbsr.AbsSerNr=abssernr;
  if (RecordInsert(CPAbsr,false)) then begin end;
  return;
end;

global
function boolean IsAbsenceRow(LongInt calcsernr,integer calcrownr)
begin
  record CPAbsVc CPAbsr;
  boolean res;

  res=false;
  CPAbsr.CalcSerNr=calcsernr;
  CPAbsr.CalcRowNr=calcrownr;
  if (ReadFirstMain(CPAbsr,2,true)) then begin
    res=true;
  end;
  IsAbsenceRow = res;
  return;
end;

global
function boolean IsOpenTransRow(LongInt calcsernr,integer calcrownr)
begin
  record CPOTVc CPOTr;
  boolean res;

  res=false;
  CPOTr.CalcSerNr=calcsernr;
  CPOTr.CalcRowNr=calcrownr;
  if (ReadFirstMain(CPOTr,2,true)) then begin
    res=true;
  end;
  IsOpenTransRow=res;
  return;
end;

global
function integer GetPaymTypeFlag(string paymtypecode)
begin
  integer res;
  record PaymTypeVc PTr;
  
  res=0;
  PTr.Code=paymtypecode;
  if (ReadFirstMain(PTr,1,true)) then begin
    if (PTr.PaymTypeFlag==1) then begin //Kinnipidamine (bruto)
      res=1;  
    end;
    if (PTr.PaymTypeFlag==2) then begin //Kinnipidamine (neto)
      res=2;
    end;
    if (PTr.PaymTypeFlag==3) then begin //KohtutŠitur (kinnip.neto)
      res=3;
    end;
    if (PTr.PaymTypeFlag==0) then begin //Tasu
      res=7;  
    end;
  end;
  GetPaymTypeFlag = res;
  return;
end;

global
updating procedure RemoveRowCPOTVc(LongInt calcsernr,integer calcrownr)
begin
  record CPOTVc CPOTr;
  record OpenTransVc OTr;
  record OpenTransVc oldOTr;
  row OpenTransVc OTrw;
  boolean TrHs;

  ResetLoop(CPOTr);
  TrHs = true;
  CPOTr.CalcSerNr=calcsernr;
  CPOTr.CalcRowNr=calcrownr;
  while (LoopMain(CPOTr,2,TrHs)) begin
    if (CPOTr.CalcSerNr!=calcsernr) then begin
      TrHs=false;
    end;
    if (CPOTr.CalcRowNr!=calcrownr) then begin
      TrHs=false;
    end;
    if (TrHs) then begin
      OTr.SerNr=CPOTr.OTSerNr;
      if (ReadFirstMain(OTr,1,true)) then begin
        RecordCopy(oldOTr,OTr);    
        MatRowGet(OTr,CPOTr.OTRowNr,OTrw);
        OTrw.CalcSerNr=blankval;
        MatRowPut(OTr,CPOTr.OTRowNr,OTrw);
         OTr.CalcFlag=0;
         SetMarkFlag(OTr.CalcFlag,OTr.CalcMark);
         RecordUpdate(oldOTr,OTr,false);
      end;  
      RecordDelete(CPOTr);
      StepBack(CPOTr);
    end;
  end;
  return;
end;

global
updating procedure RemoveCPOTVc(record CalcPayrollVc CPr)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i;
  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PosCode) then begin
      RemoveRowCPOTVc(CPr.SerNr,i);
    end;
  end;
  return;
end;

global
updating procedure InsertCPOTVc(LongInt calcsernr,integer calcrownr,LongInt otsernr,integer otrownr)
begin
  record CPOTVc CPOTr;

  RecordNew(CPOTr);
  CPOTr.CalcSerNr=calcsernr;
  CPOTr.CalcRowNr=calcrownr;
  CPOTr.OTSerNr=otsernr;
  CPOTr.OTRowNr=otrownr;
  if (RecordInsert(CPOTr,false)) then begin end;
end;

global
updating procedure RemoveRowCPWHVc(LongInt calcsernr,integer calcrownr)
begin
  record CPWHVc CPWHr;
  record WorkedHoursVc WHr;
  record WorkedHoursVc oldWHr;
  row WorkedHoursVc WHrw;
  boolean TrHs;

  ResetLoop(CPWHr);
  TrHs = true;
  CPWHr.CalcSerNr=calcsernr;
  CPWHr.CalcRowNr=calcrownr;
  while (LoopMain(CPWHr,2,TrHs)) begin
    if (CPWHr.CalcSerNr!=calcsernr) then begin
      TrHs=false;
    end;
    if (CPWHr.CalcRowNr!=calcrownr) then begin
      TrHs=false;
    end;
    if (TrHs) then begin
      WHr.SerNr=CPWHr.WHSerNr;
      if (ReadFirstMain(WHr,1,true)) then begin
        RecordCopy(oldWHr,WHr);    
        MatRowGet(WHr,CPWHr.WHRowNr,WHrw);
        WHrw.CalcSerNr=blankval;
        MatRowPut(WHr,CPWHr.WHRowNr,WHrw);
        RecordUpdate(oldWHr,WHr,false);
      end;  
      RecordDelete(CPWHr);
      StepBack(CPWHr);
    end;
  end;
  return;
end;

global
updating procedure RemoveCPWHVc(record CalcPayrollVc CPr)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i;
  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PosCode) then begin
      RemoveRowCPWHVc(CPr.SerNr,i);
    end;
  end;
  return;
end;

global
updating procedure InsertCPWHVc(LongInt calcsernr,integer calcrownr,LongInt whsernr,integer whrownr)
begin
  record CPWHVc CPWHr;

  RecordNew(CPWHr);
  CPWHr.CalcSerNr=calcsernr;
  CPWHr.CalcRowNr=calcrownr;
  CPWHr.WHSerNr=whsernr;
  CPWHr.WHRowNr=whrownr;
  if (RecordInsert(CPWHr,false)) then begin end;
  return;
end;

global
updating procedure RemoveRowCPPWVc(LongInt calcsernr,integer calcrownr)
begin
  record CPPWVc CPPWr;
  record PieceWorkVc PWr;
  record PieceWorkVc oldPWr;
  row PieceWorkVc PWrw;
  boolean TrHs;

  ResetLoop(CPPWr);
  TrHs = true;
  CPPWr.CalcSerNr=calcsernr;
  CPPWr.CalcRowNr=calcrownr;
  while (LoopMain(CPPWr,2,TrHs)) begin
    if (CPPWr.CalcSerNr!=calcsernr) then begin
      TrHs=false;
    end;
    if (CPPWr.CalcRowNr!=calcrownr) then begin
      TrHs=false;
    end;
    if (TrHs) then begin
      PWr.SerNr=CPPWr.PWSerNr;
      if (ReadFirstMain(PWr,1,true)) then begin
        RecordCopy(oldPWr,PWr);    
        MatRowGet(PWr,CPPWr.PWRowNr,PWrw);
        PWrw.CalcSerNr=blankval;
        MatRowPut(PWr,CPPWr.PWRowNr,PWrw);
        RecordUpdate(oldPWr,PWr,false);
      end;  
      RecordDelete(CPPWr);
      StepBack(CPPWr);
    end;
  end;
  return;
end;

global
updating procedure RemoveCPPWVc(record CalcPayrollVc CPr)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i;
  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PosCode) then begin
      RemoveRowCPPWVc(CPr.SerNr,i);
    end;
  end;
  return;
end;

global
updating procedure InsertCPPWVc(LongInt calcsernr,integer calcrownr,LongInt pwsernr,integer pwrownr)
begin
  record CPPWVc CPPWr;

  RecordNew(CPPWr);
  CPPWr.CalcSerNr=calcsernr;
  CPPWr.CalcRowNr=calcrownr;
  CPPWr.PWSerNr=pwsernr;
  CPPWr.PWRowNr=pwrownr;
  if (RecordInsert(CPPWr,false)) then begin end;
  return;
end;

global
function boolean CPUnpaidSerNr(var LongInt cpunsernr)
begin
  boolean res;
  record CPUnpaidVc CPUnr;
  
  CPUnr.SerNr = 99999999999;
  if (ReadLastMain(CPUnr,1,false)) then begin
    cpunsernr = CPUnr.SerNr + 1;
  end else begin
    cpunsernr = 1;
  end;
  CPUnpaidSerNr = res;
  return;
end;

global
function boolean ITFMUsedSerNr(var LongInt itfmussernr)
begin
  boolean res;
  record ITFMUsedVc ITFMUsedr;
  
  ITFMUsedr.SerNr = 99999999999;
  if (ReadLastMain(ITFMUsedr,1,false)) then begin
    itfmussernr = ITFMUsedr.SerNr + 1;
  end else begin
    itfmussernr = 1;
  end;
  ITFMUsedSerNr = res;
  return;
end;

global
function boolean DPDUsedSerNr(var LongInt dpdussernr)
begin
  boolean res;
  record DPDUsedVc DPDUsedr;
  
  DPDUsedr.SerNr = 999999999;
  if (ReadLastMain(DPDUsedr,1,false)) then begin
    dpdussernr = DPDUsedr.SerNr + 1;
  end else begin
    dpdussernr = 1;
  end;
  DPDUsedSerNr = res;
  return;
end;

global
function boolean SocTaxMinCheck(string emplcode,date paymdate,date calcdate,var val soctax)
begin
  record CalcPayrollVc CPr;
  record ContractVc Contrr;
  val minsoctax,cpsoctaxtot,advpsoctaxtot,bval;
  boolean res,TrHs,TrHs1;
  date sd,ed;
  
  res=false;
  minsoctax=GetMinSocTax(calcdate);//ts - 2018/01, orig paymdate
  if (soctax<minsoctax) then begin
    TrHs=true;
    Contrr.EmplCode=emplcode;
    while (LoopKey("EmplCode",Contrr,1,TrHs)) begin
      if (Contrr.EmplCode!=emplcode) then begin
        TrHs=false;
      end;
      if (TrHs) then begin
        sd=calcdate;
        sd.day=1;
        ed=calcdate;
        ed.day=DaysInMonth(GetYear(ed),GetMonth(ed));
        TrHs1=true;
        ResetLoop(CPr);
        CPr.OKFlag=1;
        CPr.ContrSerNr=Contrr.SerNr;
        CPr.CalcDate=sd;
        while (LoopKey("OKFlag",CPr,3,TrHs1)) begin
          if (CPr.OKFlag!=1) then begin
            TrHs1=false;
          end;
          if (CPr.ContrSerNr!=Contrr.SerNr) then begin
            TrHs1=false;
          end;         
          if (CPr.CalcDate>ed) then begin
            TrHs1=false;
          end;         
          if (TrHs1) then begin
            if (CPr.Invalid==0) then begin
              cpsoctaxtot=cpsoctaxtot+CPr.SocTaxTotal;
            end;
          end;
        end;
      end;
    end;
//NB    GetAdvPaymSum(CPr.ContrSerNr,bval,bval,bval,bval,bval,bval,advpsoctaxtot,bval);
    if ((cpsoctaxtot+advpsoctaxtot+soctax)<minsoctax) then begin
      soctax=(minsoctax-(cpsoctaxtot+advpsoctaxtot));
      res=true;
    end;
  end;
  SocTaxMinCheck=res;
  return;
end;

global
function boolean EmplSocTaxMin(string emplcode)
begin  
  record EmplVc Emplr;
  boolean res;
  
  Emplr.Code=emplcode;
  if (ReadFirstMain(Emplr,1,true)) then begin
    if (Emplr.SocTaxMinFlag!=0) then begin
      res=true;
    end; 
  end;
  EmplSocTaxMin=res;
  return;
end;

global
procedure CPrSocTaxCheck(longInt contrsernr,date paymdate,date calcdate,val brutotot,var val soctaxtot,var val newpercent,var boolean soctaxminflag,var boolean dispensflag)
begin  
  record ContractVc Contrr;
  
  Contrr.SerNr=contrsernr;
  if (ReadFirstMain(Contrr,1,true)) then begin
    if (Contrr.DisPensFlag!=0) then begin
      dispensflag=true;
    end;
    if (EmplSocTaxMin(Contrr.EmplCode)) then begin
      if (SocTaxMinCheck(Contrr.EmplCode,paymdate,calcdate,soctaxtot)) then begin
        soctaxminflag=true;
        newpercent=(soctaxtot*100/brutotot);
      end;
    end; 
  end;
  return;
end;

global
function val GetRowDPDisc(val rwsoctax,var val dpdtouse)
begin
  val res;
     
  res=0;
  if (dpdtouse<rwsoctax) then begin
    res=dpdtouse;
    dpdtouse=0;
  end else begin
    res=rwsoctax;
    dpdtouse=dpdtouse-rwsoctax;
  end;
  GetRowDPDisc=res;
  return;
end;

global
procedure CPrSumUp(var record CalcPayrollVc CPr)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i;
  val brutotot,netotot,addtaxsumtot,inctaxtot,inctaxfreemintot,unemplinstot,pensiontot,soctaxtot,emplunemplinstot,dpdisccurtot;
  val newpercent,soctaxtottmp,soctax,dpdtouse,dpdisc,tmpval;
  boolean soctaxminflag,dispensflag;
  
  newpercent=0; 
  soctaxminflag=false;
  dispensflag=false;
  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    netotot=netotot+CPrw.NetoSum;
    brutotot=brutotot+CPrw.BrutoSum;
    unemplinstot=unemplinstot+CPrw.UnemplInsSum;
    pensiontot=pensiontot+CPrw.PensionSum;
    inctaxtot=inctaxtot+CPrw.IncTaxSum;
    addtaxsumtot=addtaxsumtot+CPrw.AddTaxSum;
    inctaxfreemintot=inctaxfreemintot+CPrw.IncTaxFreeMinSum;
    soctaxtot=soctaxtot+CPrw.SocTaxSum;
    emplunemplinstot=emplunemplinstot+CPrw.EmplUnemplInsSum;
  end;
  soctaxtottmp=soctaxtot;
  CPrSocTaxCheck(CPr.ContrSerNr,CPr.PaymDate,CPr.CalcDate,brutotot,soctaxtottmp,newpercent,soctaxminflag,dispensflag); //minimaalne sotsmaksu summa & tššv›imetuspensionŠri soodustus
  if ((soctaxminflag) or (dispensflag)) then begin //soctax muutub
    soctaxtot=0;
    if ((dispensflag==false) and (brutotot==0)) then begin
      if (rwcnt>0) then begin
        MatRowGet(CPr,0,CPrw);
        CPrw.SocTaxSum=round(soctaxtottmp,GetSalaryRoundMode("2"));  
        soctaxtot=CPrw.SocTaxSum;
        MatRowPut(CPr,0,CPrw);
      end;  
    end else begin 
      dpdisccurtot=0;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CPr,i,CPrw);
        dpdisc=0;
        soctax=CPrw.SocTaxSum;
        if ((soctaxminflag) and (dispensflag==false)) then begin
          soctax=round((CPrw.BrutoSum*newpercent/100),GetSalaryRoundMode("2"));
        end;  
        if (dispensflag) then begin
          dpdtouse=DPDiscToUse(CPr.SerNr,CPr.ContrSerNr,CPr.PaymDate,CPr.CalcDate,"CalcPayrollVc",tmpval,true)-dpdisccurtot;
          if (soctax > 0) and (dpdtouse > 0) then begin//ts - 2018/01
            dpdisc=GetRowDPDisc(soctax,dpdtouse);
          end;//+
          CPrw.DPDiscSum=dpdisc;
          dpdisccurtot=dpdisccurtot+CPrw.DPDiscSum;
        end; 
        CPrw.SocTaxSum=soctax-dpdisc;  
        MatRowPut(CPr,i,CPrw);
        soctaxtot=soctaxtot+CPrw.SocTaxSum;
      end;
    end;
  end; 

  CPr.NetoTotal=netotot;
  CPr.BrutoTotal=brutotot;
  CPr.UnemplInsTotal=unemplinstot;
  CPr.PensionTotal=pensiontot;
  CPr.IncTaxTotal=inctaxtot;
  CPr.AddTaxSumTotal=addtaxsumtot;
  CPr.IncTaxFreeMinTotal=inctaxfreemintot;
  CPr.SocTaxTotal=soctaxtot;
  CPr.EmplUnemplInsTotal=emplunemplinstot;
  return;
end;

global
function val GetEmplTaxPercent(string emplcode,date paymdate,integer taxtype,val bruto,var string taxcode,var string taxname,var string idcode)
begin  
  record EmplVc Emplr;
  row EmplVc Emplrw;
  record TaxVc Taxr;
  row TaxVc Taxrw;
  integer rwcnt,rwcnt1,i,j;
  val res;

  res=0;
  taxcode="";
  taxname="";
  Emplr.Code=emplcode;
  if (ReadFirstMain(Emplr,1,true)) then begin
    idcode=Emplr.IDCode;
    rwcnt=MatRowCnt(Emplr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Emplr,i,Emplrw);
      if nonblank(Emplrw.TaxCode) then begin
        if ((DateInRange(paymdate,Emplrw.SDate,Emplrw.EDate))) then begin
          Taxr.Code=Emplrw.TaxCode;
          if (ReadFirstMain(Taxr,1,true)) then begin
            if (Taxr.TaxType==taxtype) then begin
              rwcnt1=MatRowCnt(Taxr);
              for (j=0;j<rwcnt1;j=j+1) begin
                MatRowGet(Taxr,j,Taxrw);
                if ((DateInRange(paymdate,Taxrw.SDate,Taxrw.EDate))) then begin
                  if ((bruto>=Taxrw.FromSum) and (bruto<=Taxrw.ToSum)) then begin
                    res=Taxrw.Percent;
                    taxcode=Taxr.Code;
                    taxname=Taxr.Name;
                    goto LGetEmplTaxPercent;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;  
LGetEmplTaxPercent:;
  GetEmplTaxPercent=res;
  return;
end;

global
function val GetCPrITNeto(record CalcPayrollVc CPr,integer cprwnr,var val emplneto,var array string bptcode,var array val bunpaid,var integer brwcnt)
begin  
  date sd,ed;
  val res,paiditneto;
  
  GetBailiffData(CPr.ContrSerNr,CPr.CalcDate,emplneto,bptcode,bunpaid,brwcnt);
  GetFullMonth(CPr.CalcDate,sd,ed);
  paiditneto = GetPaidNetoSumForPeriod(CPr.ContrSerNr,sd,ed); //vŠljamakstud tm-ga maksustatav neto
  emplneto = emplneto - paiditneto; //palju tšštajal on ›igus saada antud kuus
  res = GetCPrNetoSum(CPr,cprwnr) - emplneto; //palju saab KohtutŠiturile arvestada
  if (res<0) then begin res = 0; end;
  GetCPrITNeto = res;
  return;
end;

global
updating procedure PasteCPrTaxes(record CalcPayrollVc CPr,integer maintflag,integer pwflag,integer whflag,integer contrflag,integer itfm,var val previtfmin,Boolean Sumf)
begin  
  row CalcPayrollVc CPrw;
  record ContractVc Contrr;
  record PaymTypeVc PTr;
  val bruto,neto,calcbruto,addtaxsum,inctax,inctaxfreemin,unemplins,pension,soctax,emplunemplins,itfmintouse,amount,tariff,tmpval,emplneto,paiditneto,cpitneto;
  val totbruto,lastcalctax,fixedmin;
  integer rwcnt,i,brwcnt,paymtypeflag,inctaxfreeminflag;
  boolean otflag,absflag,updflag;
  array string 20 bptcode;
  array val bunpaid;

  updflag = true;
  itfmintouse=0;
  Contrr.SerNr = CPr.ContrSerNr;
  if (ReadFirstMain(Contrr,1,true)) then begin
    rwcnt=MatRowCnt(CPr);
    if (Sumf) then begin
      CPr.BrutoTotal = 0;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CPr,i,CPrw);
        PTr.Code=CPrw.PaymTypeCode;
        if (ReadFirstMain(PTr,1,true)) then begin end;
        if (PTr.IncomeTaxFlag==1) then begin //Tulumaksuga maksustatav
          CPr.BrutoTotal = CPr.BrutoTotal + CPrw.BrutoSum;
        end;
      end;
    end;
    IncTaxFreeMinToUse(CPr.SerNr,CPr.ContrSerNr,CPr.PaymDate,"CalcPayrollVc",tmpval,CPr.BrutoTotal,itfmintouse,totbruto,lastcalctax,fixedmin);
    itfmintouse=itfmintouse-previtfmin;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CPr,i,CPrw);
      otflag=IsOpenTransRow(CPr.SerNr,i);
      absflag=IsAbsenceRow(CPr.SerNr,i);
      paymtypeflag=GetPaymTypeFlag(CPrw.PaymTypeCode);
      PTr.Code=CPrw.PaymTypeCode;
      if (ReadFirstMain(PTr,1,true)) then begin end;
      if ((paymtypeflag==1) or (paymtypeflag==2) or (paymtypeflag==3)) then begin //kinnipidamine k.a. KohtutŠitur (kinnip.neto)
        inctaxfreeminflag=0; //Šra arvesta TM vaba miinimuni kinnipidamise juhul
      end;
      if (paymtypeflag==7) then begin //tasu
        if (maintflag==2) then begin //hooldus koosta puhkusearvestuse kaardid
          if (itfm!=0) then begin
            inctaxfreeminflag=0; //Šra arvesta TM vaba miinimuni 
          end else begin
            inctaxfreeminflag=Contrr.IncTaxFreeMinFlag;
          end;
        end else begin 
          inctaxfreeminflag=Contrr.IncTaxFreeMinFlag;
        end;
      end;
      tariff=0;
      amount=0;
      unemplins=0;
      pension=0;
      calcbruto=0;
      addtaxsum=0;
      inctax=0;
      soctax=0;
      emplunemplins=0;
      if (paymtypeflag==3) then begin //KohtutŠitur (kinnip.neto)
        if (updflag) then begin
          cpitneto = GetCPrITNeto(CPr,i,emplneto,bptcode,bunpaid,brwcnt);
          updflag = false;
        end;
        tariff = GetBailiffSum(CPrw.PaymTypeCode,cpitneto,bptcode,bunpaid,brwcnt);            
      end else begin
        tariff = CPrw.Tariff;
      end;
      amount=CPrw.Amount;
      bruto=(tariff*amount);
      neto=0;
      if ((maintflag>0) and (otflag==false) and (absflag==false)) then begin
        CalcPaymTypeSumsAndTaxes(PTr,CPr.BrutoTotal,bruto,neto,calcbruto,addtaxsum,totbruto,lastcalctax,fixedmin,inctax,inctaxfreemin,unemplins,pension,soctax,emplunemplins,CPr.SerNr,i,CPrw.PosCode,Contrr.EmplCode,CPr.PaymDate,inctaxfreeminflag,itfmintouse,amount,tariff,CPrw.SDate,CPrw.EDate,CPr.ContrSerNr,pwflag,whflag,contrflag,paymtypeflag);
        CPrw.Tariff=tariff;
        CPrw.Amount=amount;
      end else begin
        CalculateTaxes(CPr.BrutoTotal,bruto,neto,calcbruto,addtaxsum,totbruto,lastcalctax,fixedmin,inctax,inctaxfreemin,unemplins,pension,soctax,emplunemplins,CPrw.PaymTypeCode,Contrr.EmplCode,CPr.PaymDate,inctaxfreeminflag,itfmintouse);
      end;
      CPrw.NetoSum=neto;
      CPrw.BrutoSum=bruto;
      CPrw.UnemplInsSum=unemplins;
      CPrw.PensionSum=pension;
      CPrw.CalcBrutoSum=calcbruto;
      CPrw.AddTaxSum=addtaxsum;
      lastcalctax=lastcalctax-CPrw.AddTaxSum;
      CPrw.IncTaxSum=inctax;
      CPrw.IncTaxFreeMinSum=inctaxfreemin;
      CPrw.DPDiscSum=blankval;
      CPrw.SocTaxSum=soctax;
      CPrw.EmplUnemplInsSum=emplunemplins;
      previtfmin=inctaxfreemin;
      
      if (paymtypeflag==7) then begin //Tasu
        if (CPrw.Tariff<0) then begin
          CPrw.Tariff=-CPrw.Tariff;      
        end;
      end;
      if ((paymtypeflag==1) or (paymtypeflag==2) or (paymtypeflag==3)) then begin //kinnipidamine k.a. KohtutŠitur (kinnip.neto)
        if (CPrw.Tariff>0) then begin
          CPrw.Tariff=-CPrw.Tariff;      
        end;
        if (paymtypeflag==1) then begin //Kinnipidamine (bruto)
          MakeMinusSums(CPrw.NetoSum,CPrw.BrutoSum,CPrw.UnemplInsSum,CPrw.PensionSum,CPrw.CalcBrutoSum,CPrw.AddTaxSum,CPrw.IncTaxSum,CPrw.IncTaxFreeMinSum,CPrw.SocTaxSum,CPrw.EmplUnemplInsSum,CPrw.DPDiscSum);
        end;
        if ((paymtypeflag==2) or (paymtypeflag==3)) then begin //Kinnipidamine (neto) v›i KohtutŠitur (kinnip.neto)
          CPrw.NetoSum=(CPrw.Tariff*CPrw.Amount);
          CPrw.BrutoSum=blankval;
          CPrw.UnemplInsSum=blankval;
          CPrw.PensionSum=blankval;
          CPrw.CalcBrutoSum=blankval;
          CPrw.AddTaxSum=blankval;
          CPrw.IncTaxSum=blankval;
          CPrw.IncTaxFreeMinSum=-CPrw.IncTaxFreeMinSum;
          CPrw.DPDiscSum=blankval;
          CPrw.SocTaxSum=blankval;
          CPrw.EmplUnemplInsSum=blankval;
        end;
      end;
      if (blank(CPrw.PosCode) and blank(CPrw.PaymTypeCode) and (CPrw.Tariff<=0) and (CPrw.Amount<=0)) then begin
        MatRowDelete(CPr,i);
        i = i - 1;
        rwcnt = MatRowCnt(CPr);
      end else begin
        MatRowPut(CPr,i,CPrw);
      end;
    end;
  end;
  return;
end;

procedure PasteCPrwsFromPWr(record CalcPayrollVc CPr,var row CalcPayrollVc CPrw,var integer calcrownr,var boolean saveflag)
begin
  record PieceWorkVc PWr;
  row PieceWorkVc PWrw;
  boolean TrHs,testf;
  integer rwcnt,i;
  string 20 poscode,paymtypecode,posname,paymtypename;
  date frdat,todat;
  val tariff;
  
  poscode=CPrw.PosCode;
  posname=CPrw.PosName;
  paymtypecode=CPrw.PaymTypeCode;
  paymtypename=CPrw.PaymTypeName;
  tariff=CPrw.Tariff;
  frdat=CPrw.SDate;
  todat=CPrw.EDate;
  ResetLoop(PWr);
  TrHs=true;
  PWr.TransDate=frdat;
  while (LoopKey("TransDate",PWr,1,TrHs)) begin
    if (PWr.TransDate>todat) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (PWr.OKFlag==1) then begin
        if (GetPWTPaymTypeCode(PWr.PieceWorkTypeCode)==paymtypecode) then begin
          rwcnt = MatRowCnt(PWr);
          for (i=0; i<rwcnt;i=i+1) begin
            MatRowGet(PWr,i,PWrw);
            if ((PWrw.ContrSerNr==CPr.ContrSerNr) and (PWrw.PosCode==poscode) and (PWrw.CalcSerNr<=0)) then begin
              CPrw.PosCode=poscode;
              CPrw.PosName=posname;
              CPrw.PaymTypeCode=paymtypecode;
              CPrw.PaymTypeName=paymtypename;
              CPrw.SDate=frdat;
              CPrw.EDate=todat;
              CPrw.Tariff=tariff;
              CPrw.Amount=1;
              CPrw.BrutoSum=tariff;
              CPrw.NetoSum=0;
              if nonblank(PWrw.ObjCode) then begin
                CPrw.ObjCode=PWrw.ObjCode;
              end else begin
                CPrw.ObjCode=CPr.ObjCode;
              end;
              MatRowInsert(CPr,calcrownr,CPrw);
              calcrownr=calcrownr+1;
              saveflag=true;
            end;  
          end;  
        end;
      end;
    end;
  end;
  return;
end;

procedure PasteCPrwsFromWHr(record CalcPayrollVc CPr,var row CalcPayrollVc CPrw,var integer calcrownr,var boolean saveflag)
begin
  record WorkedHoursVc WHr;
  row WorkedHoursVc WHrw;
  boolean TrHs,testf;
  integer rwcnt,i;
  string 20 poscode,paymtypecode,posname,paymtypename;
  date frdat,todat;
  val tariff;
  
  poscode=CPrw.PosCode;
  posname=CPrw.PosName;
  paymtypecode=CPrw.PaymTypeCode;
  paymtypename=CPrw.PaymTypeName;
  tariff=CPrw.Tariff;
  frdat=CPrw.SDate;
  todat=CPrw.EDate;
  TrHs=true;

  ResetLoop(WHr);
  WHr.Year=GetYear(frdat);
  WHr.Month=GetMonth(frdat);
  while (LoopKey("Year",WHr,2,TrHs)) begin
    if (WHr.Year!=GetYear(frdat)) then begin
      TrHs = false;
    end;
    if (WHr.Month!=GetMonth(frdat)) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (WHr.OKFlag!=0) then begin
        rwcnt = MatRowCnt(WHr);
        for (i=0; i<rwcnt;i=i+1) begin
          MatRowGet(WHr,i,WHrw);
          if ((WHrw.ContrSerNr==CPr.ContrSerNr) and (WHrw.PosCode==poscode) and (GetWHTPaymTypeCode(WHrw.WorkHourTypeCode)==paymtypecode) and (WHrw.CalcSerNr<=0)) then begin
            CPrw.PosCode=poscode;
            CPrw.PosName=posname;
            CPrw.PaymTypeCode=paymtypecode;
            CPrw.PaymTypeName=paymtypename;
            CPrw.SDate=frdat;
            CPrw.EDate=todat;
            CPrw.Tariff=tariff;
            CPrw.Amount=1;
            CPrw.BrutoSum=tariff;
            CPrw.NetoSum=0;
            if nonblank(WHrw.ObjCode) then begin
              CPrw.ObjCode=WHrw.ObjCode;
            end else begin
              CPrw.ObjCode=CPr.ObjCode;
            end;
            MatRowInsert(CPr,calcrownr,CPrw);
            calcrownr=calcrownr+1;
            saveflag=true;
          end;  
        end;
      end;
    end;
  end;
  return;
end;

global
procedure PasteCPrwFromContrrw(record CalcPayrollVc CPr,var row CalcPayrollVc CPrw,record ContractVc Contrr,row ContractVc Contrrw,var integer rownr,integer pwflag,integer whflag,integer contrflag,boolean maintflag,var boolean saveflag)
begin  
  record PaymTypeVc PTr;
  boolean testf,pastepw,pastewh;
  
  testf=false;
  CPrw.PosCode=Contrrw.PosCode;
  CPrw.PosName=Contrrw.PosName;
  CPrw.PaymTypeCode=Contrrw.PaymTypeCode;
  CPrw.SDate=CPr.StartDate;
  CPrw.EDate=CPr.EndDate;

  pastepw = false;
  pastewh = false;
  testf = GetRightPeriod(CPrw.SDate,CPrw.EDate,Contrrw.SDate,Contrrw.EDate);
  if (testf) then begin
    PTr.Code = CPrw.PaymTypeCode;
    if (ReadFirstMain(PTr,1,true)) then begin
      if (maintflag) then begin
        switch (PTr.CalcTypeFlag) begin
          case 0: //Arvestuse alus: Fikseeritud summa / PŸsitasu
            if (contrflag==0) then begin
              testf = false;
            end;
          case 1: //Arvestuse alus: Proportsionaalselt tšštatud ajaga / PŸsitasu
            if (contrflag==0) then begin
              testf = false;
            end;
          case 2: //Arvestuse alus: Tššaja tabelist
            if (whflag==0) then begin
              testf = false;
            end else begin
              pastewh = true;
            end;
          case 3: //Arvestuse alus: TŸkitšš
            if (pwflag==0) then begin
              testf = false;
            end else begin
              pastepw = true;
            end;
        end;
        if (PTr.StandingChargeFlag!=0) then begin 
          if (DateInRange(Contrrw.LastCalcDate,CPrw.SDate,CPrw.EDate)) then begin
            testf = false;
          end;
        end;
      end;

      if (testf) then begin
        CPrw.PaymTypeName = PTr.Name;
        CPrw.Tariff = Contrrw.LoadSum;
        CPrw.Amount = 1;
        CPrw.BrutoSum = Contrrw.LoadSum;
        CPrw.NetoSum = 0;
        CPrw.ObjCode = Contrrw.ObjCode;
        if (pastepw) then begin
          PasteCPrwsFromPWr(CPr,CPrw,rownr,saveflag);
        end else begin
          if (pastewh) then begin
            PasteCPrwsFromWHr(CPr,CPrw,rownr,saveflag);
          end else begin
            MatRowInsert(CPr,rownr,CPrw);
            rownr = rownr + 1;
            saveflag = true;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
function val GetCPSumForPeriod(LongInt contrsernr,date sdate,date edate)
begin  
  record CalcPayrollVc CPr;
  row CalcPayrollVc CPrw;
  record PaymTypeVc PTr;
  integer rwcnt,i;
  val res;
  boolean TrHs,testf;
  
  res=0;
  ResetLoop(CPr);
  TrHs=true;  
  CPr.ContrSerNr=contrsernr;
  CPr.OKFlag=1;
  CPr.StartDate=sdate;
  while (LoopKey("ContrSerNr",CPr,3,TrHs)) begin
    if (CPr.ContrSerNr!=contrsernr) then begin TrHs = false; end;
    if (CPr.OKFlag!=1) then begin TrHs = false; end;
    if (TrHs) then begin
      testf=true;
      if (CPr.Invalid!=0) then begin 
        testf=false; 
      end;
      if ((CPr.StartDate<sdate) or (CPr.EndDate>edate)) then begin 
        testf = false; 
      end;
      if (testf) then begin
        rwcnt=MatRowCnt(CPr);
        for (i=0; i<rwcnt;i=i+1) begin
          MatRowGet(CPr,i,CPrw);
          if (nonblank(CPrw.PaymTypeCode)) then begin
            PTr.Code = CPrw.PaymTypeCode;
            if (ReadFirstMain(PTr,1,true)) then begin
              if (PTr.VacationFlag!=0) then begin
                res=res+CPrw.BrutoSum;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  GetCPSumForPeriod=res;
  return;
end;

global
updating procedure UpdateCPUnFromCPr(record CalcPayrollVc CPr,boolean increase)
begin
  row CalcPayrollVc CPrw;
  LongInt bint;
  integer rwcnt,i;

  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PaymTypeCode) then begin
      UpdateCPUnpaidVc(CPr.ContrSerNr,CPr.Firstname,CPr.Surname,CPr.SerNr,i,CPrw.PaymTypeCode,CPrw.NetoSum,CPrw.BrutoSum,CPrw.UnemplInsSum,CPrw.PensionSum,CPrw.CalcBrutoSum,CPrw.AddTaxSum,CPrw.IncTaxSum,CPrw.IncTaxFreeMinSum,CPrw.SocTaxSum,CPrw.EmplUnemplInsSum,increase,"CalcPayrollVc",bint,bint,CPrw.DPDiscSum);
    end;
  end;
  return;
end;

global
updating procedure UpdateDPDUsedFromCPr(record CalcPayrollVc CPr,boolean increase)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i;
  val dpdused,dpdpaid;
  
  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PaymTypeCode) and (CPrw.DPDiscSum>0) then begin
      dpdused=CPrw.DPDiscSum;
      dpdpaid=0;
      UpdateDPDUsedVc(CPr.ContrSerNr,CPr.PaymDate,CPr.CalcDate,dpdused,dpdpaid,increase);
    end;
  end;
  return;
end;

global
updating procedure UpdateITFMUsedFromCPr(record CalcPayrollVc CPr,boolean increase)
begin
  row CalcPayrollVc CPrw;
  record PaymTypeVc PTr;
  integer rwcnt,i;
  val itfmused,itfmbrutosum;
  
  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PaymTypeCode) then begin
      PTr.Code=CPrw.PaymTypeCode;
      if (ReadFirstMain(PTr,1,true)) then begin end;
      if (PTr.IncomeTaxFlag==1) then begin //Tulumaksuga maksustatav
        itfmused=CPrw.IncTaxFreeMinSum-CPrw.AddTaxSum;
        itfmbrutosum = CPrw.BrutoSum;
        UpdateITFMUsedVc(CPr.ContrSerNr,CPr.PaymDate,itfmused,itfmbrutosum,increase,false);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateCPPPHistFromCPr(record CalcPayrollVc CPr,boolean delete)
begin
  record CPPPHistVc CPPPHistr;
  record ContractVc Contrr;
  
  CPPPHistr.TransNr=CPr.SerNr;
  CPPPHistr.TransType=0;
  if (ReadFirstKey("TransNr",CPPPHistr,2,true)) then begin
    if (delete) then begin
      RecordDelete(CPPPHistr);
      StepBack(CPPPHistr);
    end;
  end else begin
    RecordNew(CPPPHistr);
    CPPPHistr.TransNr=CPr.SerNr;
    CPPPHistr.TransType=0;
    CPPPHistr.RowNr=-1;
    CPPPHistr.CalcSerNr=-1;
    CPPPHistr.TransDate=CPr.CalcDate;
    CPPPHistr.ContrSerNr=CPr.ContrSerNr;
    Contrr.SerNr = CPPPHistr.ContrSerNr;
    if (ReadFirstMain(Contrr,1,true)) then begin
      CPPPHistr.EmplCode=Contrr.EmplCode;
    end;
    if (RecordInsert(CPPPHistr,false)) then begin end;
  end;
  return;
end;

global
updating procedure UpdateBailiffFromCPr(record CalcPayrollVc CPr,boolean increase)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i,paymtypeflag;

  rwcnt=MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    if nonblank(CPrw.PaymTypeCode) then begin
      paymtypeflag = GetPaymTypeFlag(CPrw.PaymTypeCode);
      if (paymtypeflag==3) then begin //KohtutŠitur (kinnip.neto)
        UpdateBailiffVc(CPr.ContrSerNr,CPrw.PaymTypeCode,-CPrw.NetoSum,increase);
      end;
    end;
  end;
  return;
end;
