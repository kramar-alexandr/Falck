external function integer CheckObjs(string,string,var string);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure SaveTrans(record TRVc);
external updating procedure InvalidateTR(Integer,LongInt);
external function boolean ContractExsistsAndActive(LongInt);
external function boolean PositionExsistsAndActive(string,LongInt,date);
external updating procedure UpdateCPUnFromCPr(record CalcPayrollVc,boolean);
external updating procedure UpdateITFMUsedFromCPr(record CalcPayrollVc,boolean);
external updating procedure UpdateDPDUsedFromCPr(record CalcPayrollVc,boolean);
external updating procedure UpdateContractFromCPr(record CalcPayrollVc);
external function LongInt MakeTransFromCalcPayroll(record TRVc,record TRVc,record CalcPayrollVc,boolean,boolean);
external function boolean GetNextCalcPayrollSerNr(date,var LongInt);
external updating procedure UpdateCPPPHistFromCPr(record CalcPayrollVc,boolean);
external function Boolean SerNrTestCalcPayrollVc(LongInt,date,var boolean);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external function boolean PaymTypeExsists(string);
external procedure SetMarkFlag(integer,var integer);
external updating procedure UpdateBailiffFromCPr(record CalcPayrollVc,boolean);
//update calcpayroll related registers
external updating procedure InsertCPWHVc(LongInt,integer,LongInt,integer);
external updating procedure InsertCPPWVc(LongInt,integer,LongInt,integer);
external updating procedure InsertCPAbsVc(LongInt,integer,LongInt);
external updating procedure InsertCPOTVc(LongInt,integer,LongInt,integer);
external updating procedure RemoveCPWHVc(LongInt,LongInt);
external updating procedure RemoveCPPWVc(LongInt,LongInt);
external updating procedure RemoveCPAbsVc(LongInt);
external updating procedure RemoveCPOTVc(LongInt,LongInt);
external updating function Boolean RemoveCPWHVcOld(LongInt,LongInt);
external updating function Boolean RemoveCPPWVcOld(LongInt,LongInt);
external updating function Boolean RemoveCPAbsVcOld(LongInt);
external updating function Boolean RemoveCPOTVcOld(LongInt,LongInt);
//old code
external updating procedure UpdateCPPWFromCPr(record CalcPayrollVc,integer);
external updating procedure UpdateCPWHFromCPr(record CalcPayrollVc,integer,var boolean);
external updating procedure UpdateCPAbsFromCPr(record CalcPayrollVc,integer,var boolean);
external updating procedure UpdateCPOTFromCPr(record CalcPayrollVc,integer,var boolean);

global
function LongInt CalcPayrollVcRecordDefaults(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  date tmpdate;
  
  CPr.SerNr = -1;
  CPr.CalcDate = CurrentDate;
  CPr.RegDate = CurrentDate; //nk 30.11.2018
  CPr.RecSign = CurrentUser; //nk 30.11.2018
  CPr.OKFlag = 0;
  SetMarkFlag(CPr.OKFlag,CPr.OKMark);
  CPr.PaymFlag = 0;
  SetMarkFlag(CPr.PaymFlag,CPr.PaymMark);
  CPr.ContrSerNr = -1;
  tmpdate.day = 1;
  tmpdate.month = GetMonth(CPr.CalcDate);
  tmpdate.year = GetYear(CPr.CalcDate);
  CPr.StartDate = tmpdate;
  tmpdate.day = DaysInMonth(GetYear(tmpdate),GetMonth(tmpdate));
  CPr.EndDate = tmpdate;
  CPr.PaymDate = tmpdate;
  CPr.Invalid = 0;
  CPr.Mailf = 0;
  if (SingleUserMode) then begin
    if (GetNextCalcPayrollSerNr(CPr.CalcDate,CPr.SerNr)) then begin end;
  end;
  CalcPayrollVcRecordDefaults = res; 
  return;
end;

global
function LongInt CalcPayrollVcRecordDuplicate(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  row CalcPayrollVc CPrw;
  Integer rwcnt,i;
  date tmpdate;
  val tmpval;
 
  CPr.SerNr = -1;
  CPr.CalcDate = CurrentDate;
  CPr.RegDate = CurrentDate; //nk 30.11.2018
  CPr.RecSign = CurrentUser; //nk 30.11.2018
  CPr.OKFlag = 0;
  SetMarkFlag(CPr.OKFlag,CPr.OKMark);
  CPr.PaymFlag = 0;
  SetMarkFlag(CPr.PaymFlag,CPr.PaymMark);
  tmpdate.day = 1;
  tmpdate.month = GetMonth(CPr.CalcDate);
  tmpdate.year = GetYear(CPr.CalcDate);
  CPr.StartDate = tmpdate;
  tmpdate.day = DaysInMonth(GetYear(tmpdate),GetMonth(tmpdate));
  CPr.EndDate = tmpdate;
  CPr.PaymDate = tmpdate;
  CPr.Invalid = 0;
  CPr.Mailf = 0;
  if (SingleUserMode) then begin
    if (GetNextCalcPayrollSerNr(CPr.CalcDate,CPr.SerNr)) then begin end;
  end;
  rwcnt = MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    CPrw.OTNr = -1;
    CPrw.AbsNr = -1;
    CPrw.PWNr = -1;
    CPrw.WHNr = -1;
    CPrw.RowNr = -1;
    MatRowPut(CPr,i,CPrw);
  end;
  CalcPayrollVcRecordDuplicate = res; 
  return;
end;

global
updating function LongInt CalcPayrollVcRecordCheck(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record CalcPayrollVc CP3r;
  row CalcPayrollVc CPrw;
  record ContractVc Contrr;
  record PositionVc Posr;
  record TRVc gTRp;
  record TRVc gTR2p;
  LongInt updatemode,insertmode,errcode;
  integer rwcnt,i,j,tmp,vacdays,prfx;
  string 255 tstr;
  boolean otflag,absflag,advpaymflag,transf;
  boolean gentrans;
  
  insertmode = 1;
  updatemode = 2;
  res = 0;
  if (CP2r.Invalid!=0) then begin
    RecordCheckError(1282,"",0,"");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;
  if (stat!=insertmode) then begin
    if (CP2r.OKFlag!=0) then begin
      goto LCalcPayrollVcRecordCheck;
    end;  
  end;

  if (stat==updatemode) then begin
    if (CPr.SerNr<=0)  then begin
      CPr.SerNr = CP2r.SerNr;
    end;
  end;
  if (CPr.SerNr==-1) then begin
      if (GetNextCalcPayrollSerNr(CPr.CalcDate,CPr.SerNr)) then begin end;
  end;
  if (SerNrTestCalcPayrollVc(CPr.SerNr,CPr.CalcDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;

  if (stat==insertmode) or (stat==updatemode and CPr.SerNr!=CP2r.SerNr) then begin
    CP3r.SerNr = CPr.SerNr;
    if (ReadFirstMain(CP3r,1,true)) then begin
      RecordCheckError(1547," " & CPr.SerNr,-1,"SerNr");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
  end;   
  if (len(CPr.SerNr)<=0 or (CPr.SerNr<=0)) then begin
    RecordCheckError(1500354,"",-1,"SerNr");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;

  if (CPr.ContrSerNr<=0) then begin
    RecordCheckError(1500318,"",-1,"ContrSerNr");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck; 
  end else begin
    if (ContractExsistsAndActive(CPr.ContrSerNr)==false) then begin
      RecordCheckError(1500332," v›i ei ole aktiivne " & CPr.ContrSerNr,-1,"ContrSerNr");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck; 
    end;
  end;
  if blank(CPr.CalcDate) then begin
    RecordCheckError(1500342,"",-1,"CalcDate");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;
  if blank(CPr.PaymDate) then begin
    RecordCheckError(1500377,"",-1,"PaymDate");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;
  if blank(CPr.StartDate) then begin
    RecordCheckError(1500321,"",-1,"StartDate");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;
  if blank(CPr.EndDate) then begin
    RecordCheckError(1500334,"",-1,"EndDate");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end else begin
    if (CPr.EndDate<CPr.StartDate) then begin
      RecordCheckError(1500322,"",-1,"EndDate");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
  end;
  if (nonblank(CPr.ObjCode)) then begin
    errcode = CheckObjs("",CPr.ObjCode,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,tstr,-1,"ObjCode");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
  end;
  if (CPr.SocTaxTotal<0) then begin
    RecordCheckError(20825,"",-1,"SocTaxTotal");      
    res = -1; 
    goto LCalcPayrollVcRecordCheck;
  end;

  rwcnt = MatRowCnt(CPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    absflag = (CPrw.AbsNr!=-1);
    if (absflag==false) then begin 
      if blank(CPrw.PosCode) then begin
        RecordCheckError(1500307," " & CPrw.PosCode,i,"PosCode");      
        res = -1; 
        goto LCalcPayrollVcRecordCheck;
      end else begin
        otflag = (CPrw.OTNr!=-1);
        if (otflag) then begin
          Posr.Code = CPrw.PosCode;
          if (ReadFirstMain(Posr,1,true)==false) then begin
            RecordCheckError(1500324," " & CPrw.PosCode,i,"PosCode");      
            res = -1; 
            goto LCalcPayrollVcRecordCheck;
          end;
        end else begin
          if (PositionExsistsAndActive(CPrw.PosCode,CPr.ContrSerNr,CPr.StartDate)==false) then begin
            RecordCheckError(1500324," v›i ei ole aktiivne antud kuupŠeval " & CPrw.PosCode,i,"PosCode");      
            res = -1; 
            goto LCalcPayrollVcRecordCheck; 
          end;
          if (PositionExsistsAndActive(CPrw.PosCode,CPr.ContrSerNr,CPr.EndDate)==false) then begin
            RecordCheckError(1500324," v›i ei ole aktiivne antud kuupŠeval " & CPrw.PosCode,i,"PosCode");      
            res = -1; 
            goto LCalcPayrollVcRecordCheck; 
          end;
        end;
      end;
    end;
    if blank(CPrw.PaymTypeCode) then begin
      RecordCheckError(1500316,"",i,"PaymTypeCode");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
    if (PaymTypeExsists(CPrw.PaymTypeCode)==false) then begin
      RecordCheckError(1500326," " & CPrw.PaymTypeCode,i,"PaymTypeCode");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
    if blank(CPrw.Tariff) then begin
      RecordCheckError(1500353,"",i,"Tariff");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
    if blank(CPrw.Amount) then begin
      RecordCheckError(1500365,"",i,"Amount");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
    if blank(CPrw.NetoSum) then begin
      RecordCheckError(1500359,"",i,"NetoSum");      
      res = -1; 
      goto LCalcPayrollVcRecordCheck;
    end;
    if (nonblank(CPrw.ObjCode)) then begin
      errcode = CheckObjs("",CPrw.ObjCode,tstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,tstr,i,"ObjCode");      
        res = -1; 
        goto LCalcPayrollVcRecordCheck;
      end;
    end;
  end;

  transf = false;
  if (CPr.OKFlag!=0) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (CP2r.OKFlag==0) then begin transf = true; end;
    end;  
  end;
  if ((transf) and (gentrans)) then begin
    errcode = MakeTransFromCalcPayroll(gTRp,gTR2p,CPr,false,true);
    tstr = CheckTrans(gTRp,2,true);
    if (nonblank(tstr)) then begin
      RecordCheckError(1085,tstr,-1,"SerNr");      
      res = -1;
      goto LCalcPayrollVcRecordCheck;
    end;
    tstr = CheckTrans(gTR2p,2,true);
    if (nonblank(tstr)) then begin
      RecordCheckError(1085,tstr,-1,"SerNr");      
      res = -1;
      goto LCalcPayrollVcRecordCheck;
    end;
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
    end else begin
      prfx = SalaryCalcYc;
      if ((gTRp.Number>0) and (gTRp.IntYc==prfx)) then begin
        SaveTrans(gTRp);
      end;
      prfx = SalaryPayment2Yc;
      if ((gTR2p.Number>0) and (gTR2p.IntYc==prfx)) then begin
        SaveTrans(gTR2p);
      end;
    end;
  end;
LCalcPayrollVcRecordCheck:;
  if (res==-1) then begin
    CPr.OKFlag = 0;
    SetMarkFlag(CPr.OKFlag,CPr.OKMark);
  end;
  CalcPayrollVcRecordCheck = res;
  return;
end;

global
function LongInt CalcPayrollVcRecordSave(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  date tmpdate;
 
  SetMarkFlag(CPr.OKFlag,CPr.OKMark);
  SetMarkFlag(CPr.PaymFlag,CPr.PaymMark);
  CalcPayrollVcRecordSave = res; 
  return;
end;

global
updating procedure UpdateCPHistory(record CalcPayrollVc CPr,LongInt rownr,Boolean addf,Boolean importf,Integer otf,Integer absf,Integer whf,Integer pwf)
begin
  row CalcPayrollVc CPrw;
  Integer i,rwcnt,j,rwcnt2;
  record OpenTransVc OTr,oldOTr;  
  row OpenTransVc OTrw;
  record AbsenceVc Absr,oldAbsr;  
  record WorkedHoursVc WHr,oldWHr;
  row WorkedHoursVc WHrw;
  record PieceWorkVc PWr,oldPWr;
  row PieceWorkVc PWrw;
  Boolean handled,checkrowflag,okf;
  
  rwcnt = MatRowCnt(CPr);
  for (i=rownr;i<rwcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    handled = false;
    if (CPrw.OTNr!=-1) and (otf) then begin
      OTr.SerNr = CPrw.OTNr;
      if (ReadFirstMain(OTr,1,true)) then begin
        RecordCopy(oldOTr,OTr);
        MatRowGet(OTr,CPrw.RowNr,OTrw); 
        if (addf) then begin
          OTrw.CalcSerNr = CPr.SerNr;
        end else begin
          OTrw.CalcSerNr = -1;
          OTr.CalcFlag = 0;
          SetMarkFlag(OTr.CalcFlag,OTr.CalcMark);
        end;
        MatRowPut(OTr,CPrw.RowNr,OTrw);
        if (addf) then begin
          okf = true;
          rwcnt2 = MatRowCnt(OTr);
          for (j=0;j<rwcnt2;j=j+1) begin
            MatRowGet(OTr,j,OTrw);
            if (OTrw.CalcSerNr<=0) then begin
              okf = false;
              j = rwcnt2;
            end;
          end;
          if (okf) then begin
            OTr.CalcFlag = 1;          
            SetMarkFlag(OTr.CalcFlag,OTr.CalcMark);
          end;
        end;
        RecordUpdate(oldOTr,OTr,false);
        if (addf) then begin
          InsertCPOTVc(CPr.SerNr,i,OTr.SerNr,CPrw.RowNr);
        end else begin
          RemoveCPOTVc(OTr.SerNr,CPrw.RowNr);
        end;
      end;
      handled = true;
    end;
    if (CPrw.AbsNr!=-1) and (absf) then begin
      Absr.SerNr = CPrw.AbsNr;
      if (ReadFirstMain(Absr,1,true)) then begin
        RecordCopy(oldAbsr,Absr);    
        if (addf) then begin
          Absr.CalcSerNr = CPr.SerNr;
        end else begin
          Absr.CalcSerNr = -1;
        end;
        RecordUpdate(oldAbsr,Absr,false);
        if (addf) then begin
          InsertCPAbsVc(CPr.SerNr,0,Absr.SerNr);
        end else begin
          RemoveCPAbsVc(Absr.SerNr);
        end;
      end;
      handled = true;
    end;
    if (CPrw.PWNr!=-1) and (pwf) then begin
      PWr.SerNr = CPrw.PWNr;
      if (ReadFirstMain(PWr,1,true)) then begin
        RecordCopy(oldPWr,PWr);
        MatRowGet(PWr,CPrw.RowNr,PWrw); 
        if (addf) then begin
          PWrw.CalcSerNr = CPr.SerNr;
        end else begin
          PWrw.CalcSerNr = -1;
        end;
        MatRowPut(PWr,CPrw.RowNr,PWrw);
        RecordUpdate(oldPWr,PWr,false);
        if (addf) then begin
          InsertCPPWVc(CPr.SerNr,i,PWr.SerNr,CPrw.RowNr);
        end else begin
          RemoveCPPWVc(PWr.SerNr,CPrw.RowNr);
        end;
      end;
      handled = true;
    end;
    if (CPrw.WHNr!=-1) and (whf) then begin
      WHr.SerNr = CPrw.WHNr;
      if (ReadFirstMain(WHr,1,true)) then begin
        RecordCopy(oldWHr,WHr);
        MatRowGet(WHr,CPrw.RowNr,WHrw); 
        if (addf) then begin
          WHrw.CalcSerNr = CPr.SerNr;
        end else begin
          WHrw.CalcSerNr = -1;
        end;
        MatRowPut(WHr,CPrw.RowNr,WHrw);
        RecordUpdate(oldWHr,WHr,false);
        if (addf) then begin
          InsertCPWHVc(CPr.SerNr,i,WHr.SerNr,CPrw.RowNr);
        end else begin
          RemoveCPWHVc(WHr.SerNr,CPrw.RowNr);
        end;
      end;
      handled = true;
    end;
    if (handled==false) and (addf==false) then begin//old code
      handled = RemoveCPOTVcOld(CPr.SerNr,i);
      if (handled==false) then begin
        handled = RemoveCPAbsVcOld(CPr.SerNr);
      end;
      if (handled==false) then begin
        handled = RemoveCPPWVcOld(CPr.SerNr,i);
      end;
      if (handled==false) then begin
        handled = RemoveCPWHVcOld(CPr.SerNr,i);
      end;
    end;
    if (handled==false) and (importf) then begin//updating support register, old code
      checkrowflag = true;
      if (otf==1) then begin
        UpdateCPOTFromCPr(CPr,i,checkrowflag); //Avatud kannete abiregister
      end; 
      if (absf==1) and (checkrowflag) then begin
        UpdateCPAbsFromCPr(CPr,i,checkrowflag); //Puudumiste abiregister
      end;
      if (whf==1) and (checkrowflag) then begin
        UpdateCPWHFromCPr(CPr,i,checkrowflag); //Tššajatabeli abiregister
      end;
      if (pwf==1) and (checkrowflag) then begin
        UpdateCPPWFromCPr(CPr,i); //TŸkitšš abiregister
      end;
    end;
  end;
  return;
end;

updating procedure CheckIfUpdateHistoryNeeded(record CalcPayrollVc CPr,record CalcPayrollVc CP2r)
begin
  row CalcPayrollVc CPrw,CP2rw;
  Integer i,rwcnt,rwcnt2,loopcnt;
  Boolean updf;
  
  rwcnt = MatRowCnt(CPr);
  rwcnt2 = MatRowCnt(CP2r);
  loopcnt = rwcnt;
  if (rwcnt2<rwcnt) then begin
    loopcnt = rwcnt2;
  end;
  for (i=0;i<loopcnt;i=i+1) begin
    MatRowGet(CPr,i,CPrw);
    MatRowGet(CP2r,i,CP2rw);
    if (CPrw.OTNr!=CP2rw.OTNr) or (CPrw.AbsNr!=CP2rw.AbsNr) or (CPrw.PWNr!=CP2rw.PWNr) or (CPrw.WHNr!=CP2rw.RowNr) or (CPrw.WHNr!=CP2rw.RowNr) then begin
      UpdateCPHistory(CP2r,i,false,false,1,1,1,1);
      UpdateCPHistory(CPr,i,true,false,1,1,1,1);
      updf = true;
      i = rwcnt;  
    end;
  end;
  if (updf==false) and (rwcnt!=rwcnt2) then begin
    if (rwcnt>rwcnt2) then begin
      UpdateCPHistory(CPr,rwcnt2,true,false,1,1,1,1);    
    end else begin
      UpdateCPHistory(CP2r,rwcnt,false,false,1,1,1,1);    
    end;
  end;
  return;
end;

global
updating function LongInt CalcPayrollVcRecordSaveAfter(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  UpdateCPHistory(CPr,0,true,false,1,1,1,1);
  if (CPr.OKFlag!=0) then begin
    UpdateCPUnFromCPr(CPr,true);
    UpdateITFMUsedFromCPr(CPr,true);
    UpdateDPDUsedFromCPr(CPr,true);
    UpdateContractFromCPr(CPr);
    UpdateCPPPHistFromCPr(CPr,false);
    UpdateBailiffFromCPr(CPr,true);  
  end;
  CalcPayrollVcRecordSaveAfter = res;
  return;
end;

global
function LongInt CalcPayrollVcRecordUpdate(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  date tmpdate;

  SetMarkFlag(CPr.OKFlag,CPr.OKMark);
  SetMarkFlag(CPr.PaymFlag,CPr.PaymMark);
  CalcPayrollVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt CalcPayrollVcRecordUpdateAfter(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (CPr.Invalid==0) then begin
    CheckIfUpdateHistoryNeeded(CPr,CP2r);
  end;
  
  if ((CPr.OKFlag!=0) and (CP2r.OKFlag==0)) then begin
    UpdateCPUnFromCPr(CPr,true);
    UpdateITFMUsedFromCPr(CPr,true);
    UpdateDPDUsedFromCPr(CPr,true);
    UpdateContractFromCPr(CPr);
    UpdateCPPPHistFromCPr(CPr,false);
    UpdateBailiffFromCPr(CPr,true);  
  end;
  
  if ((CPr.Invalid!=0) and (CP2r.Invalid==0)) then begin
    UpdateCPHistory(CPr,0,false,false,1,1,1,1);
    UpdateCPUnFromCPr(CPr,false);
    UpdateITFMUsedFromCPr(CPr,false);
    UpdateDPDUsedFromCPr(CPr,false);
    UpdateContractFromCPr(CPr);
    UpdateCPPPHistFromCPr(CPr,true);
    UpdateBailiffFromCPr(CPr,false);  
    InvalidateTR(SalaryCalcYc,CPr.SerNr);
    InvalidateTR(SalaryPayment2Yc,CPr.SerNr);
  end;

  if ((CPr.OKFlag==0) and (CP2r.OKFlag!=0)) then begin
    UpdateCPUnFromCPr(CPr,false);
    UpdateITFMUsedFromCPr(CPr,false);
    UpdateDPDUsedFromCPr(CPr,false);
    UpdateContractFromCPr(CPr);
    UpdateCPPPHistFromCPr(CPr,true);
    UpdateBailiffFromCPr(CPr,false);  
    DeleteTransaction(CPr.SerNr,SalaryCalcYc);
    DeleteTransaction(CPr.SerNr,SalaryPayment2Yc);
  end;
  CalcPayrollVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt CalcPayrollVcRecordRemoveTest(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 1;
  if ((CPr.OKFlag!=0) or (CPr.PaymFlag!=0)) then begin
    MessageBox(1560,"");
    res = 0;
  end;
  CalcPayrollVcRecordRemoveTest = res; 
  return;
end;

global
updating function LongInt CalcPayrollVcRecordRemoveAfter(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if ((CPr.OKFlag==0) and (CPr.PaymFlag==0)) then begin
    UpdateCPHistory(CPr,0,false,false,1,1,1,1);
  end;
  CalcPayrollVcRecordRemoveAfter = res; 
  return;
end;

global
updating function LongInt CalcPayrollVcRecordInvalidateTest(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 0;
  if (CPr.Invalid==0) and (CPr.OKFlag!=0) and (CPr.PaymFlag==0) then begin
    CPr.Invalid = 1;
    UpdateContractFromCPr(CPr);
    UpdateCPHistory(CPr,0,false,false,1,1,1,1);
    res = 1;
  end;
LCalcPayrollVcRecordInvalidateTest:;
  CalcPayrollVcRecordInvalidateTest = res;  
  return;
end;

global
updating function LongInt CalcPayrollVcRecordImport(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  SetMarkFlag(CPr.OKFlag,CPr.OKMark);
  SetMarkFlag(CPr.PaymFlag,CPr.PaymMark);
  CalcPayrollVcRecordImport = res; 
  return;
end;

global
updating function LongInt CalcPayrollVcRecordImportAfter(var record CalcPayrollVc CPr,record CalcPayrollVc CP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (CPr.Invalid==0) then begin //k.a. kinnitamata arvestused
    UpdateCPHistory(CPr,0,true,true,1,1,1,1);
  end;
  if ((CPr.OKFlag!=0) and (CPr.Invalid==0)) then begin
    UpdateCPUnFromCPr(CPr,true); //Arvestuse abiregister
    UpdateITFMUsedFromCPr(CPr,true); //TM vaba miinimumi abiregister
    UpdateDPDUsedFromCPr(CPr,true); //Tššv›imetuspensionŠri soodustuse abiregister
    UpdateCPPPHistFromCPr(CPr,false); //Arvestuste/VŠljamaksete ajalugu - testimiseks
  end;
  CalcPayrollVcRecordImportAfter = res;
  return;
end;
