external procedure CPrSumUp(var record CalcPayrollVc);
external updating procedure PasteCPrTaxes(record CalcPayrollVc,integer,integer,integer,integer,integer,var val,Boolean);
external function boolean GetRightPeriod(var date,var date,date,date);
external function val GetCPSumForPeriod(LongInt,date,date);
external function LongInt GetWorkingDays(Date,Date);
external function LongInt GetExceptDays(date,var date);
external updating procedure InsertCPAbsVc(LongInt,integer,LongInt);
external function boolean GetBackXMonthsPeriod(var date,var date,integer);
external function LongInt GetAbsenceDays(LongInt,string,date,date,var LongInt,var LongInt);
external function LongInt GetCalendarDays(date,date);
external function val GetMinSalary(date);
external function val GetAbsenceFBDaysForPeriod(LongInt,string,date,date,var integer,var integer);
external function val GetSalaryFBSumForPeriod(LongInt,date,date);
external function boolean GetNextCalcPayrollSerNr(date,var LongInt);
external function LongInt GetMonthDiff(Date,Date);
external procedure PasteCPrwFromContrrw(record CalcPayrollVc,var row CalcPayrollVc,record ContractVc,row ContractVc,var integer,integer,integer,integer,boolean,var boolean);
external function integer GetPaymTypeFlag(string);
external function roundmode GetSalaryRoundMode(string);

global
function val GetStandingChargeSum(record ContractVc Contrr,date calcdate)
begin
  record PaymTypeVc PTr;
  row ContractVc Contrrw;  
  integer rwcnt,i;
  val res;
  
  res = 0;
  rwcnt = MatRowCnt(Contrr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Contrr,i,Contrrw);
    if nonblank(Contrrw.PosCode) then begin
      if (DateInRange(calcdate,Contrrw.SDate,Contrrw.EDate)) then begin
        PTr.Code=Contrrw.PaymTypeCode;
        if (ReadFirstMain(PTr,1,true)) then begin
          if (PTr.StandingChargeFlag!=0) then begin 
            res = res + Contrrw.LoadSum;
          end;
        end;
      end;   
    end;
  end;  
  GetStandingChargeSum = res;
  return;
end;

updating procedure PasteVacCPrwFromAbsr(record CalcPayrollVc CPr,record AbsenceVc Absr,record ContractVc Contrr,date sd,date ed,string paymtypecode,var boolean saveflag,date paymdate,Integer vacperstart)
begin  
  record AbsenceVc oldAbsr;  
  record PaymTypeVc PTr;
  row CalcPayrollVc CPrw;
  row ContractVc Contrrw;
  boolean testf;
  integer months,calcmethod,paymflag,tmpint,absfbworkdays,abscalfbnoexcdays;
  date sdate,edate,monthsdate,monthedate;
  val sumtot,sumperday,sumtmp,sum1tmp,minsalary,ttt;
  LongInt caldays,absworkdays,abscaldays,workdaysnorm,workdays,vacdays,daystmp,abscalnoexcdays,absfbdays;
  
  RecordCopy(oldAbsr,Absr);    
  CPrw.PosCode = "";
  CPrw.PaymTypeCode = paymtypecode;
  PTr.Code = CPrw.PaymTypeCode;
  if (ReadFirstMain(PTr,1,true)) then begin
    CPrw.PaymTypeName = PTr.Name;
    calcmethod = PTr.CalcMethodFlag;
    paymflag = PTr.PaymFlag;
  end;
  if (paymflag!=0) then begin //ei kuulu vŠljamaksmisele
    saveflag = false;
    goto L1;
  end;
  CPrw.SDate = CPr.StartDate;
  CPrw.EDate = CPr.EndDate;
  CPrw.ObjCode = Absr.ObjCode;
//cust - begin: ts 2018/05
/*
  if (paymdate>Absr.StartDate) then begin
    edate = Absr.StartDate;
  end else begin
    edate = paymdate;
  end;
*/
  if (vacperstart==0) then begin
    edate=Absr.StartDate;
  end else begin
    edate=AddMonth(Absr.StartDate,-1);
  end;
//cust - end
  if (calcmethod>0) then begin
    months=6;
    if (GetBackXMonthsPeriod(sdate,edate,months)) then begin
      if (GetRightPeriod(sdate,edate,Contrr.StartDate,Contrr.EndDate)) then begin
        monthsdate = CPr.CalcDate;
        monthsdate.day = 1;
        monthedate = CPr.CalcDate;
        monthedate.day = DaysInMonth(GetYear(monthedate),GetMonth(monthedate));
        workdaysnorm = GetWorkingDays(monthsdate,monthedate);
        sumtot = GetCPSumForPeriod(Absr.ContrSerNr,sdate,edate);
        sumtot = sumtot + GetSalaryFBSumForPeriod(Absr.ContrSerNr,sdate,edate);
        abscaldays = GetAbsenceDays(Absr.ContrSerNr,"",sdate,edate,absworkdays,abscalnoexcdays);
        absfbdays = GetAbsenceFBDaysForPeriod(Absr.ContrSerNr,"",sdate,edate,absfbworkdays,abscalfbnoexcdays);
        vacdays = ((GetCalendarDays(sd,ed)) - (GetExceptDays(sd,ed)));
        switch (calcmethod) begin
          case 1: 
            workdays = (GetWorkingDays(sdate,edate) - (absworkdays + absfbworkdays));
            sumperday = (sumtot/workdays);
          case 2: 
            caldays = ((GetCalendarDays(sdate,edate)) - (GetExceptDays(sdate,edate)) - abscalnoexcdays - abscalfbnoexcdays);
            sumperday = (sumtot/caldays);
          case 3: 
            caldays = (GetCalendarDays(sdate,edate) - abscaldays - absfbdays);
            sumperday = (sumtot/caldays);
          case 4: 
            //see below
          case 5: 
            minsalary = GetMinSalary(monthsdate); //date?
            sumperday = (minsalary/workdaysnorm);
            vacdays = GetWorkingDays(sd,ed);
        end;

        if ((calcmethod==2) or (calcmethod==4)) then begin
          sum1tmp = GetStandingChargeSum(Contrr,CPr.CalcDate);
          sumtmp = (sum1tmp/workdaysnorm);
          daystmp = GetWorkingDays(sd,ed);
          if (calcmethod==2) then begin
            if ((sumtmp*daystmp)>(sumperday*vacdays)) then begin
              sumperday = sumtmp;
              vacdays = daystmp;
            end;
          end else begin //calcmethod = 4
            sumperday = sumtmp;
            vacdays = daystmp;
          end;
        end;
        CPrw.Tariff = sumperday;
        CPrw.Tariff=round(CPrw.Tariff,GetSalaryRoundMode("2"));//ts - 2018/03, to fix rounding
        CPrw.Amount = vacdays;
        CPrw.BrutoSum = (CPrw.Tariff*CPrw.Amount);
        CPrw.NetoSum = 0;
      end;
    end;
  end else begin //ei tasustata
    CPrw.Tariff = 0;
    CPrw.Amount = 0;
    CPrw.BrutoSum = (CPrw.Tariff*CPrw.Amount);
    CPrw.NetoSum = 0;  
  end;
  MatRowInsert(CPr,0,CPrw);
  saveflag = true;
  Absr.CalcSerNr = CPr.SerNr;
  RecordUpdate(oldAbsr,Absr,false);
  InsertCPAbsVc(CPr.SerNr,0,Absr.SerNr);
L1:;
  return;
end;

global
updating procedure CreateVacCalcPayrollMn(record RcVc RepSpec)
begin
  record CalcPayrollVc CP1r;
  record CalcPayrollVc CPr;
  row CalcPayrollVc CPrw;
  record EmplVc Emplr;
  record ContractVc Contrr;
  row ContractVc Contrrw;
  record AbsenceVc Absr;
  record AbsTypeVc ATr;
  string 20 frempl,toempl,paymtypecode;
  LongInt frcontr,tocontr;
  boolean TrHs,TrHs1,TrHs2,testf,testf1,saveflag;
  integer rwcnt,rwcnt1,i,j,cprwnr,monthcnt,vacdays;
  date sdate,edate,cdate,sd,ed,paymdate;
  val tmpval,previtfmin;
  
  frempl = FirstInRange(RepSpec.f1,20);
  toempl = LastInRange(RepSpec.f1,20);
  frcontr = FirstInRange(RepSpec.f2,20);
  tocontr = LastInRange(RepSpec.f2,20);
  paymdate=RepSpec.d1;
  ResetLoop(Emplr);
  TrHs = true;
  Emplr.Code = frempl;
  while (LoopMain(Emplr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(toempl)) then begin
        if (Emplr.Code>toempl) then begin
          TrHs = false;
        end;
      end;
      if (TrHs) then begin
        testf=true;
        if (Emplr.ClosedFlag!=0) then begin
          testf = false;
        end;
        if (testf) then begin
          previtfmin=0; tmpval=0;//cust, TS 2015/11, per employee
          TrHs1=true;
          ResetLoop(Contrr);
          Contrr.EmplCode = Emplr.Code;
          while (LoopKey("EmplCode",Contrr,1,TrHs1)) begin
            if (Contrr.EmplCode!=Emplr.Code) then begin
              TrHs1 = false;
            end;
            if (TrHs1) then begin
              testf=true;
              if ((frcontr>0)) then begin
                if ((Contrr.SerNr<frcontr) or (Contrr.SerNr>tocontr)) then begin
                  testf = false;
                end;
              end;
              if (Contrr.Status!=1) then begin
                testf = false;
              end;
              if (testf) then begin                
                //previtfmin=0;//cust, moved up
                saveflag=false;
                cprwnr=0;
                RecordNew(CP1r);
                CP1r.SerNr=-1;
                CP1r.ContrSerNr=Contrr.SerNr;
                CP1r.CalcDate=RepSpec.sEndDate;
                CP1r.StartDate=RepSpec.sStartDate;
                CP1r.EndDate=RepSpec.sEndDate;
                CP1r.PaymDate=paymdate;
                CP1r.Firstname = Contrr.Firstname;
                CP1r.Surname = Contrr.Surname;
                testf1=GetRightPeriod(CP1r.StartDate,CP1r.EndDate,Contrr.StartDate,Contrr.EndDate);
                if (testf1) then begin
                  //Puhkused
                  TrHs2=true;
                  ResetLoop(Absr);
                  Absr.ContrSerNr=Contrr.SerNr;
                  Absr.OKFlag=1;
                  Absr.StartDate=CP1r.StartDate;
                  while (LoopKey("ContrSerNrSDate",Absr,3,TrHs2)) begin
                    if (Absr.ContrSerNr!=Contrr.SerNr) then begin
                      TrHs2=false;
                    end;
                    if (Absr.OKFlag!=1) then begin
                      TrHs2=false;
                    end;
                    if (TrHs2) then begin
                      testf1=true;
                      if (Absr.StartDate>CP1r.EndDate) then begin
                        testf1=false;
                      end;
                      if (Absr.CalcSerNr>0) then begin
                        testf1=false;
                      end;
                      if (testf1) then begin
                        ATr.Code = Absr.AbsTypeCode;
                        if (ReadFirstMain(ATr,1,true)) then begin
                          if (ATr.AbsTypeFlag!=0) then begin
                            testf1=false; 
                          end;
                          paymtypecode=ATr.PaymTypeCode;
                          if blank(paymtypecode) then begin
                            testf1=false; 
                          end;
                          if (testf1) then begin
                            sdate=CP1r.StartDate;
                            edate=sdate;
                            edate.day=DaysInMonth(GetYear(sdate),GetMonth(sdate));
                            sd=Absr.StartDate;
                            ed=Absr.EndDate;
                            monthcnt=GetMonthDiff(Absr.StartDate,Absr.EndDate);
                            for (i=1;i<=monthcnt;i=i+1) begin
                              RecordCopy(CPr,CP1r);    
                              if (monthcnt>1) then begin
                                CPr.CalcDate=edate;
                                CPr.StartDate=sdate;
                                CPr.EndDate=edate;
                                ed=sd;
                                ed.day=DaysInMonth(GetYear(ed),GetMonth(ed));
                                if (ed>Absr.EndDate) then begin
                                  ed=Absr.EndDate;                                
                                end;
                              end;
                              if (GetNextCalcPayrollSerNr(CPr.CalcDate,CPr.SerNr)) then begin end;
                              PasteVacCPrwFromAbsr(CPr,Absr,Contrr,sd,ed,paymtypecode,saveflag,paymdate,RepSpec.flags[0]);
                              //Kontroll, kas on KohtutŠituri summad
                              cprwnr = cprwnr + 1;
                              rwcnt1=MatRowCnt(Contrr);
                              for (j=0;j<rwcnt1;j=j+1) begin
                                MatRowGet(Contrr,j,Contrrw);
                                if (nonblank(Contrrw.PosCode)) then begin
                                  if (GetPaymTypeFlag(Contrrw.PaymTypeCode)==3) then begin //Tasuliigi tŸŸp: KohtutŠitur (kinnip.neto)
                                    PasteCPrwFromContrrw(CPr,CPrw,Contrr,Contrrw,cprwnr,0,0,1,true,saveflag);
                                  end;                                         
                                end;
                              end; 
                              PasteCPrTaxes(CPr,2,0,0,0,RepSpec.flags[0],tmpval,false);
                              PasteCPrTaxes(CPr,0,0,0,0,0,previtfmin,true);
                              CPrSumUp(CPr);
                              if (saveflag) then begin
                                if (RecordInsert(CPr,true)) then begin end; 
                              end; 
                              edate=AddMonth(edate,1);
                              edate.day=DaysInMonth(GetYear(edate),GetMonth(edate));
                              sdate=edate;
                              sdate.day=1;
                              sd=sdate;
                            end;
                          end;
                        end;
                      end;
                    end;
                  end;                
                end;
              end;
            end;  
          end;
        end;
      end;
    end;
  end;
LCreateVacCalcPayrollMn:;
  return;
end;
