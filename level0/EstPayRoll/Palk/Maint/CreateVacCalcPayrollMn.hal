external procedure CPrSumUp(var record CalcPayrollVc);
external procedure PasteCPrTaxes(var record CalcPayrollVc,integer,integer,integer,integer,integer,Boolean);
external function boolean GetRightPeriod(var date,var date,date,date);
external function val GetCPSumForPeriod(LongInt,date,date);
external function LongInt GetWorkingDays(Date,Date);
external function LongInt GetExceptDays(date,var date);
external function boolean GetBackXMonthsPeriod(var date,var date,integer);
external function LongInt GetAbsenceDays(LongInt,string,date,date,var LongInt,var LongInt);
external function LongInt GetCalendarDays(date,date);
external function val GetMinSalary(date);
external function val GetAbsenceFBDaysForPeriod(LongInt,string,date,date,var integer,var integer);
external function val GetSalaryFBSumForPeriod(LongInt,date,date);
external function boolean GetNextCalcPayrollSerNr(date,var LongInt);
external function LongInt GetMonthDiff(Date,Date);
external procedure PasteCPrwFromContrrw(var record CalcPayrollVc,var row CalcPayrollVc,record ContractVc,row ContractVc,var integer,integer,integer,integer,boolean);
external function integer GetPaymTypeFlag(string);
external function roundmode GetSalaryRoundMode(string);
external function val GetStandingChargeSum(record ContractVc,date,boolean);
external updating procedure DoCPRun(record RcVc,var record CalcPayrollVc,var array val,var array val);
external procedure CPFSumUp(record RcVc,record CalcPayrollVc,var array val);
external function LongInt GetCalendarDays(date,date);
external function boolean No6Month(longint,date);

global
function integer CheckCalcmethod(record ContractVc Contrr,date abssd,date monthsdate,date monthedate,var val sumtot,var val sumperday,var val vacdays)
begin  
  record PaymTypeVc PTr;
  row ContractVc Contrrw;
  integer res,rwcnt,i,caldays;
  Boolean testf;

  res = 0;
  rwcnt = MatRowCnt(Contrr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Contrr,i,Contrrw);
    if (nonblank(Contrrw.PosCode)) then begin
      testf = true;
      if (nonblank(abssd) and nonblank(Contrrw.EDate)) then begin
        if (DateInRange(abssd,Contrrw.SDate,Contrrw.EDate)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        PTr.Code = Contrrw.PaymTypeCode;
        if (ReadFirstMain(PTr,1,true)) then begin
          if ((PTr.CalcTypeFlag==0) or (PTr.CalcTypeFlag==1)) then begin //Fikseeritud summa v›i Proportsionaalselt tšštatud ajaga
            sumtot = Contrrw.LoadSum;
            //caldays = ((GetCalendarDays(monthsdate,monthedate))-(GetExceptDays(monthsdate,monthedate)));
            //sumperday = (sumtot/caldays);
            res = 4; //res = 6; //Bk, ts 2020/06 //palga jŠtkumine
          end;
          if (PTr.CalcTypeFlag==2) then begin //Tššajatabel
            sumperday = Contrrw.LoadSum;
            //vacdays = vacdays*8; //8 tundi tššpŠevas //Bk, ts 2020/06
            //Bk - start: ts 2020/06
            if (PTr.CalcMethodFlag==4) then begin
              sumperday = 0;
            end;
            //Bk - end
            res = 7;
          end;
          if (PTr.CalcTypeFlag==3) then begin //TŸkitšš
            sumtot = 0;
          end;
          i = rwcnt;
        end;
      end;
    end;
  end;
  CheckCalcmethod = res;
  return;
end;

global
procedure GetVacCPrw(var record CalcPayrollVc CPr,var row CalcPayrollVc CPrw,record ContractVc Contrr,date sd,date ed,boolean nocpf,var integer calcmethod,var date edate,var val vacdays,date specdate,boolean finalcpf)
begin  
  integer months,absfbworkdays,abscalfbnoexcdays;
  date monthsdate,monthedate,sdate;
  val sumtot,sumperday,sumtmp,sum1tmp,minsalary;
  longint caldays,absworkdays,abscaldays,workdaysnorm,workdays,daystmp,abscalnoexcdays,absfbdays;

  if (calcmethod>0) then begin
    months = 6;
    if (GetBackXMonthsPeriod(sdate,edate,months)) then begin
      if (nocpf) then begin
        sdate = specdate;
        edate = sdate;
        sdate.day = 1;
        edate.day = DaysInMonth(GetYear(edate),GetMonth(edate));
      end;
      if (GetRightPeriod(sdate,edate,Contrr.StartDate,Contrr.EndDate)) then begin
        //Bk - start: ts 2020/06
        if (finalcpf) then begin //l›pparve
          if (AddMonth(edate,-6)<Contrr.StartDate) then begin
            sdate = Contrr.StartDate;
            edate = CPr.EndDate;
          end;
        end;
        //Bk - end
        monthsdate = CPr.CalcDate;
        if (nocpf) then begin
          monthsdate = sdate;
        end;
        monthsdate.day = 1;
        monthedate = monthsdate;
        monthedate.day = DaysInMonth(GetYear(monthedate),GetMonth(monthedate));
        workdaysnorm = GetWorkingDays(monthsdate,monthedate);
        sumtot = GetCPSumForPeriod(Contrr.SerNr,sdate,edate);
        sumtot = sumtot + GetSalaryFBSumForPeriod(Contrr.SerNr,sdate,edate);
        abscaldays = GetAbsenceDays(Contrr.SerNr,"",sdate,edate,absworkdays,abscalnoexcdays);
        absfbdays = GetAbsenceFBDaysForPeriod(Contrr.SerNr,"",sdate,edate,absfbworkdays,abscalfbnoexcdays);
        if (finalcpf==false) then begin //kui ei ole l›pparve
          vacdays = ((GetCalendarDays(sd,ed)) - (GetExceptDays(sd,ed)));      
        end;
        if (nocpf) then begin
          calcmethod = CheckCalcmethod(Contrr,sd,monthsdate,monthedate,sumtot,sumperday,vacdays);
        end;
        switch (calcmethod) begin
          case 1: 
            workdays = (GetWorkingDays(sdate,edate)-(absworkdays+absfbworkdays));
            sumperday = (sumtot/workdays);
          case 2: 
            caldays = ((GetCalendarDays(sdate,edate))-(GetExceptDays(sdate,edate))-abscalnoexcdays-abscalfbnoexcdays);
            sumperday = (sumtot/caldays);
          case 3: 
            caldays = (GetCalendarDays(sdate,edate) - abscaldays - absfbdays);
            sumperday = (sumtot/caldays);
          case 4:
            //see below
          case 5: 
            minsalary = GetMinSalary(monthsdate); //date?
            sumperday = (minsalary/workdaysnorm);
            if (finalcpf==false) then begin //kui ei ole l›pparve
              vacdays = GetWorkingDays(sd,ed);
            end;
        end;
        if ((calcmethod==4) or ((calcmethod==2) and (No6Month(Contrr.SerNr,sd)==false))) then begin
          sum1tmp = GetStandingChargeSum(Contrr,CPr.CalcDate,nocpf);
          sumtmp = (sum1tmp/workdaysnorm);
          if (finalcpf==false) then begin
            daystmp = GetWorkingDays(sd,ed);
          end;
          if (calcmethod==2) then begin
            if ((sumtmp*daystmp)>(sumperday*vacdays)) then begin
              sumperday = sumtmp;
              if (finalcpf==false) then begin
                vacdays = daystmp;
              end; 
            end;
          end else begin //calcmethod = 4
            sumperday = sumtmp;
            if (finalcpf==false) then begin
              vacdays = daystmp;
            end;
          end;
        end;
        CPrw.Tariff = sumperday;
        CPrw.Tariff = round(CPrw.Tariff,GetSalaryRoundMode("2"));
        CPrw.Amount = vacdays;
        CPrw.BrutoSum = (CPrw.Tariff*CPrw.Amount);
        CPrw.NetoSum = 0;
      end;
    end;
  end else begin //ei tasustata
    CPrw.Tariff = 0;
    CPrw.Amount = 0;
    CPrw.BrutoSum = (CPrw.Tariff*CPrw.Amount);
    CPrw.NetoSum = 0;  
  end;
L1:;
  return;
end;

procedure PasteVacCPrwFromAbsr(record CalcPayrollVc CPr,record AbsenceVc Absr,record ContractVc Contrr,date sd,date ed,string paymtypecode,date paymdate,date specdate,Integer vacperstart)
begin  
  record PaymTypeVc PTr;
  row CalcPayrollVc CPrw;
  integer calcmethod,paymflag;
  date edate;
  val tmpval;
  boolean nocpf;

  CPrw.PosCode = "";
  CPrw.PaymTypeCode = paymtypecode;
  PTr.Code = CPrw.PaymTypeCode;
  if (ReadFirstMain(PTr,1,true)) then begin
    CPrw.PaymTypeName = PTr.Name;
    calcmethod = PTr.CalcMethodFlag;
    paymflag = PTr.PaymFlag;
  end;
  if (paymflag!=0) then begin //ei kuulu vŠljamaksmisele
    goto L1;
  end;
  CPrw.SDate = CPr.StartDate;
  CPrw.EDate = CPr.EndDate;
  CPrw.ObjCode = Absr.ObjCode;
  CPrw.AbsNr = Absr.SerNr;
  edate = Absr.StartDate;
  if (vacperstart!=0) then begin
    edate = AddMonth(Absr.StartDate,-1);
  end;
  if (GetCPSumForPeriod(Absr.ContrSerNr,Contrr.StartDate,Absr.StartDate)==0) then begin
    nocpf = true; //uus tšštaja -> ei ole arvestuskaarte
  end;
  GetVacCPrw(CPr,CPrw,Contrr,sd,ed,nocpf,calcmethod,edate,tmpval,specdate,false);
  MatRowInsert(CPr,0,CPrw);
L1:;
  return;
end;

global
updating procedure PasteVacCProws(record RcVc RepSpec,record ContractVc Contrr,var record CalcPayrollVc CPr,var array val CPSums)
begin
  row CalcPayrollVc CPrw;
  row ContractVc Contrrw;
  record AbsenceVc Absr;
  record AbsTypeVc ATr;
  string 20 paymtypecode;
  boolean TrHs,testf;
  integer rwcnt,j,i,cprwnr,monthcnt;
  date contrsdate,contredate,sdate,edate,cdate,sd,ed,paymdate,specdate;

  cprwnr = 0;
  contrsdate = RepSpec.sStartDate;
  contredate = RepSpec.sEndDate;
  paymdate = RepSpec.d1;
  testf = GetRightPeriod(contrsdate,contredate,Contrr.StartDate,Contrr.EndDate);
  if (testf) then begin
  //Puhkused
    TrHs = true;
    ResetLoop(Absr);
    Absr.ContrSerNr = Contrr.SerNr;
    Absr.OKFlag = 1;
    Absr.StartDate = contrsdate;
    while (LoopKey("ContrSerNrSDate",Absr,3,TrHs)) begin
      if (Absr.ContrSerNr!=Contrr.SerNr) then begin
        TrHs = false;
      end;
      if (Absr.OKFlag!=1) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        testf = true;
        if (Absr.StartDate>contredate) then begin
          testf = false;
        end;
        if (Absr.CalcSerNr>0) then begin
          testf = false;
        end;
        if (testf) then begin
          ATr.Code = Absr.AbsTypeCode;
          if (ReadFirstMain(ATr,1,true)) then begin
            if (ATr.AbsTypeFlag!=0) then begin
              testf = false; 
            end;
            paymtypecode = ATr.PaymTypeCode;
            if blank(paymtypecode) then begin
              testf = false; 
            end;
            if (testf) then begin
              sdate = contrsdate;
              edate = sdate;
              edate.day = DaysInMonth(GetYear(sdate),GetMonth(sdate));
              sd = Absr.StartDate;
              ed = Absr.EndDate;
              monthcnt = GetMonthDiff(Absr.StartDate,Absr.EndDate);
              for (i=1;i<=monthcnt;i=i+1) begin
                RecordNew(CPr);   
                CPr.ContrSerNr = Contrr.SerNr;
                CPr.CalcDate = RepSpec.sEndDate;
                CPr.StartDate = contrsdate;
                CPr.EndDate = contredate;
                CPr.PaymDate = paymdate;
                CPr.Firstname = Contrr.Firstname;
                CPr.Surname = Contrr.Surname;
                if (monthcnt>1) then begin
                  CPr.CalcDate = edate;
                  CPr.StartDate = sdate;
                  CPr.EndDate = edate;
                  ed = sd;
                  ed.day=DaysInMonth(GetYear(ed),GetMonth(ed));
                  if (ed>Absr.EndDate) then begin
                    ed = Absr.EndDate;                                
                  end;
                end;
                if (GetNextCalcPayrollSerNr(CPr.CalcDate,CPr.SerNr)) then begin end;
                PasteVacCPrwFromAbsr(CPr,Absr,Contrr,sd,ed,paymtypecode,paymdate,contrsdate,RepSpec.flags[11]);
                //Kontroll, kas on KohtutŠituri summad
                cprwnr = cprwnr + 1;
                rwcnt = MatRowCnt(Contrr);
                for (j=0;j<rwcnt;j=j+1) begin
                  MatRowGet(Contrr,j,Contrrw);
                  if (nonblank(Contrrw.PosCode)) then begin
                    if (GetPaymTypeFlag(Contrrw.PaymTypeCode)==3) then begin //Tasuliigi tŸŸp: KohtutŠitur (kinnip.neto)
                      PasteCPrwFromContrrw(CPr,CPrw,Contrr,Contrrw,cprwnr,0,0,1,true);
                    end;                                         
                  end;
                end; 
                PasteCPrTaxes(CPr,2,0,0,0,RepSpec.flags[11],false);
                PasteCPrTaxes(CPr,0,0,0,0,0,true);
                CPrSumUp(CPr);
                if (MatRowCnt(CPr)>0) then begin
                  if (RepSpec.repname=="CPForecastRn") then begin
                    CPFSumUp(RepSpec,CPr,CPSums);     
                  end else begin
                    if (RecordInsert(CPr,true)) then begin end; 
                  end; 
                end;
                edate = AddMonth(edate,1);
                edate.day = DaysInMonth(GetYear(edate),GetMonth(edate));
                sdate = edate;
                sdate.day = 1;
                sd = sdate;
              end;
            end;
          end;
        end;
      end;
    end;                
  end;
  return;
end;

global
updating procedure CreateVacCalcPayrollMn(record RcVc RepSpec)
begin
  record CalcPayrollVc CPr;
  array val CPSums;
  array val CPSumsTot;

   DoCPRun(RepSpec,CPr,CPSums,CPSumsTot);
  return;
end;
