external function Boolean SetInSet2(string,string);
external function Integer CountObjects(string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external function roundmode GetSalaryRoundMode(string);
external procedure PasteOTrwsFromContrr(record OpenTransVc,var row OpenTransVc,record ContractVc,var integer);
external function string 255 GetPaymTypeName(string);
external procedure OTSumup(var record OpenTransVc);
external procedure PSFindPaydAmount2(record IVVc,record IPrsVc,Boolean,var val,var val,var Date);

procedure PSFindPaydAmountCLIn(record IPrsVc IPrsp,var val ap,var Date dp)
BEGIN
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  
  ap = 0;
  CLInr.SerNr = IPrsp.TransNr;
  if (ReadFirstMain(CLInr,1,true)) then begin
    rwcnt = MatRowCnt(CLInr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLInr,i,CLInrw);
      if (CLInrw.Type==1) then begin
        if (CLInrw.TransNr==IPrsp.IVNr) then begin
          if (CLInr.TransDate==IPrsp.CustDate) then begin
            ap = CLInrw.Sum + ap;
          end;    
          dp = CLInr.TransDate;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure PSFindPaydAmountPurgeTR(record IPrsVc IPrsp,var val ap,var Date dp)
begin
  record PurgeTRVc PurgeTRr;
  Integer i,rwcnt;
  
  ap = 0;
  PurgeTRr.Number = IPrsp.TransNr;
  PurgeTRr.IntYc = IPrsp.IntYc;
  PurgeTRr.TransRow = IPrsp.TransRow;
  if (ReadFirstMain(PurgeTRr,3,true)) then begin
    if (PurgeTRr.SerNr==IPrsp.IVNr) then begin
      if (PurgeTRr.TransDate==IPrsp.CustDate) then begin
        ap = ap + (PurgeTRr.DebVal - PurgeTRr.CredVal);
      end;    
      dp = PurgeTRr.TransDate;
    end;
  end;
  return;
end;

procedure PSFindPaydAmountTR(record IPrsVc IPrsp,var val ap,var Date dp)
begin
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  
  ap = 0;
  TRr.Number = IPrsp.TransNr;
  TRr.IntYc = IPrsp.IntYc;
  if (ReadFirstMain(TRr,2,true)) then begin
    rwcnt = MatRowCnt(TRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TRr,i,TRrw);
        if (TRrw.SerNr==IPrsp.IVNr) then begin
          if (TRr.TransDate==IPrsp.CustDate) then begin
            ap = ap + (TRrw.DebVal - TRrw.CredVal);
          end;    
          dp = TRr.TransDate;
        end;
    end;
  end;
  return;
end;

procedure CalcBonus(string art,string user,val userbonus,string cu,val sum,var val pp,var val bp,Integer flags1)
begin
  record INVc INr;
  record CUVc CUr;
  record BonusDefVc BonusDefr;
  row BonusDefVc BonusDefrw;
  integer i,rwcnt;
  boolean foundf;
  boolean skipf;
  val reb;
  
  bp = 0;
  pp = blankval;
  reb = 0;
  CUr.Code = cu;
  if (ReadFirstMain(CUr,1,true)) then begin
    foundf = true;
    BonusDefr.UserCode = user;
    while (LoopMain(BonusDefr,1,foundf)) begin
      skipf = false;
      if (nonblank(BonusDefr.UserCode)) and (BonusDefr.UserCode != user) then begin
        foundf = false;
        skipf = true;
      end;
      if (nonblank(BonusDefr.CustCode)) and (BonusDefr.CustCode != CUr.Code) then begin
        skipf = true;
      end;
      if (nonblank(BonusDefr.CustCat)) and (BonusDefr.CustCat != CUr.CustCat) then begin
        skipf = true;
      end;
      if (foundf) and (skipf==false) then begin
        rwcnt = MatRowCnt(BonusDefr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(BonusDefr,i,BonusDefrw);
          if (BonusDefrw.CodeType == 0) then begin
            INr.Code = art;
            if (ReadFirstItem(art,INr,true,true)) then begin
              if (INr.Bonus==0) then begin
                if (INr.Group==BonusDefrw.ItemCode) then begin
                  pp = BonusDefrw.BonusPrc;
                end;
              end else begin
                pp = INr.Bonus;
              end;
            end;
          end else begin
            INr.Code = art;
            if (ReadFirstItem(art,INr,true,true)) then begin
              if (INr.Bonus==0) then begin
                if (INr.Code==BonusDefrw.ItemCode) then begin
                  pp = BonusDefrw.BonusPrc;
                end;
              end else begin
                pp = INr.Bonus;
              end;
            end;
          end; 
        end;
        if (blank(pp)) then begin
          pp = BonusDefr.BonusPrc;
        end;
      end;      
    end;
  end;
  switch (flags1) begin
    case 0:
      if (blank(pp)) then begin
        pp = userbonus;
      end;
    case 1:
      if (pp==0) then begin
        INr.Code = art;
        if (ReadFirstItem(art,INr,true,true)) then begin
          if (INr.Bonus!=0) then begin
            pp = INr.Bonus;
          end;
        end;
        if (blank(pp)) then begin
          pp = userbonus;
        end;
      end;
  end;
  if ((pp>=-100) and (pp<=100)) then begin
    reb = pp/100;
    bp = sum*reb;
  end;
  return;
end;

procedure AddRptResults(var val totbonusbase,var val totbon,var val totcost,var val totsales,var val totrowsum,
                        val rowbonusbase,val rowsales,val rowbon,var val totcred,val rowcred,val rowcost,val rowsum)
BEGIN
  totbon = totbon + rowbon;
  totbonusbase = totbonusbase + rowbonusbase;
  totsales = totsales + rowsales;
  totcred = totcred + rowcred;
  totcost = totcost + rowcost;
  totrowsum = totrowsum + rowsum;
  RETURN;
END;

procedure BonusRptResults(record RcVc RepSpec,string salesman,string salesmanname,val rowbonusbase,val rowsales,val rowbon,val rowcred,val rowcost,val userrowsum)
begin
  val sales;

  if (RepSpec.flags[0]!=0) then begin
    sales = rowbonusbase + rowcred;
    if (sales==0) then begin 
      sales = blankval;
    end;  
  end;  
  return;
end;

procedure GetBonusPaid(record RcVc RepSpec,record UserVc Userr,var val totbonusbase,var val totbon,var val totcred,var val totcost,var val totsales,var val totrowsum,var Boolean headerfp)
begin
  record ARVc ARr;
  record IVVc IVr;
  row IVVc IVrw;
  record IPrsVc IPrsr;
  Boolean found,testf;
  Boolean firstf;
  vector Boolean CUPAddedf;
  val rowbon,rowbonusbase,rowsales,rowsum;
  val rowcred,v,rowcost;
  val bonus,bprcnt,rs,paid,t,sales,tb1,cost;
  val payprc,preayv;
  Integer rwcnt,i;
  Date paydate;
  string 255 argnr;
  record INVc INr;
  val ivbb,ivsales,ivbprcnt,ivbon,ivbprccnt,ivcost;
  val base,nrofsalesman;
  record TaxMatrixVc TMr;
  val x,y;
  val totinvgp;

  firstf = true;
  IPrsr.TransDate = RepSpec.sStartDate;
  found = true;
  while (LoopKey("TransDate",IPrsr,1,found)) begin
    testf = false;
    if (found) then begin
      if ((nonblankdate(RepSpec.sEndDate)) and (IPrsr.TransDate>RepSpec.sEndDate)) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;
      if (IPrsr.TransType==kIPrsTransTypeCashOut) then begin testf = false; end;
      if (IPrsr.TransType==kIPrsTransTypeReverseCustomerPrepayment) then begin testf = false; end;

      if (IPrsr.TransType==kIPrsTransTypeInvoice) then begin 
        IVr.SerNr = IPrsr.IVNr;
        testf = ReadFirstMain(IVr,1,true);
        if (nonblank(RepSpec.ObjStr)) then begin
          if (SetInSet2(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
        end;
        if (testf) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or ((IVrw.stp==kInvoiceRowTypeDownpayment) and (RepSpec.flags[10]==1)) then begin
              if (nonblank(IVrw.Salesmen)) then begin
                if (SetInSet(Userr.Code,IVrw.Salesmen)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end else begin
                if (SetInSet(Userr.Code,IVr.SalesMan)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end;
            end;
          end;
        end;

        if (testf) then begin
          ARr.InvoiceNr = IVr.SerNr;
          if (ReadFirstMain(ARr,1,true)) then begin end;
          if (true) then begin 
            if (ARr.BookRVal==IVr.BaseSum4) then begin 
              testf = false; 
            end else begin
              if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
                testf = false; 
              end;
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
                  if (IVrw.CUPNr!=-1) then begin
                    testf = true; 
                    i = rwcnt; 
                  end;
                end;
              end;
            end;
          end;
        end;      
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) or (IPrsr.TransType==kIPrsTransTypeCashIn) or (IPrsr.TransType==kIPrsTransTypeNLTransaction) or (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        IVr.SerNr = IPrsr.IVNr;
        testf = ReadFirstMain(IVr,1,true);
        if (testf) then begin
          if (IVr.OKFlag==0) then begin testf = false; end;
          if (IVr.Invalid!=0) then begin testf = false; end;
          if (nonblank(RepSpec.ObjStr)) then begin
            if (SetInSet2(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or ((IVrw.stp==kInvoiceRowTypeDownpayment) and (RepSpec.flags[10]==1)) then begin
              if (nonblank(IVrw.Salesmen)) then begin
                if (SetInSet(Userr.Code,IVrw.Salesmen)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end else begin
                if (SetInSet(Userr.Code,IVr.SalesMan)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end;
            end;
          end;
        end;
      end;     
    end;
    if (testf) then begin      
      paid = blankval;
      rwcnt = MatRowCnt(IVr);
      if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        paid = IVr.Sum4;
      end else begin
        if (CUPAddedf[IVr.SerNr]==false) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
              if (IVrw.CUPNr!=-1) then begin
                if (DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
                  paid = paid + IVrw.Sum;
                  CUPAddedf[IVr.SerNr] = true;
                end;
              end;
            end;
          end;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin
        PSFindPaydAmount2(IVr,IPrsr,false,t,tb1,paydate);
        paid = paid + t;
      end;
      if (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        PSFindPaydAmountPurgeTR(IPrsr,t,paydate);      
        paid = paid + t;
      end;
      if (IPrsr.TransType==kIPrsTransTypeNLTransaction) then begin
        PSFindPaydAmountTR(IPrsr,t,paydate);      
        paid = paid + t;
      end;
      if (IPrsr.TransType==kIPrsTransTypeCashIn) then begin
        PSFindPaydAmountCLIn(IPrsr,t,paydate);      
        paid = paid + t;
      end;
      if (paid==IVr.Sum4) then begin
        payprc = 1;
      end else begin
        if (paid>=0) then begin
          payprc = paid/IVr.Sum4;
        end else begin
          if (-paid==IVr.Sum4) then begin
            payprc = -1;
          end else begin
            payprc = paid/IVr.Sum4;
          end;
        end;
      end; 
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        paid = -paid;
      end;      
      preayv = blankval;
      if (paid==0) then begin
        testf = false;
      end;
      if (RepSpec.flags[10]==0) then begin
        if (IVr.InvType==kInvoiceTypeDownpayment) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        nrofsalesman = CountObjects(IVr.SalesMan);
        ivbb = blankval;
        ivsales = blankval;
        ivbprcnt = blankval;
        ivbprccnt = 0;
        ivbon = blankval;
        ivcost = blankval;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          testf = true;
          if (nonblank(IVrw.Salesmen)) then begin
            if (SetInSet(Userr.Code,IVrw.Salesmen)==false) then begin testf = false; end;
          end else begin
            if (SetInSet(Userr.Code,IVr.SalesMan)==false) then begin testf = false; end;
          end;

          if (((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeDownpayment)) and (testf)) then begin
            if (IVrw.Sum!=0) then begin
              firstf = false;
              v = IVrw.Sum - (IVrw.Sum*preayv)/IVr.Sum4;
              sales = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              if (RepSpec.flags[0]==0) then begin
                v = IVrw.Sum - (IVrw.Sum*preayv)/IVr.Sum4;
                rs = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              end else begin
                rs = IVrw.rowGP - (IVrw.rowGP*preayv)/IVr.Sum4;
              end;
              UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
              rs = rs*payprc;
              if (RepSpec.flags[0]!=0) then begin
                sales = rs;
              end else begin
                FindSalesExVat(TMr,IVrw.VATCode,rs,IVr.InclVAT,IVr.NoTAXonVAT,rs);
              end;
              base = rs / nrofsalesman;
              cost = IVrw.Quant*IVrw.BasePrice;
              CalcBonus(IVrw.ArtCode,Userr.Code,Userr.Bonus,IVr.CustCode,base,bprcnt,bonus,RepSpec.flags[1]);
              if ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (base>0)) then begin
                bonus = -bonus;
                IVrw.Sum = -IVrw.Sum;
                sales = -sales;
                rs = -rs;
                base = -base;
                cost = -cost;
                IVrw.BasePrice = -IVrw.BasePrice;
              end;
              rowbonusbase = rowbonusbase + rs;
              rowsales = rowsales + sales;
              rowbon = rowbon + bonus;
              rowcost = rowcost + cost;
            end;
          end;
        end;
      end;
    end;
  end;
  if (firstf==false) then begin
    AddRptResults(totbonusbase,totbon,totcost,totsales,totrowsum,rowbonusbase,rowsales,rowbon,totcred,rowcred,rowcost,rowsum);
    BonusRptResults(RepSpec,Userr.Code,Userr.Name,rowbonusbase,rowsales,rowbon,rowcred,rowcost,rowsum);
    rowbonusbase = blankval;
  end;
  return;
end;

procedure GetBonus(record RcVc RepSpec,var val totbon)
begin
  record UserVc Userr;
  val totcred,totcost,totsales,totrowsum,totbonusbase;
  Boolean headerfp;

  Userr.Code = RepSpec.f1;
  if ReadFirstMain(Userr,1,true) begin
    GetBonusPaid(RepSpec,Userr,totbonusbase,totbon,totcred,totcost,totsales,totrowsum,headerfp);
  end;
  return;
end;

global
updating procedure CreateOpenTransFrSLBonusMn(record RcVc RepSpec)
begin
  record ContractVc Contrr;
  record EmplVc Emplr;
  record UserVc Userr;
  record IVVc IVr;
  row IVVc IVrw;
  record OpenTransVc OTr;
  row OpenTransVc OTrw;
  boolean found,testf,tmp;
  string 20 empl,user,idcode,tstr;
  string 60 salesman;
  val bon,rs,base,gp,rowsum,tmpval,bprcnt;
  integer i,rwcnt,nrofsalesman,pos,acnt,apos;
  vector val vUserpos;
  array string 20 aUser;
  array string 60 aIDCode;
  array val aBonusval,aUserbonus;
  record TaxMatrixVc TMr;
  record RcVc RepSpec2;

  acnt = 0;
  if (nonblank(RepSpec.f2)) then begin
    Contrr.SerNr = RepSpec.f2;
    if (ReadFirstMain(Contrr,1,true)) then begin
      empl = Contrr.EmplCode;
    end;
  end;
  if (nonblank(RepSpec.f1)) then begin
    empl = RepSpec.f1;
  end;
  if (nonblank(empl)) then begin
    Emplr.Code = empl;
    if (ReadFirstMain(Emplr,1,true)) then begin
      idcode = Emplr.IDCode;
    end;
    found = true;
    Userr.Code = "";
    while (LoopMain(Userr,1,found)) begin
      if (Userr.IDCode==idcode) then begin
        user = Userr.Code;
        aUser[acnt] = Userr.Code;
        aBonusval[acnt] = Userr.Bonus;
        aIDCode[acnt] = Userr.IDCode;
        acnt = acnt + 1;
        found = false;
      end;
    end;
  end else begin
    Userr.Code = "";
    while (LoopMain(Userr,1,true)) begin
      if (Userr.Closed==0) then begin
        aUser[acnt] = Userr.Code;
        aBonusval[acnt] = Userr.Bonus;
        aIDCode[acnt] = Userr.IDCode;
        vUserpos[Userr.Code] = acnt;
        acnt = acnt + 1;
      end;
    end;  
  end;

  if (RepSpec.flags[2]==0) then begin //Perioodil tehtud arved
    found = true;
    IVr.InvDate = RepSpec.sStartDate;
    while (LoopKey("InvDate",IVr,1,found)) begin
      if (DateInRange(IVr.InvDate,RepSpec.sStartDate,Repspec.sEndDate)==false) then begin
        testf = false;
      end;
      if (found) then begin
        testf = true;
        if (IVr.OKFlag==0) then begin testf = false; end;
        if (IVr.InvType==kInvoiceTypePrepayment) then begin testf = false; end;
        if (IVr.Invalid!=0) then begin testf = false; end; 
        if (nonblank(RepSpec.ObjStr)) then begin
          if (SetInSet2(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
        end;
        if (testf) and (nonblank(user)) then begin
          testf = false;
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) or ((IVrw.stp==kInvoiceRowTypeDownpayment) and (RepSpec.flags[10]==1)) then begin
              if (nonblank(IVrw.Salesmen)) then begin
                if (SetInSet(user,IVrw.Salesmen)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end else begin
                if (SetInSet(user,IVr.SalesMan)) then begin 
                  testf = true; 
                  i = rwcnt;
                end;
              end;
            end;
          end;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            testf = true;
            if ((IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) and (IVrw.stp!=kInvoiceRowTypeCorrection) and (IVrw.stp!=kInvoiceRowTypeDownpayment)) then begin testf = false; end; 
            if (testf) and (nonblank(user)) then begin
              testf = false; 
              if (nonblank(IVrw.Salesmen)) then begin
                if (SetInSet(user,IVrw.Salesmen)) then begin 
                  testf = true; 
                end;
              end else begin
                if (SetInSet(user,IVr.SalesMan)) then begin 
                  testf = true; 
                end;
              end;
            end;
            if (testf) then begin
              if (nonblank(IVrw.Salesmen)) then begin
                nrofsalesman = CountObjects(IVrw.Salesmen);
                salesman = IVrw.Salesmen;          
              end else begin
                nrofsalesman = CountObjects(IVr.SalesMan);
                salesman = IVr.SalesMan;  
              end;
              if (IVrw.stp==kInvoiceRowTypeCorrection) then begin
                IVrw.Sum = -IVrw.Sum;
                IVrw.BasePrice = -IVrw.Sum;
                IVrw.rowGP = -IVrw.rowGP;
              end;
              rowsum = 0;
              if (IVrw.Sum!=0) or (IVrw.BasePrice!=0) then begin
                rowsum = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                FindSalesExVat(TMr,IVrw.VATCode,rowsum,IVr.InclVAT,IVr.NoTAXonVAT,rowsum);
                if (RepSpec.flags[0]!=0) then begin
                  rs = IVrw.rowGP;//already in base 1
                end else begin
                  rs = rowsum;
                end;
                base = rs / nrofsalesman;
                if (nonblank(user)) then begin
                  CalcBonus(IVrw.ArtCode,user,aBonusval[0],IVr.CustCode,base,bprcnt,bon,RepSpec.flags[1]);
                  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                    bon = -bon;
                  end;
                  aUserbonus[0] = aUserbonus[0] + bon;         
                end else begin
                  pos = 0;
                  ExtractObj(salesman,pos,tstr);
                  while (nonblank(tstr)) begin
                    apos = vUserpos[tstr];
                    CalcBonus(IVrw.ArtCode,aUser[apos],aBonusval[apos],IVr.CustCode,base,bprcnt,bon,RepSpec.flags[1]);
                    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                      bon = -bon;
                    end;
                    aUserbonus[apos] = aUserbonus[apos] + bon;
                    ExtractObj(salesman,pos,tstr);
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin //Perioodil makstud arved
    for (i=0;i<acnt;i=i+1) begin
      bon = 0;
      RepSpec.f1 = aUser[i];
      GetBonus(RepSpec,bon);    
      aUserbonus[i] = bon;
    end;
  end;

  rwcnt = 0;
  RecordNew(OTr);
  OTr.TransDate = RepSpec.d1;
  OTr.PaymTypeCode = RepSpec.f3;
  OTr.Comment = GetPaymTypeName(OTr.PaymTypeCode);
  for (i=0;i<acnt;i=i+1) begin
    if (aUserbonus[i]>0) then begin
      Emplr.IDCode = aIDCode[i];
      if (ReadFirstKey("IDCode",Emplr,1,true)) then begin
        if (Emplr.ClosedFlag==0) then begin
          ResetLoop(Contrr);
          found = true;
          Contrr.Status = 1;
          Contrr.EmplCode = Emplr.Code;
          while (LoopKey("Status",Contrr,2,found)) begin
            if (Contrr.Status!=1) then begin
              found = false;
            end;
            if (Contrr.EmplCode!=Emplr.Code) then begin
              found = false;
            end;
            if (found) and (Contrr.CalcBonusFlag==1) then begin
             ClearRow(OTr,OTrw,1);
              PasteOTrwsFromContrr(OTr,OTrw,Contrr,rwcnt);
              MatRowGet(OTr,rwcnt-1,OTrw);
              OTrw.Tariff = aUserbonus[i];
              OTrw.Amount = 1;
              OTrw.Sum = round((OTrw.Tariff*OTrw.Amount),GetSalaryRoundMode("2"));
              MatRowPut(OTr,rwcnt-1,OTrw);
              found = false;
            end;
          end;
        end;
      end;
    end;
  end;
  if (MatRowCnt(OTr)>0) then begin
    OTSumup(OTr);
    OTr.SerNr = NextSerNr("OpenTransVc",OTr.TransDate,-1,false,"");
    if (RecordStore(OTr,false)) then begin end;
  end;
LCreateOpenTransFrSLBonusMn:;
  return;
end;
