external function boolean IsVacAbsTypeFlag(string);
external function LongInt GetCalendarDays(date,date);
external function LongInt GetWorkingDays(Date,Date);
external function boolean GetBackXMonthsPeriod(var date,var date,integer);
external function boolean GetRightPeriod(var date,var date,date,date);
external function LongInt GetExceptDays(date,var date);
external function val GetMinSalary(date);
external function string 20 GetVacAbsTypeCode(LongInt);
external function roundmode GetSalaryRoundMode(string);
external function LongInt GetAbsenceDays(LongInt,string,date,date,var LongInt,var LongInt);
external function string 20 GetIllAbsTypeCode(var integer,var integer,var val);
external procedure EmptyRow;
external function string 10 MonthYearStr(date);

global
procedure IllCalcRn(record RcVc RepSpec)
begin
  record AbsenceVc Absr,Abs2r;  
  record AbsTypeVc ATr;
  record PaymTypeVc PTr,PT2r;
  record ContractVc Contrr;
  record SalaryFBVc SFBr;
  row SalaryFBVc SFBrw;
  record AbsenceFBVc AFBr;
  row AbsenceFBVc AFBrw;
  record CalcPayrollVc CPr;
  row CalcPayrollVc CPrw;
  string 255 tstr,paymtypecode;
  integer rw,rwcnt,i;
  integer tmpint,caldays,vaccaldays,workdays,caldaystot,workdaystot,abscaldays,absfbcaldaystot,absfbcaldays;
  integer absfbworkdaystot,abscaldaystot,absworkdaystot,absfbworkdays;
  val perc,bruto,fbbrutotot,brutotot,vacbrutotot,vacscbrutotot,tmpval1,tmpval2,tmpval3,tmpval4,sumperday;
  LongInt contrsernr,abscalnoexcdays,absworkdays;
  date paymdate,sdate,edate,sd,ed;
  boolean TrHs,testf;

  rw = 1;
  StartReportJob(USetStr(1500585));
  tstr = USetStr(1500397) & ":  " & RepSpec.f1;
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = USetStr(1500536) & ":  " & RepSpec.d1;
  Header(rw,tstr,1);
  EndHeader;

  SetRepCol(2,70);
  SetRepCol(3,140);
  SetRepCol(4,210);
  SetRepCol(5,280);
  SetRepCol(6,330);
  SetRepCol(7,440);
  SetRepCol(8,380);
  SetRepCol(9,350);
 
  bruto = 0;
  brutotot = 0;
  fbbrutotot = 0;
  vacbrutotot = 0;
  vacscbrutotot = 0;
  tmpint = 0;
  tmpval1 = 0;
  tmpval2 = 0;
  tmpval3 = 0;  
  tmpval4 = 0;  

  paymdate = RepSpec.d1;
  Absr.SerNr = RepSpec.f1;
  if (ReadFirstMain(Absr,1,true)) then begin
    if (Absr.AbsTypeCode==GetIllAbsTypeCode(tmpint,tmpint,perc)) then begin
      contrsernr = Absr.ContrSerNr;
      Contrr.SerNr = contrsernr;
      if (ReadFirstMain(Contrr,1,true)) then begin
        ATr.Code = Absr.AbsTypeCode;
        if (ReadFirstMain(ATr,1,true)) then begin
          paymtypecode = ATr.PaymTypeCode;
          PTr.Code = paymtypecode;
          if (ReadFirstMain(PTr,1,true)) then begin
            if (PTr.PaymFlag==0) then begin //kuulub vŠljamaksmisele

            //1. Puudumine
              StartFormat(15);
              tstr = USetStr(1500414) & ": ";
              OutString(0,"",tstr,false);
              OutLongInt(50,"DblContractVc",contrsernr,false);
              tstr = Absr.Firstname & " " & Absr.Surname;
              OutString(100,"",tstr,false);
              EndFormat;
              EmptyRow;
              Black_Divider(0,1);
              StartFormat(15);
              OutString(0,"",USetStr(1500522),false);
              EndFormat;
              EmptyRow;
              StartFormat(15);
              OutString(0,"",USetStr(1500397),false);
              OutString(2,"",USetStr(1500516),false);
              OutString(3,"",USetStr(1500517),false);
              OutString(4,"",USetStr(1500518),false);
              OutString(5,"",USetStr(1500519),false);
              OutString(6,"",USetStr(1500520),false);
              OutString(7,"",USetStr(1500399),true);
              OutString(1,"",USetStr(1500398),true);
              EndFormat;
              Gray_Divider(0,1);
              StartFormat(15);
              OutLongInt(0,"DblAbsenceVc",Absr.SerNr,false);
              OutString(2,"DblAbsTypeVc",Absr.AbsTypeCode,false);
              OutString(3,"",USetStr(1500587),false);
              OutString(4,"DblPaymTypeVc",paymtypecode,false);
              OutString(5,0,Absr.StartDate ,false);
              OutString(6,0,Absr.EndDate ,false);
              OutString(7,0,Absr.CalendarDays,true);
              OutString(1,0,Absr.WorkDays,true);
              EndFormat;
              Gray_Divider(0,1);
              EmptyRow;
              tstr = "alates:                kuni:";
              StartFormat(15);
              OutString(160,"",tstr,false);
              EndFormat;
              StartFormat(15);
              tstr = "Tasustamata haiguspŠevi:   " & Absr.Period1;
              OutString(140,"",tstr,true);
              OutString(160,"",Absr.StartDate1 & "        " & Absr.EndDate1,false);
              EndFormat;
              StartFormat(15);
              tstr = "Tššandja poolt tasustatud haiguspŠevi:   " & Absr.Period2;
              OutString(140,"",tstr,true);
              OutString(160,"",Absr.StartDate2 & "        " & Absr.EndDate2,false);
              EndFormat;
              StartFormat(15);
              tstr = "Haigekassa poolt tasustatud haiguspŠevi:   " & Absr.Period3;
              OutString(140,"",tstr,true);
              OutString(160,"",Absr.StartDate3 & "        " & Absr.EndDate3,false);
              EndFormat;
              EmptyRow;
              Black_Divider(0,1);

              //2. Periood
              StartFormat(15);
              OutString(0,"",USetStr(1500524),false);
              EndFormat;  
              EmptyRow;  
              ed = Absr.EndDate;
              StartFormat(15);
              tstr = "HaigushŸvitise arvestuse kuu:  " & MonthYearStr(ed);
              OutString(0,"",tstr,false);
              EndFormat;
              sd = ed;
              sd.day = 1;
              ed.day = DaysInMonth(GetYear(ed),GetMonth(ed));
              tstr = "HaigushŸvitise arvestuse kuu kalendripŠevi:  " & GetCalendarDays(sd,ed);
              StartFormat(15);
              OutString(0,"",tstr,false);
              EndFormat;
              tstr = "HaigushŸvitise arvestuse kuu tššpŠevade norm:  " & GetWorkingDays(sd,ed);
              StartFormat(15);
              OutString(0,"",tstr,false);
              EndFormat;
              EmptyRow;  
              Gray_Divider(0,220);
              StartFormat(15);
              OutString(0,"",USetStr(1500530),false);
              OutString(3,"",USetStr(1500529),true);
              OutString(4,"",USetStr(1500515),true);
              EndFormat;
              Gray_Divider(0,220);
              if (paymdate>Absr.StartDate) then begin
                edate = Absr.StartDate;
              end else begin
                edate = paymdate;
              end;
              if (GetBackXMonthsPeriod(sdate,edate,6)) then begin
                if (GetRightPeriod(sdate,edate,Contrr.StartDate,Contrr.EndDate)) then begin
                  sd = sdate;
                  while (sd<=edate) begin
                    sd.day = 1;
                    if (sd<Contrr.StartDate) then begin
                      sd = Contrr.StartDate;
                    end;
                    ed = sd;
                    ed.day = DaysInMonth(GetYear(ed),GetMonth(ed));
                    caldays = GetCalendarDays(sd,ed);
                    workdays = GetWorkingDays(sd,ed);
                    tstr = MonthYearStr(sd);
                    StartFormat(15);
                    OutString(0,"",tstr,false);
                    OutString(3,0,caldays,true);
                    OutString(4,0,workdays,true);
                    EndFormat;
                    caldaystot = caldaystot + caldays;
                    workdaystot = workdaystot + workdays;
                    sd = AddMonth(sd,1);
                  end;
                  if (caldaystot>0) or (workdaystot>0) then begin
                    Gray_Divider(60,220);
                    StartFormat(15);
                    OutString(0,0,"",false);
                    OutString(2,0,USetStr(1500453),false);
                    OutString(3,0,caldaystot,true);
                    OutString(4,0,workdaystot,true);
                    EndFormat;
                  end;
                end else begin
                  goto LIllCalcRn;
                end;
              end;
              EmptyRow;
              Black_Divider(0,1);

              //3. Algsaldod - tšštasud
              OutString(0,"",USetStr(1500525),false);
              EmptyRow;
              EmptyRow;
              StartFormat(15);
              OutString(0,"",USetStr(1500535),false);
              OutString(2,"",USetStr(1500530),false);
              OutString(4,"",USetStr(1500532),true);
              EndFormat;
              Gray_Divider(0,220);
              TrHs = true;  
              SFBr.OKFlag = 1;
              while (LoopKey("OKFlag",SFBr,1,TrHs)) begin
                if (SFBr.OKFlag!=1) then begin TrHs = false; end;
                if (TrHs) then begin
                  rwcnt = MatRowCnt(SFBr);
                  sd = sdate;
                  while (sd<=edate) begin 
                    sd.day = 1;
                    ed = sd;
                    ed.day = DaysInMonth(GetYear(ed),GetMonth(ed));
                    for (i=0;i<rwcnt;i=i+1) begin
                      MatRowGet(SFBr,i,SFBrw);
                      if (SFBrw.ContrSerNr==contrsernr) then begin
                        if (DateInRange(SFBrw.FBDate,sd,ed)) then begin
                          bruto = SFBrw.BrutoSum;
                          tstr = MonthYearStr(sd);
                          StartFormat(15);
                          OutLongInt(0,"DblSalaryFBVc",SFBr.SerNr,false);
                          OutString(2,0,tstr,false);
                          OutString(4,0,bruto,true);
                          EndFormat;
                          fbbrutotot = fbbrutotot + SFBrw.BrutoSum;
                        end;
                      end;
                    end;
                    sd = AddMonth(sd,1);
                  end;        
                  if (fbbrutotot>0) then begin
                    Gray_Divider(130,220);
                    StartFormat(15);
                    OutString(0,0,"",false);
                    OutString(3,0,USetStr(1500453),false);
                    OutString(4,0,fbbrutotot,true);
                    EndFormat;
                  end;
                end;
              end;

              //4. Algsaldod - puudumised
              EmptyRow;
              Black_Divider(0,1);
              OutString(0,"",USetStr(1500526),false);
              EmptyRow;
              EmptyRow;
              StartFormat(15);
              OutString(0,"",USetStr(1500535),false);
              OutString(2,"",USetStr(1500519),false);
              OutString(3,"",USetStr(1500520),false);
              OutString(4,"",USetStr(1500516),false);
              OutString(9,"",USetStr(1500533),true);
              OutString(420,"",USetStr(1500534),true);
              EndFormat;
              Gray_Divider(0,430);
              TrHs = true;  
              AFBr.OKFlag = 1;
              while (LoopKey("OKFlag",AFBr,1,TrHs)) begin
                if (AFBr.OKFlag!=1) then begin TrHs = false; end;
                if (TrHs) then begin
                  rwcnt = MatRowCnt(AFBr);
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(AFBr,i,AFBrw);
                    if (AFBrw.ContrSerNr==contrsernr) then begin
                      if (GetRightPeriod(AFBrw.SDate,AFBrw.EDate,sdate,edate)) then begin
                        absfbcaldays = GetCalendarDays(AFBrw.SDate,AFBrw.EDate);
                        absfbworkdays = GetWorkingDays(AFBrw.SDate,AFBrw.EDate);
                        StartFormat(15);
                        OutLongInt(0,"DblAbsenceFBVc",AFBr.SerNr,false);
                        OutString(2,0,AFBrw.SDate,false);
                        OutString(3,0,AFBrw.EDate,false);
                        OutString(4,"DblAbsTypeVc",AFBrw.AbsTypeCode,false);
                        OutString(9,0,absfbcaldays,true);
                        OutString(420,0,absfbworkdays,true);
                        EndFormat;
                        absfbcaldaystot = absfbcaldaystot + absfbcaldays;
                        absfbworkdaystot = absfbworkdaystot + absfbworkdays;
                      end;
                    end;
                  end;        
                end;
              end;
              if (absfbcaldaystot>0) or (absfbworkdaystot>0) then begin
                Gray_Divider(270,430);
                StartFormat(15);
                OutString(0,0,"",false);
                OutString(2,0,"",false);
                OutString(3,0,"",false);
                OutString(5,0,USetStr(1500453),false);
                OutString(9,0,absfbcaldaystot,true);
                OutString(420,0,absfbworkdaystot,true);
                EndFormat;
              end;

              //5. Arvestused
              EmptyRow;
              Black_Divider(0,1);
              OutString(0,"",USetStr(1500527),false);
              EmptyRow;
              EmptyRow;
              StartFormat(15);
              OutString(0,"",USetStr(1500441),false);
              OutString(2,"",USetStr(1500519),false);
              OutString(3,"",USetStr(1500520),false);
              OutString(4,"",USetStr(1500518),false);
              OutString(5,"",USetStr(1500588),false);
              OutString(8,"",USetStr(1500538),false);
              OutString(1,"",USetStr(1500532),true);
              EndFormat;
              Gray_Divider(0,1);
              bruto = 0;
              TrHs = true;  
              CPr.ContrSerNr = contrsernr;
              CPr.OKFlag = 1;
              CPr.StartDate = sdate;
              while (LoopKey("ContrSerNr",CPr,3,TrHs)) begin
                if (CPr.ContrSerNr!=contrsernr) then begin TrHs = false; end;
                if (CPr.OKFlag!=1) then begin TrHs = false; end;
                if (TrHs) then begin
                  testf = true;
                  if (CPr.Invalid!=0) then begin testf = false; end;
                  if ((CPr.StartDate<sdate) or (CPr.EndDate>edate)) then begin testf = false; end;
                  if (testf) then begin
                    rwcnt = MatRowCnt(CPr);
                    for (i=0;i<rwcnt;i=i+1) begin
                      MatRowGet(CPr,i,CPrw);
                      if (nonblank(CPrw.PaymTypeCode)) then begin
                        ResetLoop(PT2r);
                        PT2r.Code = CPrw.PaymTypeCode;
                        if (ReadFirstMain(PT2r,1,true)) then begin
                          if (PT2r.PaymTypeFlag==0) then begin //Tasu
                            bruto = CPrw.BrutoSum;
                            StartFormat(15);
                            OutLongInt(0,"DblCalcPayrollVc",CPr.SerNr,false);
                            OutString(2,0,CPr.StartDate,false);
                            OutString(3,0,CPr.EndDate,false);
                            OutString(4,"DblPaymTypeVc",CPrw.PaymTypeCode,false);
                            if (PT2r.VacationFlag!=0) then begin
                              tstr = "JAH";
                              vacbrutotot = vacbrutotot + bruto;
                            end else begin
                              tstr = "EI";
                            end;  
                            OutString(5,0,tstr,false);
                            if (PT2r.StandingChargeFlag!=0) then begin
                              tstr = "JAH";
                              if (PT2r.VacationFlag!=0) then begin
                                vacscbrutotot = vacscbrutotot + bruto;
                              end;
                            end else begin
                              tstr = "EI";
                            end;  
                            OutString(8,0,tstr,false);
                            bruto = round(bruto,GetSalaryRoundMode("2"));
                            OutString(1,0,bruto,true);
                            EndFormat;
                            brutotot = brutotot + bruto;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
              if (brutotot>0) or (vacbrutotot>0) or (vacscbrutotot>0) then begin
                Gray_Divider(260,1);
                StartFormat(15);
                OutString(0,0,"",false);
                OutString(2,0,"",false);
                OutString(3,0,"",false);
                OutString(4,0,"",false);
                OutString(400,0,USetStr(1500453),true);
                OutString(1,0,brutotot,true);
                EndFormat;
                StartFormat(15);
                OutString(0,0,"",false);
                OutString(2,0,"",false);
                OutString(3,0,"",false);
                OutString(4,0,"",false);
                OutString(400,0,USetStr(1500589),true);
                OutString(1,0,vacbrutotot,true);
                EndFormat;
                StartFormat(15);
                OutString(0,0,"",false);
                OutString(2,0,"",false);
                OutString(3,0,"",false);
                OutString(4,0,"",false);
                OutString(400,0,USetStr(1500590),true);
                OutString(1,0,vacscbrutotot,true);
                EndFormat;
              end;

              //6. puudumised
              EmptyRow;
              Black_Divider(0,1);
              OutString(0,"",USetStr(1500528),false);
              EmptyRow;
              EmptyRow;
              StartFormat(15);
              OutString(0,"",USetStr(1500397),false);
              OutString(2,"",USetStr(1500519),false);
              OutString(3,"",USetStr(1500520),false);
              OutString(4,"",USetStr(1500516),false);
              OutString(9,"",USetStr(1500533),true);
              OutString(420,"",USetStr(1500534),true);
              EndFormat;
              Gray_Divider(0,430);
              TrHs = true;  
              Abs2r.ContrSerNr = contrsernr;
              Abs2r.OKFlag = 1;
              Abs2r.EndDate = sdate;
              while (LoopKey("ContrSerNr",Abs2r,3,TrHs)) begin
                if (Abs2r.ContrSerNr!=contrsernr) then begin TrHs = false; end;
                if (TrHs) then begin
                  if (Abs2r.OKFlag!=0) then begin
                    if (GetRightPeriod(Abs2r.StartDate,Abs2r.EndDate,sdate,edate)) then begin
                      abscaldays = GetAbsenceDays(Abs2r.ContrSerNr,"",Abs2r.StartDate,Abs2r.EndDate,absworkdays,abscalnoexcdays);
                      StartFormat(15);
                      OutLongInt(0,"DblAbsenceVc",Abs2r.SerNr,false);
                      OutString(2,0,Abs2r.StartDate,false);
                      OutString(3,0,Abs2r.EndDate,false);
                      OutString(4,"DblAbsTypeVc",Abs2r.AbsTypeCode,false);
                      OutString(9,0,abscaldays,true);
                      OutString(420,0,absworkdays,true);
                      EndFormat;
                      abscaldaystot = abscaldaystot + abscaldays;
                      absworkdaystot = absworkdaystot + absworkdays;
                    end;
                  end;
                end;
              end; 
              if (abscaldaystot>0) or (absworkdaystot>0) then begin
                Gray_Divider(270,430);
                StartFormat(15);
                OutString(0,0,"",false);
                OutString(2,0,"",false);
                OutString(3,0,"",false);
                OutString(5,0,USetStr(1500453),false);
                OutString(9,0,abscaldaystot,true);
                OutString(420,0,absworkdaystot,true);
                EndFormat;
              end;
 
              //7. valem
              EmptyRow;
              Black_Divider(0,1);
              OutString(0,"",USetStr(1500523),false);
              EmptyRow;
              EmptyRow;
              tstr = "KalendripŠevi kokku (Punkt 2)  =  HaigushŸvitise arvestuse aluseks olevad pŠevad";
              StartFormat(15);
              OutString(2,"",tstr,false);
              EndFormat;
              tstr = caldaystot;
              StartFormat(15); 
              OutString(2,"",tstr,false);
              EndFormat;
              EmptyRow;
              tstr = "Algsaldod puudumised kalendripŠevadel (Punkt 4)  +  Puudumised kalendripŠevadel (Punkt 6)  =  Puudumised kokku";
              StartFormat(15);
              OutString(2,"",tstr,false);
              EndFormat;
              tmpint = absfbcaldaystot + abscaldaystot;
              tstr = absfbcaldaystot & "  +  " & abscaldaystot & "  =  " & tmpint;
              StartFormat(15); 
              OutString(2,"",tstr,false);
              EndFormat;
              EmptyRow;
              tstr = "Algsaldod tšštasud (Punkt 3)  +  Tšštasud haigushŸvitise arvestuse aluseks (Punkt 5)  =  Tšštasud kokku";
              StartFormat(15);
              OutString(2,"",tstr,false);
              EndFormat;
              tmpval1 = fbbrutotot + vacbrutotot;
              tstr = fbbrutotot & "  +  " & vacbrutotot & "  =  " & tmpval1;
              StartFormat(15); 
              OutString(2,"",tstr,false);
              EndFormat;
              EmptyRow;
              tstr = "Tšštasud kokku  /  (HaigushŸvitise arvestuse aluseks olevad pŠevad  -  Puudumised kokku) * " & perc & "% =  pŠeva tasu * " & perc & "% = 1 haiguspŠeva tasu";
              StartFormat(15);
              OutString(2,"",tstr,false);
              EndFormat;
              tmpval2 = tmpval1/(caldaystot-tmpint);
              tmpval3 = tmpval2*perc/100;
              sumperday = round(tmpval3,GetSalaryRoundMode("2"));
              tstr = tmpval1 & "  /  (" & caldaystot & "  -  " & tmpint & ")  *  " & perc & "%  =  " & tmpval2 & "  *  " & perc & "%  =  " & sumperday;
              StartFormat(15); 
              OutString(2,"",tstr,false);
              EndFormat;
              EmptyRow;
              tstr = "1 HaiguspŠeva tasu  *  Tššandja poolt tasustatud haiguspŠevade arv (Punkt 1)  =  Haiguse eest arvestatud summa";
              StartFormat(15);
              OutString(2,"",tstr,false);
              EndFormat;
              tmpval4 = round((sumperday*Absr.Period2),GetSalaryRoundMode("2"));
              tstr = sumperday & "  *  " & Absr.Period2 & "  =  " & tmpval4;
              StartFormat(15); 
              OutString(2,"",tstr,false);
              EndFormat;
              EmptyRow;
              tstr = "1 Haiguse pŠev  =  " & sumperday;
              StartFormat(15);
              OutString(2,"",tstr,false);
              EndFormat;
              tstr = "Haiguse eest arvestatud summa  =  " & tmpval4;
              StartFormat(15); 
              OutString(2,"",tstr,false);
              EndFormat;
            end else begin
              goto LIllCalcRn;
            end;
          end;
        end;
      end;
    end else begin
      MessageBox(1500500,"");
      goto LIllCalcRn;
    end;
  end;
LIllCalcRn:;
  EndJob;
  return;
end;