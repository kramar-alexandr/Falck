external function string 255 AddStr(string,string,string);
external updating procedure DoCPRun(record RcVc,var record CalcPayrollVc,var array val,var array val);

function boolean noCPrExist(date sd,date ed,longint contrsernr)
begin
  record CalcPayrollVc CPr;
  boolean res,TrHs,testf;

  res = true;
  TrHs = true;
  CPr.StartDate = sd;
  while (LoopKey("StartDate",CPr,1,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (CPr.Invalid!=0) then begin testf = false; end;
      if ((CPr.StartDate<sd) or (CPr.EndDate>ed)) then begin testf = false; end;
      if (CPr.ContrSerNr!=contrsernr) then begin testf = false; end;
      if (testf) then begin
        res = false;
        TrHs = false;
      end;
    end;
  end;
  noCPrExist = res;
  return;
end;

global
procedure CPFSumUp(record RcVc RepSpec,record CalcPayrollVc CPr,var array val CPSums)
begin
  row CalcPayrollVc CPrw;
  integer rwcnt,i;
  string 200 objects;

  if (blank(RepSpec.ObjStr) or (nonblank(RepSpec.ObjStr) and (SetInSet(RepSpec.ObjStr,CPr.ObjCode)))) then begin
    CPSums[1] = CPSums[1] + CPr.BrutoTotal;
    CPSums[2] = CPSums[2] + CPr.PensionTotal;
    CPSums[3] = CPSums[3] + CPr.UnemplInsTotal;
    CPSums[4] = CPSums[4] + CPr.IncTaxFreeMinTotal;
    CPSums[5] = CPSums[5] + CPr.AddTaxSumTotal;
    CPSums[6] = CPSums[6] + CPr.IncTaxTotal;
    CPSums[7] = CPSums[7] + CPr.NetoTotal;
    CPSums[8] = CPSums[8] + CPr.SocTaxTotal;
    CPSums[9] = CPSums[9] + CPr.EmplUnemplInsTotal;
  end else begin
    rwcnt = MatRowCnt(CPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CPr,i,CPrw);
      objects = AddStr(CPr.ObjCode,CPrw.ObjCode,",");
      if (SetInSet(RepSpec.ObjStr,objects)) then begin
        CPSums[1] = CPSums[1] + CPrw.BrutoSum;
        CPSums[2] = CPSums[2] + CPrw.PensionSum;
        CPSums[3] = CPSums[3] + CPrw.UnemplInsSum;
        CPSums[4] = CPSums[4] + CPrw.IncTaxFreeMinSum;
        CPSums[5] = CPSums[5] + CPrw.AddTaxSum;
        CPSums[6] = CPSums[6] + CPrw.IncTaxSum;
        CPSums[7] = CPSums[7] + CPrw.NetoSum;
        CPSums[8] = CPSums[8] + CPrw.SocTaxSum;
        CPSums[9] = CPSums[9] + CPrw.EmplUnemplInsSum;
      end;
    end;
  end;
  return;
end;

global
updating procedure PrintCPForecast(record RcVc RepSpec,record CalcPayrollVc CPr,record EmplVc Emplr,var array val CPSums, var array val CPSumsTot)
begin
  string 200 emplname;
  boolean nocpf;

  nocpf = noCPrExist(RepSpec.sStartDate,RepSpec.sEndDate,CPr.ContrSerNr);

  if ((CPSums[1]!=0) or (CPSums[7]!=0) or (CPSums[8]!=0)) then begin //bruto, neto, soctax
    StartFormat(15);
    OutString(0,0,Emplr.Code,false);
    OutString(2,0,CPr.ContrSerNr,false);
    emplname = Emplr.Firstname & " " & Emplr.Surname;
    OutString(3,0,emplname,false);
    if (nocpf) then begin
      OutVal(5,0,CPSums[1],M4Val,true); //bruto
      OutVal(6,0,CPSums[2],M4Val,true); //pension
      OutVal(7,0,CPSums[3],M4Val,true); //unemplins
      OutVal(8,0,CPSums[4],M4Val,true); //inctaxfreemin
      OutVal(9,0,CPSums[6],M4Val,true); //inctax
      OutVal(390,0,CPSums[7],M4Val,true); //neto
      OutVal(430,0,CPSums[8],M4Val,true); //soctax
      OutVal(1,0,CPSums[9],M4Val,true); //emplunemplins
    end;
    EndFormat;
    if (nocpf) then begin
      CPSumsTot[1] = CPSumsTot[1] + CPSums[1];
      CPSumsTot[2] = CPSumsTot[2] + CPSums[2];
      CPSumsTot[3] = CPSumsTot[3] + CPSums[3];
      CPSumsTot[4] = CPSumsTot[4] + CPSums[4] - CPSums[5];
      CPSumsTot[6] = CPSumsTot[6] + CPSums[6];
      CPSumsTot[7] = CPSumsTot[7] + CPSums[7];
      CPSumsTot[8] = CPSumsTot[8] + CPSums[8];
      CPSumsTot[9] = CPSumsTot[9] + CPSums[9];
    end;
  end;
  ClearArray(CPSums);
  return;
end;

global
updating procedure CPForecastRn(record RcVc RepSpec)
begin
  record CalcPayrollVc CPr;
  integer rw;
  string 255 tstr;
  array val CPSums;
  array val CPSumsTot;

  rw = 1;
  StartReportJob(USetStr(1500586));

  tstr = USetStr(5261);
  tstr = tstr & RepSpec.sStartDate & " : " & RepSpec.sEndDate;
  Header(rw,tstr,1);
  rw = rw + 1;
  
  if (blank(RepSpec.f1)) then begin
    tstr = USetStr(1500486);
  end else begin
    tstr = USetStr(1500385) & ": ";
    tstr = tstr & RepSpec.f1;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;

  if (blank(RepSpec.f2)) then begin
    tstr = USetStr(1500386);
  end else begin
    tstr = USetStr(1500414) & ": ";
    tstr = tstr & RepSpec.f2;
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
   
  if (nonblank(RepSpec.ObjStr)) then begin
    tstr = USetStr(2317);
    tstr = tstr & RepSpec.ObjStr;
    Header(rw,tstr,1);
    rw = rw + 1; 
  end;
  EndHeader;

  SetRepCol(2,45);
  SetRepCol(3,80);
  SetRepCol(4,130);
  SetRepCol(5,190);
  SetRepCol(6,230);
  SetRepCol(7,270);
  SetRepCol(8,310);
  SetRepCol(9,350);

  StartFormat(15);
  OutString(0,0,USetStr(1500385),false);
  OutString(2,0,USetStr(1500384),false);
  OutString(3,0,USetStr(1500395),false);
  OutString(5,0,USetStr(1500405),true);
  OutString(6,0,USetStr(1500406),true);
  OutString(7,0,USetStr(1500407),true);
  OutString(8,0,USetStr(1500408),true);
  OutString(9,0,USetStr(1500413),true);
  OutString(390,0,USetStr(1500409),true);
  OutString(430,0,USetStr(1500410),true);
  OutString(1,0,USetStr(1500411),true);
  EndFormat;
  Gray_Divider(0,1);
 
  DoCPRun(RepSpec,CPr,CPSums,CPSumsTot);
    
  StartFormat(15);
  EndFormat;
  Black_Divider(70,1);
  StartFormat(15);
  OutString(0,0,"",false);
  OutString(2,0,"",false);
  OutString(3,0,USetStr(20537),false);
  OutString(4,0,"",false);
  OutVal(5,0,CPSumsTot[1],M4Val,true);
  OutVal(6,0,CPSumsTot[2],M4Val,true);
  OutVal(7,0,CPSumsTot[3],M4Val,true);
  OutVal(8,0,CPSumsTot[4],M4Val,true);
  OutVal(9,0,CPSumsTot[6],M4Val,true);
  OutVal(390,0,CPSumsTot[7],M4Val,true);
  OutVal(430,0,CPSumsTot[8],M4Val,true);
  OutVal(1,0,CPSumsTot[9],M4Val,true);
  EndFormat;
  EndJob;
  return;
end;
