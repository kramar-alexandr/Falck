// <halrule>server-only</halrule>

external procedure ReadTXServiceReply(var record TXServiceReplyVc,var Area,Boolean);
external procedure SendFunctionVersion(string,string,var Area);
external procedure SendTextParameter(string,var Area);
external procedure SendEOLParameter(var Area);
external function string 100 CreateCompID();
external updating procedure UpdateEstERecordSent(LongInt);
external procedure SendEstEInvoiceIdleTaskRemoveIdleTask2();
external procedure ReceiveEstEInvoiceIdleTaskRemoveIdleTask2();
external procedure InitSysRunEstIdleTasksRemote(record EInvQueryIntrvlBlock);
external function boolean FindServiceInCache(string,string,Boolean,var string,var longint,var longint,var string);
external function Boolean ReadEstExchangeRateFromBank(Area,Date,Integer,Integer,var Integer,var string);
external procedure ExtractObj(string,var Integer,var string);
external procedure GetUserName(string,var string);
//cust Tsekk.ee KB 02.11.2017
external function string 255 GetTsekkToken();

//cust KB 29.08.2017
procedure AddCompNumToFileName(var string fname)
begin
  fname = left(fname,len(fname)-4) & "_" & CurrentCompany & ".txt";
  return;
end;
//cust end

global
procedure LookupForEstCustServices()
begin
  record CYBlock CYb;
  record EInvoiceBlock EIb;
  Area a_req;

  BlockLoad(CYb);
  BlockLoad(EIb);
  SendFunctionVersion("88.0","",a_req);
  SendTextParameter(CYb.VATNr,a_req);
  SendTextParameter(CYb.OrgNr,a_req);
  SendTextParameter(EIb.TestFlag,a_req);//ts - 2018/04, added testflag to find proper status HT Company record
  SendEOLParameter(a_req);
  SendAsyncWebRequest("tx.excellent.ee",8080,-1,false,"POST","/" & "HTSGetCustServicesData.hal","text/xml; charset=""utf-8""","",a_req,"HTSGetCustServicesReply",40);
  return;
end;

function Boolean SendEstEServiceRequest(string service,string partner,Boolean passf,area request,area reply)
begin
  Boolean res;
  string 100 hostname,funcname;
  LongInt port,httpport;

  res = false;
  if (FindServiceInCache(service,partner,false,hostname,port,httpport,funcname)==true) then begin
    res = true;
    SendWebRequest(hostname,port,-1,false,"POST","/" & funcname,"text/xml; charset=utf-8","",false,request,reply,20);
  end;
  SendEstEServiceRequest = res;
  return;
end;

function Boolean RunEstEServiceRequest(string service,string partner,Boolean passf,area request,string callback,boolean TestFlag)
begin
  Boolean res;
  string 100 hostname,funcname;
  LongInt port,httpport;

  if (FindServiceInCache(service,partner,false,hostname,port,httpport,funcname)==true) then begin
/*
    if (TestFlag) and (service=="REGFORESTEINVOICE") then begin
      port = "6060";
    end;
*/
    SendAsyncWebRequest(hostname,port,-1,false,"POST","/" & funcname,"text/xml; charset=""utf-8""","",request,callback,40);
  end else begin
    LookupForEstCustServices;
  end;
  RunEstEServiceRequest = res;
  return;
end;

function boolean CheckIfAllCompaniesHasServiceDisabled(Integer rtype,var boolean noservice2)
begin
  boolean res;
  Integer oldcomp;
  record EInvoiceBlock EIb;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  Integer i,rwcnt;

  res = true; noservice2 = true;
  oldcomp = CurrentCompany;  
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);    
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Compb,i,Comprw);
    if (blank(Comprw.TCPIP) and (StringToInt(Comprw.CompCode) != oldcomp)) then begin
      if (SetCompanyCode(Comprw.CompCode,false)) then begin
        BlockLoad(EIb);
        switch (rtype) begin
          case 0:
            if (EIb.OutEstEInvoices == 1) then begin
              res = false;
            end;
            if (EIb.InEstEInvoices == 1) then begin
              noservice2 = false;
            end;
          case 1:
            if (EIb.InEstEInvoices == 1) then begin
              res = false;
              i = rwcnt;            
            end;
            if (EIb.OutEstEInvoices == 1) then begin
              noservice2 = false;
            end;
        end;
      end;
    end;
  end;
  ResetCompany(oldcomp);
  CheckIfAllCompaniesHasServiceDisabled = res;
  return;
end;

function boolean CanDeActivateServices(string serviceList,record CYBlock CYb,var string errMsg)
begin
  boolean res;

  res = true;
  if(blank(serviceList)) then begin
    errMsg = USetStr(33490);
    res = false;
  end;
  if(blank(CYb.OrgNr)) then begin
    errMsg = USetStr(34593);
    res = false;
  end;
  CanDeActivateServices = res;
  return;
end;

function boolean PrepareDeactivReqArea(var area requestArea, string serviceList,string partner,var string errMsg)//ts - 2018/04, added parameter due to new index in service status in Click server
begin
  record CYBlock CYb;
  record InternetEnablerBlock IEb;
  record EInvoiceBlock EIb;
  boolean res;

  res = false;
  BlockLoad(CYb);
  BlockLoad(IEb);
  BlockLoad(EIb);
  if(CanDeActivateServices(serviceList,CYb,errMsg)) then begin
    SendFunctionVersion("88.0","",requestArea);
    SendTextParameter(CYb.OrgNr,requestArea);
    SendTextParameter(CYb.VATNr,requestArea);
    SendTextParameter(CYb.CompName,requestArea);
    SendTextParameter(EIb.TestFlag,requestArea);
    SendTextParameter(IEb.CustomerCode,requestArea);
    SendTextParameter(IEb.Contract,requestArea);
    SendTextParameter(serviceList,requestArea);
    SendTextParameter(partner,requestArea);//ts - 2018/04
    SendEOLParameter(requestArea);
    res = true;
  end;
  PrepareDeactivReqArea = res;
  return;
end;

updating
procedure SendDeactivateReqToHTS(string serviceList,string partner,string callback)//ts - 2018/04, added parameter due to new index in service status in Click server
begin
  string 100 hostname,funcname;
  longint port,httpport;
  area requestArea;
  record EInvoiceBlock EIb;
  string 255 errMsg;

  if (FindServiceInCache("REGFORESTEINVOICE","",false,hostname,port,httpport,funcname) == true) then begin
    funcname = "HTSStopServices.hal";
    if(PrepareDeactivReqArea(requestArea,serviceList,partner,errMsg)) then begin//ts - 2018/04
      SendAsyncWebRequest(hostname,port,-1,false,"POST","/" & funcname,"text/xml; charset=""utf-8""","",requestArea,callback,10);
    end else begin
      BlockLoad(EIb);
      EIb.ServiceMessage = USetStr(1500020) & " " & errMsg & " " & CurrentTime;
      BlockStore(EIb);
    end;
  end;
  return;
end;

global updating
procedure CloseServicesThroughHTS(string serviceList,string partner)//ts - 2018/04, added parameter due to new index in service status in Click server
begin
  string 100 callback;

  callback = "HTSStopServicesReply"; //will close the services when response comes
  if(nonblank(serviceList)) then begin
    SendDeactivateReqToHTS(serviceList,partner,callback);//ts - 2018/04
  end;
  return;
end;

//this function is used for server notification only
global updating
procedure SendCloseInfoToHTS(string serviceList,string partner)//ts - 2018/04, added parameter due to new index in service status in Click server
begin
  string 100 callback;

  callback = ""; //no callback, service must be closed by another function
  if(nonblank(serviceList)) then begin
    SendDeactivateReqToHTS(serviceList,partner,callback);//ts - 2018/04
  end;
  return;
end;

global
updating procedure DoStopSendingEstERecords2(record EInvoiceBlock EIb,LongInt rerror,string errordesc,string rtypestr)
BEGIN
  boolean res,noservice2;
  string 5 rtype;
  Integer pos;

  EIb.ServiceMessage = "";
  
  pos = 0;
  ExtractObj(rtypestr,pos,rtype);
  while (nonblank(rtype)) begin
    switch (rtype) begin
      case "0"://Send EInvoice
        res = CheckIfAllCompaniesHasServiceDisabled(0,noservice2);
        // EIb.StopEInvoices = 1; //ts - 2018/03
        EIb.OutEInvoices = 0;
        EIb.DefaultEBehave = 0;
//default identification for local EST transactions
        EIb.OutEstEInvoices = 0;
        if (res) then begin
          SendEstEInvoiceIdleTaskRemoveIdleTask2;
        end;
      case "1"://Receive Supplier EInvoice
        res = CheckIfAllCompaniesHasServiceDisabled(1,noservice2);
        EIb.RcvEInvoices = 0;
        EIb.InEstEInvoices = 0;
        if (res) then begin
          ReceiveEstEInvoiceIdleTaskRemoveIdleTask2;
        end;
      case "4":
        EIb.Service4Flag = 0;
      case "5":
        EIb.Service5Flag = 0;
      case "6":
        EIb.Service6Flag = 0;
      case "7": //IR
        EIb.CreditScoreServiceFlag = 0;
      case "8": //IR
        EIb.CustomerDataServiceFlag = 0;
      case "9": //IR
        EIb.WebLinkServiceFlag = 0;
      case "10": //IR
        EIb.DebtsServiceFlag = 0;
      case "11":
        EIb.Service11Flag = 0;
      case "12":
        EIb.InIVEstEInvoices = 0;
      case "13": //tsekk.ee
        EIb.TsekkActivFlag = 0;
    end;
    ExtractObj(rtypestr,pos,rtype);  
  end;
  if (rerror>0) then begin
    EIb.ServiceMessage = USetStr(rerror);
  end;
  if (nonblank(errordesc) OR rerror > 0) then begin
    EIb.ServiceMessage = EIb.ServiceMessage & " " & errordesc & " " & CurrentTime;
  end;
  BlockStore(EIb);
  RETURN;
END;

updating procedure StopSendingEstERecords(LongInt rerror,string errordesc,LongInt rtype)
begin
  record EInvoiceBlock EIb;

  BlockLoad(EIb);
  DoStopSendingEstERecords2(EIb,rerror,errordesc,rtype);
  return;
end;

global updating
procedure HTSStopServicesReply(area a_reply,area replyheader,boolean timedout)
begin
  record EInvoiceBlock EIb;
  record TXServiceReplyVc TXSrvReplyr;
  string 255 serviceList,errorDesc,service;
  integer rw;
  longint errorCode,TXSerNr;

  BlockLoad(EIb);
  if ((timedout) or (GetAreaLength(a_reply) <= 0)) then begin
    LogText(20235,"HTSStopServicesReply");
    EIb.ServiceMessage = USetStr(1500021) & " " & CurrentTime;
    BlockStore(EIb);
  end else begin
    ReadTXServiceReply(TXSrvReplyr,a_reply,true);
    TXSerNr = TXSrvReplyr.SerNr;
    if (TXSerNr < 0) then begin
      goto LHTSStopServicesReply;
    end;
    errorCode = TXSrvReplyr.ErrorCode;
    errorDesc = TXSrvReplyr.ErrorDescription;
    serviceList = TXSrvReplyr.MsgID;
    rw = 0;
    if(errorCode == 0) then begin
      DoStopSendingEstERecords2(EIb,33507,errorDesc,serviceList);
    end else begin
      EIb.ServiceMessage = errorDesc & " " & CurrentTime;
      BlockStore(EIb);
    end;
  end;
LHTSStopServicesReply:;
  return;
end;

updating procedure ActivateSendingEstERecords(LongInt rerror,string errordesc,string rtypestr,string ppartner) //##cc
BEGIN
  record EInvoiceBlock EIb;
  record EInvQueryIntrvlBlock ESb;
  string 10 partner; //##ii
  string 5 rtype;
  Integer pos;

  BlockLoad(EIb);
  EIb.ServiceMessage = "";
  partner = ppartner; //tmp //##ii
  if (right(partner,1) == "2") or (right(partner,1) == "3") then begin //##ii
    partner = Left(partner,len(partner)-1); //##ii
  end; //##ii
  
  pos = 0;
  ExtractObj(rtypestr,pos,rtype);
  while (nonblank(rtype)) begin
    switch (rtype) begin
      case "0":
        EIb.StopEInvoices = 0;
        EIb.DefaultEBehave = 3;
        EIb.OutEInvoices = 1;
        EIb.AttachPDFtoElectronicInvoice = 1;
//default identification for local EST transactions
        EIb.OutEstEInvoices = 1;
        EIb.EInvoicePartner = partner;
      case "1":
        EIb.RcvEInvoices = 1;
        EIb.InEstEInvoices = 1;
        EIb.SuppInvoicePartner = partner & "2"; //##cc
      case "4":
        EIb.Service4Flag = 1;
      case "5":
        EIb.Service5Flag = 1;
      case "6":
        EIb.Service6Flag = 1;
      case "7":
        EIb.CreditScoreServiceFlag = 1;
      case "8":
        EIb.CustomerDataServiceFlag = 1;
      case "9":
        EIb.WebLinkServiceFlag = 1;
      case "10":
        EIb.DebtsServiceFlag = 1;
      case "11":
        EIb.Service11Flag = 1;
      case "12":
        EIb.InIVEstEInvoices = 1;
        EIb.EInInvoicePartner = partner & "3"; //##cc
      //cust KB 09.01.2018 tsekk.ee
      case "13":
        EIb.TsekkActivFlag = 1;
      //cust end
    end;
    ExtractObj(rtypestr,pos,rtype);  
  end;
  if (rerror>0) then begin
    EIb.ServiceMessage = USetStr(rerror);
  end;
  if (nonblank(errordesc) OR rerror > 0) then begin
    EIb.ServiceMessage = EIb.ServiceMessage & errordesc & " " & CurrentTime;
  end;
  BlockStore(EIb);
  BlockLoad(ESb);
  InitSysRunEstIdleTasksRemote(ESb);
  RETURN;
END;

updating procedure SendErrorToSystem(LongInt rerror)
BEGIN
  record EInvoiceBlock EIb;

  BlockLoad(EIb);
  EIb.StopReason = "";
  if (rerror>0) then begin
    EIb.StopReason = USetStr(rerror);
    BlockStore(EIb);
  end;
  RETURN;
END;

global
updating procedure HTSGetCustServicesReply(Area a_reply,Area replyheader,Boolean timedout)
begin
  record ServiceCacheVc SCr;
  record TXServiceReplyVc TXSrvReplyr;
  string 60 service,rerrordesc,rtypestr;
  LongInt rerror,TXSerNr;
  Integer rw;

  if ((timedout) or (GetAreaLength(a_reply)<=0)) then begin
    LogText(20235,"HTSGetCustServicesReply");
    SendErrorToSystem(33505);
  end else begin
    ReadTXServiceReply(TXSrvReplyr,a_reply,true);
    TXSerNr = TXSrvReplyr.SerNr;
    if (TXSerNr < 0) then begin
      goto LHTSGetCustServicesReply;
    end;
    rerror = TXSrvReplyr.ErrorCode;
    rerrordesc = TXSrvReplyr.ErrorDescription;
    rtypestr = TXSrvReplyr.MsgID;
    if (rerror<0) then begin
      StopSendingEstERecords(rerror,rerrordesc,rtypestr);
      goto LHTSGetCustServicesReply;
    end;
    rw = 0;
    service = GetTabTextFromArea(rw,0,a_reply);
    while (nonblank(service)) begin
      SCr.Code = service;
      SCr.ServiceHost = GetTabTextFromArea(rw,1,a_reply);
      SCr.ServicePort = GetTabTextFromArea(rw,2,a_reply);
      SCr.FuncName = GetTabTextFromArea(rw,3,a_reply);
      SCr.Partner = GetTabTextFromArea(rw,4,a_reply);
      if (RecordStore(SCr,true)) then begin end;
      rw = rw + 1;
      service = GetTabTextFromArea(rw,0,a_reply);    
    end;
  end;
LHTSGetCustServicesReply:;
  return;
end;

//cust-begin: ts 14/07/2017
global
procedure ReadTokenReply(var Area a_reply,Boolean movef)
begin
  record HTSFileVc HTSFr;
  LongInt l,headersize;
  Area a_tmp,a_token;
  string 255 fname,fpath;

  fpath = "./tmp/ir";
  l = GetRecordFromArea(HTSFr,"HTSFileVc",0,a_reply);
  if (l>0) and (l<GetAreaLength(a_reply)) then begin //? 
    if (nonblank(HTSFr.FileName)) then begin
      GetRecordBlob(HTSFr,"Math",a_token); 
      fname = HTSFr.FileName;
      AddCompNumToFileName(fname);
      CreateFolder(fpath);
      //CreateFile(fpath & "/" & fname); //cust KB
      //CloseFile; //cust KB these two lines caused a bug with empty report when token is expired and being updated
      WriteAreaToFile(a_token,fpath & "/" & fname,0);
    end;
    if (movef) then begin
      if (GetAreaLength(a_reply)-l>0) then begin
        l = GetAreaFromArea(a_reply,l,GetAreaLength(a_reply)-l,a_tmp);
        SetAreaZeroSize(a_reply);
        if (GetAreaLength(a_tmp)-2>=0) then begin
          l = GetAreaFromArea(a_tmp,2,GetAreaLength(a_tmp)-2,a_reply);
        end;
      end else begin
        SetAreaZeroSize(a_reply);
      end;
    end;
  end;
  return;
end;
//cust - end

global
updating procedure HTSRegForEstEInvoiceReply(Area a_reply,Area replyheader,Boolean timedout)
begin
  record ServiceCacheVc SCr;
  record EInvoiceBlock EIb;
  record TXServiceReplyVc TXSrvReplyr;
  record TXTSerBlock Serbl;
  string 255 rerrordesc,service,rtypestr;
  LongInt rerror,TXSerNr;
  Integer rw;

  if ((timedout) or (GetAreaLength(a_reply)<=0)) then begin
    LogText(20235,"HTSRegForEstEInvoiceReply");
    SendErrorToSystem(33505);
  end else begin
    ReadTXServiceReply(TXSrvReplyr,a_reply,true);
    TXSerNr = TXSrvReplyr.SerNr;
    if (TXSerNr < 0) then begin
      goto LHTSRegForEstEInvoiceReply;
    end;
    rerror = TXSrvReplyr.ErrorCode;
    rerrordesc = TXSrvReplyr.ErrorDescription;
    rtypestr = TXSrvReplyr.MsgID;
    if (rerror<0) then begin
      StopSendingEstERecords(rerror,rerrordesc,rtypestr);
      goto LHTSRegForEstEInvoiceReply;
    end;
    ReadTokenReply(a_reply,true);//cust, ts 14/07/2017 //##ii
    rw = 0;
    service = GetTabTextFromArea(rw,0,a_reply);
    while (nonblank(service)) begin
      SCr.Code = service;
      SCr.ServiceHost = GetTabTextFromArea(rw,1,a_reply);
      SCr.ServicePort = GetTabTextFromArea(rw,2,a_reply);
      SCr.FuncName = GetTabTextFromArea(rw,3,a_reply);
      SCr.Partner = GetTabTextFromArea(rw,4,a_reply);
      if(SCr.Code != "MAILBOW" OR nonblank(SCr.ServiceHost)) then begin
        if (RecordStore(SCr,true)) then begin end;
      end;
      if (SCr.Partner == "ESTADRLOOKUP") then begin
        BlockLoad(Serbl);
        Serbl.dbName = SCr.Partner;
        Serbl.dbUser = GetTabTextFromArea(rw,5,a_reply);
        Serbl.dbPasswd = GetTabTextFromArea(rw,6,a_reply);
        if (Serbl.dbNumber <= 0) then begin
          Serbl.dbNumber = 100;
        end;
        BlockStore(Serbl);
      end;
      rw = rw + 1;
      service = GetTabTextFromArea(rw,0,a_reply);    
    end;
    ActivateSendingEstERecords(rerror,rerrordesc,rtypestr,SCr.Partner);
    //ReadTokenReply(a_reply,true);//cust, ts 14/07/2017 //##cc
  end;
LHTSRegForEstEInvoiceReply:;
  return;
end;

global
updating procedure HTSCheckEstEInvoiceReply(Area a_reply,Area replyheader,Boolean timedout)
begin
  record ServiceCacheVc SCr;
  record EInvoiceBlock EIb;
  record TXServiceReplyVc TXSrvReplyr;
  string 255 rerrordesc,custrecnr,rtypestr;
  LongInt rerror,TXSerNr;
  Integer rw;

  if ((timedout) or (GetAreaLength(a_reply)<=0)) then begin
    SendErrorToSystem(33505);
  end else begin
    ReadTXServiceReply(TXSrvReplyr,a_reply,true);
    TXSerNr = TXSrvReplyr.SerNr;
    if (TXSerNr < 0) then begin
      goto LHTSCheckEstEInvoiceReply;
    end;
    rerror = TXSrvReplyr.ErrorCode;
    rerrordesc = TXSrvReplyr.ErrorDescription;
    rtypestr = TXSrvReplyr.MsgID;
    if (rerror<0) then begin
      StopSendingEstERecords(rerror,rerrordesc,rtypestr);
    end;
    rw = 0;
    custrecnr = GetTabTextFromArea(rw,0,a_reply);
    while (nonblank(custrecnr)) begin
      UpdateEstERecordSent(custrecnr);
      rw = rw + 1;
      custrecnr = GetTabTextFromArea(rw,0,a_reply);    
    end;
  end;
LHTSCheckEstEInvoiceReply:;
  return;
end;

global
procedure RegisterForEstEInvoicing2(string partner,string email,string userName)
begin
  record CYBlock CYb;
  record InternetEnablerBlock IEb;
  record EInvoiceBlock EIb;
  string 255 tstr;
  Area a_req;

  BlockLoad(CYb);
  BlockLoad(IEb);
  BlockLoad(EIb);
  SendFunctionVersion("88.0","",a_req);
  SendTextParameter(CYb.VATNr,a_req);
  SendTextParameter(CYb.OrgNr,a_req);
  SendTextParameter(CYb.OrgNr2,a_req);
  SendTextParameter(CYb.CompName,a_req);
  SendTextParameter(CYb.ANACode,a_req);
  SendTextParameter(CYb.CountryCode,a_req);
  SendTextParameter(CYb.Phone,a_req);
  SendTextParameter(CYb.Fax,a_req);
  SendTextParameter(CYb.wwwAddr,a_req);
  SendTextParameter(CYb.emailAddr,a_req);
  SendTextParameter(DatabaseID,a_req);    
  SendTextParameter(CreateCompID,a_req);    
  SendTextParameter(IEb.RegInCountry,a_req);
  SendTextParameter(IEb.CustomerCode,a_req);
  SendTextParameter(partner,a_req);
  SendTextParameter(EIb.TestFlag,a_req);
  SendTextParameter(email,a_req);
  SendTextParameter(IEb.Contract,a_req);
  if(nonblank(userName)) then begin
    tstr = userName;
  end else begin
    GetUserName(CurrentUser,tstr);
  end;
  SendTextParameter(tstr,a_req);
  //cust KB 02.11.2017 tsekk.ee
  if(left(partner,7) == "TSEKKEE" AND nonblank(GetTsekkToken)) then begin
    SendTextParameter(GetTsekkToken,a_req);
  end;
  //cust end
  SendEOLParameter(a_req);
  if (RunEstEServiceRequest("REGFORESTEINVOICE","",false,a_req,"HTSRegForEstEInvoiceReply",EIb.TestFlag)==false) then begin
  end;
  return;
end;

global
procedure RegisterForEstEInvoicing(string partner)
begin
  RegisterForEstEInvoicing2(partner,"","");
  return;
end;

//ts - 2018/04, rewrited function due to new Service Statistic register
global
procedure CheckEstEInvoicingUsage2()
begin
  record CUServiceUsageVc CUSUr;
  date SendDate;
  Boolean foundf;
  Area a_req;

  SendDate = AddDay(CurrentDate,-1);
  CUSUr.ServiceDate = SendDate;
  while (LoopMain(CUSUr,1,true)) begin
    AddRecordToArea(CUSUr,"CUServiceUsageVc",a_req);
    foundf = true;
  end;
  if (foundf) then begin
    if (RunEstEServiceRequest("CHECKESTEINVOICE","",false,a_req,"HTSCheckEstEInvoiceReply",false)==false) then begin
    end;
  end;
  return;
end;

global
procedure CheckEstEInvoicingUsage(string FileName,string partner)
begin
  CheckEstEInvoicingUsage2;
  return;
end;

global
procedure HTSEstCurRatesReply(Area a_reply,Area replyheader,Boolean timedout)
begin
  LongInt rerror;
  string 255 rerrordesc;
  string 255 errstr;
  Integer errno;
  record ERBlock ERb;
  Boolean found;
  date d;
  Time t;

  BlockLoad(ERb);
  if ((timedout) or (GetAreaLength(a_reply)<=0)) then begin
  //  LookupServiceAsync("NATIONALBANKCURRATES","",true);
    if (ERb.IdleTask!=0) then begin
      t = CurrentTime;
      t.minute = t.minute + 3;
//cust, TS-2015/06      NewTimedTask("AutoEstExchangeRates","Get Exchange Rates","HTSEstCurRateIdleTask","",CurrentDate,t,"","");
      NewTimedTask2("AutoEstExchangeRates" & CurrentCompany,"Get Exchange Rates","HTSEstCurRateIdleTask",CurrentCompany,CurrentDate,t,"","");
    end;
  end else begin
    found = ReadEstExchangeRateFromBank(a_reply,CurrentDate,0,ERb.OverwriteExistRate,errno,errstr);
  //cust KB 06.02.2018 disabled as now as PeriodicTask
  /*
//  if (found) then begin //tmp
      if (ERb.IdleTask!=0) then begin
        t = ERb.ERTime;
        if (blanktime(t)) then begin
          t.hour = 12;
          t.minute = 0;
          t.second = 0;
        end;
        d = CurrentDate;
        if (t < CurrentTime) then begin
          d = AddDay(d,1);
        end;
        NewTimedTask("AutoEstExchangeRates" & CurrentCompany,"Get Exchange Rates","HTSEstCurRateIdleTask",CurrentCompany,d,t,"","");
      end;
//  end;
  */
  end;
  return;
end;

global
function Boolean GetEstExchangeRateFromBank(record RcVc RepSpec,Boolean clientf,var Integer errno,var string errstr,Boolean checkflag)
begin  
  Boolean res,testf,found;
  Area a_req,a_reply,a_xmlreply;
  record CYBlock CYb;
  record EInvoiceBlock EIb;
  record BaseCurBlock BCb;
  Date d1;

  BlockLoad(CYb);
  BlockLoad(EIb);
  SendFunctionVersion("88.0","",a_req);
  SendTextParameter(CYb.VATNr,a_req);
  SendTextParameter(CYb.OrgNr,a_req);
  SendTextParameter("ESTCURRATELOOKUP",a_req);
  SendTextParameter(EIb.TestFlag,a_req);//ts - 2018/04, in order to find proper test status HT Company record
  SendEOLParameter(a_req);  

  d1 = RepSpec.d1;
  SendTextParameter(DateToString(d1,"YYYY-MM-DD"),a_req);
  SendEOLParameter(a_req);  

  BlockLoad(BCb);
  if (BCb.NotBase1!=0) then begin
    errno = 20237;
    errstr = " " & USetStr(20805);
    goto LGetEstExchangeRateFromBank;
  end;
  if (clientf) then begin
    testf = SendEstEServiceRequest("SENDESTCURRATELOOKUP","ESTCURRATELOOKUP",false,a_req,a_reply);          
  end else begin
    if (RunEstEServiceRequest("SENDESTCURRATELOOKUP","ESTCURRATELOOKUP",true,a_req,"HTSEstCurRatesReply",false)==false) then begin
    end;
  end;
  if (testf) then begin
    found = ReadEstExchangeRateFromBank(a_reply,RepSpec.d1,RepSpec.flags[0],RepSpec.flags[1],errno,errstr);
  end else begin
    errno = 20241;
  end;
  if (checkflag) then begin
    LogText(0,"ESTCURRATELOOKUP> Company: " & CurrentCompany & ". Errcode: " & errno & ". Errstr: " & errstr & ". Result: " & found);
  end;
LGetEstExchangeRateFromBank:;  
  GetEstExchangeRateFromBank = found;
  return;
end;

global
procedure DoGetEstExchangeRateFromBank(record RcVc RepSpec,Boolean clientf,var Integer errno,var string errstr,Boolean checkflag,var Boolean res)
begin  
  res = GetEstExchangeRateFromBank(RepSpec,clientf,errno,errstr,checkflag);
  return;
end;

global
procedure HTSEstCurRateIdleTask(string arg)
begin
  Integer i,rwcnt,error;
  Integer oldcomp;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  record ServiceCacheVc SCr;
  Boolean found,stopidletaskf,checkflag;
  record ERBlock ERb;
  record EInvoiceBlock EIb;
  Time t;
  Integer compnr,errno;
  record RcVc RepSpec;
  string 255 errstr;

  stopidletaskf = true;
  
  if (blank(arg)) then begin
    SCr.Code = "SENDESTCURRATELOOKUP";
    if (ReadFirstMain(SCr,1,true)) then begin
      oldcomp = CurrentCompany;
      BlockLoad(Compb);
      rwcnt = MatRowCnt(Compb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Compb,i,Comprw);
        if (blank(Comprw.TCPIP)) then begin
          if (SetCompanyCode(Comprw.CompCode,false)) then begin
            BlockLoad(ERb);
            BlockLoad(EIb);
            checkflag = EIb.DebugFlag;
            if (ERb.IdleTask!=0) then begin
              if (ERb.RunDate<CurrentDate) then begin
                RepSpec.d1 = CurrentDate;
                RepSpec.flags[0] = 0;
                RepSpec.flags[1] = ERb.OverwriteExistRate;
                found = GetEstExchangeRateFromBank(RepSpec,false,errno,errstr,checkflag);  
              end;
            end;
          end;
        end;
      end;
      ResetCompany(oldcomp);
//  end else begin
//    LookupServiceAsync("NATIONALBANKCURRATES","",true);
//    stopidletaskf = false;
    end;
  end else begin
    compnr = StringToInt(arg);
    if (compnr>0) then begin
      oldcomp = CurrentCompany;  
      if (SetCompany(compnr,false)) then begin
        BlockLoad(ERb);
        BlockLoad(EIb);
        checkflag = EIb.DebugFlag;
        if (ERb.IdleTask!=0) then begin
          if (ERb.RunDate<CurrentDate) then begin
            RepSpec.d1 = CurrentDate;
            RepSpec.flags[0] = 0;
            RepSpec.flags[1] = ERb.OverwriteExistRate;
            found = GetEstExchangeRateFromBank(RepSpec,false,errno,errstr,checkflag);  
          end;
        end;
      end;
      ResetCompany(oldcomp);
    end;
  end;
  //cust KB 06.02.2018 this part is never executed as stopidletaskf already always true
  /*if (stopidletaskf==false) then begin
    if (ERb.IdleTask!=0) then begin
      t = CurrentTime;
      t.minute = t.minute + 3;
      NewTimedTask("AutoEstExchangeRates","Get Exchange Rates","HTSEstCurRateIdleTask","",CurrentDate,t,"","");
    end;
  end;*/
LHTSCSXRateIdleTaskSTOP:;  
  return;
end;
