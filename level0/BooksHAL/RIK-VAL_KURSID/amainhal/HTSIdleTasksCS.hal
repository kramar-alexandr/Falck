external procedure InitSysRunEstIdleTasks();
external function time AddTime_Minutes(time,time);
external updating procedure InitASPIdleTasks();

global
function Boolean UniversityURLCacheNeedsUpdate()
begin
  record UniversityURLCacheVc UUCr;
  Boolean res;
  
  UUCr.State = kUniversityURLStateValid;
  res = (ReadFirstKey("State",UUCr,1,true)==false);

  UniversityURLCacheNeedsUpdate = res;
  return;
end;

global
updating procedure InitIdleTasks()
begin
  Time t,startt;
  Date td;
  record ModuleBlock Modr;
  record CashierDefBlock CDb;
  record ERBlock ERb;
  record InternetEnablerBlock IEb;
  record GSXSettingsBlock GSb;
  record EInvoiceBlock EIBb;
  record EInvQueryIntrvlBlock EInvQIntr; //cust + KB 06.02.2018
  integer periodSec;//cust + KB 06.02.2018

//  NewPeriodicTask("TestStuff","TestStuff","TestStuff","",1,CurrentUser);//600, 10 minutes

  if (UseExternalLicenseModel) then begin
    if (LicenseMode==kLicenseModeServer) then begin
      NewPeriodicTask2("UpdateLicenses","Update Licenses","UpdateLicensesIdleTask","Server",3,"");//how often ? 
    end else begin
      NewPeriodicTask2("UpdateLicenses","Update Licenses","UpdateLicensesIdleTask","Server",3,"");
    end;
  end;
  
  if (IsStandardProduct and IsUsingActivationCodes==false) then begin
    NewPeriodicTask("UpdateHWLicensesFromCloud","Update Licenses from Cloud","UpdateHWLicensesFromCloudIdleTask","",60,CurrentUser);//600, 10 minutes
  end;

  if (ServerMode or SingleUserMode) then begin
    BlockLoad(IEb);
    BlockLoad(Modr);
    BlockLoad(CDb);
    BlockLoad(ERb);
    BlockLoad(GSb);
    BlockLoad(EIBb);//this is per company 
    BlockLoad(EInvQIntr); //cust KB 06.02.2018

    if (IEb.EnablerRegistration<=0) and (IEb.HasDeclinedReg!=1) and (IsStandardProduct) then begin
      startt = CurrentTime;
      t = startt;
      t.second = t.second + 10;
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("ReRegisterCustDataAsync","Adding ReRegisterCustDataAsync","ReRegisterCustDataAsyncIdleTask","",td,t,"","");
    end;

    if (EIBb.OutEPayments!=0) then begin
      NewPeriodicTask("GetBankStatement","Getting Bank Statment","HTSCSGetBankStatementIdleTask","",3600,"");
      NewPeriodicTask("GetEPaymentStatuses","Getting E-Payment Statuses","HTSCSGetEPaymentStatusIdleTask","",650,"");
    end;
    //Bk NewPeriodicTask("GetSupplierEInvoiceStatuses","Getting Supplier E-Invoice Statuses","HTSCSGetSupEInvStatusIdleTask","",400,"");
    //Bk NewPeriodicTask("SendSupplierEInvoiceStatuses","Sending Supplier E-Invoice Statuses","HTSCSSendSupEInvStatusIdleTask","",550,"");
    NewPeriodicTask("GetEVATDeclarationStatuses","Getting E-VAT Declaration Statuses","HTSCSGetEVATDecStatusIdleTask","",3000,"");
    NewPeriodicTask("GetSMSStatuses","Getting SMS Statuses","HTSCSGetSMSStatusIdleTask","",600,"");
    //Bk NewPeriodicTask("ResetStopEInvoices","Reset StopEInvoices checkbox","HTSCSResetStopEInvoicesIdleTask","",300,"");
    InitSysRunEstIdleTasks;

//    NewPeriodicTask("SendEInvoice","Send EInvoices","HTSCSSendEInvoiceIdleTask","",280,"");
//SendEInvoice queing change
    startt = CurrentTime;
    t = AddMinutes(startt,2);
    td = CurrentDate;
    if (t<startt) then begin
      td = AddDay(td,1);
    end;
    if (HasLocalization("ARG")==false) and (HasLocalization("EST")==false) then begin //Bk
      NewTimedTask("SendEInvoice","Send E-Invoices","HTSCSSendEInvoiceIdleTask","",td,t,"","");

//    NewPeriodicTask("GetEInvoiceStatuses","Getting E-Invoice Statuses","HTSCSGetEInvoiceStatusIdleTask","",470,"");
//SendEInvoice queing change
      t = AddMinutes(startt,8);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("GetEInvoiceStatuses","Getting E-Invoice Statuses","HTSCSGetEInvoiceStatusIdleTask","",td,t,"","");

      t = AddMinutes(startt,10);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("ReceiveEInvoice","Receive E-Invoice","HTSCSReceiveEInvoiceIdleTask","",td,t,"","");
//    NewPeriodicTask("ReceiveEInvoice","Run ReceiveEInvoice","HTSCSReceiveEInvoiceIdleTask","",600,"");


      NewPeriodicTask("SendEPayment","Send E-Payments","HTSCSSendEPaymentIdleTask","",400,"");
      NewPeriodicTask("SendEDirectDebit","Send E-Direct Debit","HTSCSSendEDirectDebitIdleTask","",400,"");
//    NewPeriodicTask("GetSwedBankReply","Get SwedBank Reply","HTSCSGetSwedBankReplyIdleTask","",400,"");
    end;
//    NewPeriodicTask("SendArgEInvoice","Send Argentinian Invoices","HTSCSSendArgEInvoiceIdleTask","",80,"");
//if below 2 lines out , above 2 lines should be in

    if (IEb.RegInCountry==13) then begin
      NewPeriodicTask("GetArgEInvoiceStatuses","Getting Argentinian E-Invoice Statuses","HTSCSArgGetEInvoiceStatusIdleTask","",300,"");
      NewPeriodicTask("SendArgEInvoiceFromCS","Send Argentinian Invoices from Customer Server","HTSCSSendArgEInvoiceFromCSIdleTask","",40,"");
      NewPeriodicTask("HANDLE-ARG-EINVOICES","Send Argentinian E-Invoices","HandleArgEInvoicesFECAESolicitar","",60,"");
    end;
    NewPeriodicTask("SendMexEInvoiceFromCS","Send Mexican Invoices from Customer Server","HTSCSSendMexEInvoiceFromCSIdleTask","",30,"");
    
    
    NewPeriodicTask("TreatETasksQueue_SENDSMS","Treat ETask Queue SENDSMS","TreatETasksQueueVc","SENDSMS",25,"");
    
    NewPeriodicTask("TreatAlarmIdleTasks","Treat Alarm's Idle Tasks","TreatAlarmIdleTasks","",35,"");
    
    t = CurrentTime;
//  if (ERb.IdleTask!=0) then begin
    t.minute = t.minute + 3;
//    NewTimedTask("AutoExchangeRates","Get Exchange Rates","HTSCSXRateIdleTask","",CurrentDate,t,"","");
    //cust KB 06.02.2017
    if (EInvQIntr.GetCurRateReq < 3600 OR EInvQIntr.GetCurRateReq > 14400) then begin
      periodSec = 10800;
    end else begin
      periodSec = EInvQIntr.GetCurRateReq;
    end;
    NewPeriodicTask2("AutoEstExchangeRates","Get Exchange Rates","HTSEstCurRateIdleTask","",periodSec,"");
    //cust end

//  end;

    if (ServerMode) then begin
      InitASPIdleTasks;
    end;

    t = CurrentTime;
    t.second = t.second + 3;
    NewTimedTask2("RecalculateKPIsStartup","Recalculate KPIs Rates","RecalculateKPIs","startup",CurrentDate,t,"","");
    // NewPeriodicTask2("RecalculateKPIsStartup","Recalculate KPIs","RecalculateKPIs","",300,"");
    NewPeriodicTask("TestEmailQueueStopped","Check if Email Queue Stopped","TestEmailQueueStoppedIdleTask","",300,"");
    NewPeriodicTask("CloudServicesStoppedTest","Check if Cloud Services have stopped","CloudServicesStoppedTestIdleTask","",300,"");

    t = CurrentTime;
    t.second = t.second + 3;
    NewTimedTask2("UpdateLicenses","Update Licenses","UpdateLicensesIdleTask","",CurrentDate,t,"","");

    if (CDb.UpdStockMaint!=0) then begin
      if (nonblanktime(CDb.UpdStockMaintTime)) then begin
//        startt = CurrentTime;
        t = AddTime_Minutes(startt,CDb.UpdStockMaintTime);
        td = CurrentDate;
        if (t<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("POSUpdateStock","Update Stock from Restaurant and POS","POSUpdateStockIdleTasks","",td,t,"","");
      end;
    end;

    if (CDb.RestUpdStockMaint!=0) then begin
      if (nonblanktime(CDb.RestUpdStockMaintTime)) then begin
//        startt = CurrentTime;
        t = AddTime_Minutes(startt,CDb.RestUpdStockMaintTime);
        td = CurrentDate;
        if (t<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("POSUpdateStock","Update Stock from Restaurant and POS","POSUpdateStockIdleTasks","",td,t,"","");
      end;
    end;
    if (CDb.CashupMaint!=0) then begin
      if (nonblanktime(CDb.CashupMaintInterval)) then begin
        t = AddTime_Minutes(CurrentTime,CDb.CashupMaintInterval);
        td = CurrentDate;
        if (t<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("POS Cashup","Cashup Maintenance","POSCashupIdleTasks","",td,t,"","");
      end;
    end;
    if (nonblanktime(GSb.AutoEnrollmentInterval)) then begin
      t = AddTime_Minutes(CurrentTime,GSb.AutoEnrollmentInterval);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("GSXQueueIdleTasks","GSX Queue","GSXQueueIdleTasks","",td,t,"","");
    end;
  end;
  
  return;
end;

// I don't think this is correct, it is very easy to start the same periodic task several times....
// WNS: what if user in a certain company switches off for example E-Invoicing and saves? this will switch off einvoicing for all companies until restart, or until setting change?
global
updating procedure InitIdleTasks_EInvoiceOnOKWindow(record EInvoiceBlock EIBb,record EInvoiceBlock EIBprevb)
begin
  Time t;

//Bk, ts - 2018/02
  goto LInitIdleTasks_EInvoiceOnOKWindow;
//Bk
  if (EIBb.StopEInvoices!=0) then begin 
    goto LInitIdleTasks_EInvoiceOnOKWindow;
  end;
  if (EIBb.DefaultEBehave!=0) then begin // If you use this feature, you have to restart to make the change...
    goto LInitIdleTasks_EInvoiceOnOKWindow;
  end;
  if (EIBprevb.OutEInvoices==0) and (EIBb.OutEInvoices!=0) then begin
    NewPeriodicTask("SendEInvoice","Send EInvoices","HTSCSSendEInvoiceIdleTask","",280,"");
    NewPeriodicTask("GetEInvoiceStatuses","Getting E-Invoice Statuses","HTSCSGetEInvoiceStatusIdleTask","",470,"");
  end;
  if (EIBprevb.OutEInvoices!=0) and (EIBb.OutEInvoices==0) then begin
    t = CurrentTime;
    t.second = t.second + 10;
    NewTimedTask("Remove_SendEInvoice","Remove SendEInvoice","HTSCSSendEInvoiceIdleTaskRemoveIdleTask","",CurrentDate,t,"","");
  end;
  if (EIBprevb.RcvEInvoices==0) and (EIBb.RcvEInvoices!=0) then begin
    NewPeriodicTask("ReceiveEInvoice","Send ReceiveEInvoice","HTSCSReceiveEInvoiceIdleTask","",600,"");
    NewPeriodicTask("SendSupplierEInvoiceStatuses","Sending Supplier E-Invoice Statuses","HTSCSSendSupEInvStatusIdleTask","",550,"");
    NewPeriodicTask("GetSupplierEInvoiceStatuses","Getting Supplier E-Invoice Statuses","HTSCSGetSupEInvStatusIdleTask","",400,"");
  end;
  if (EIBprevb.RcvEInvoices!=0) and (EIBb.RcvEInvoices==0) then begin
    t = CurrentTime;
    t.second = t.second + 10;
    NewTimedTask("Remove_ReceiveEInvoice","Remove ReceiveEInvoice","HTSCSReceiveEInvoiceIdleTaskRemoveIdleTask","",CurrentDate,t,"","");
    NewTimedTask("Remove_SendSupplierEInvoiceStatuses","Remove SendSupplierEInvoiceStatuses","HTSCSSendSupEInvStatusRemoveIdleTask","",CurrentDate,t,"","");
    NewTimedTask("Remove_GetSupplierEInvoiceStatuses","Remove GetSupplierEInvoiceStatuses","HTSCSGetSupEInvStatusRemoveIdleTask","",CurrentDate,t,"","");
  end;  
  if (EIBprevb.OutEDirDebt==0) and (EIBb.OutEDirDebt!=0) then begin
    NewPeriodicTask("SendEDirectDebit","Send EDirecDebit","HTSCSSendEDirectDebitIdleTask","",400,"");
    NewPeriodicTask("GetEPaymentStatuses","Getting E-Payment Statuses","HTSCSGetEPaymentStatusIdleTask","",650,"");
  end;
  if (EIBprevb.OutEDirDebt!=0) and (EIBb.OutEDirDebt==0) then begin
    t = CurrentTime;
    t.second = t.second + 10;
    NewTimedTask("Remove_SendEDirectDebit","Remove SendEDirectDebit","HTSCSSendEDirectDebitIdleTaskRemoveIdleTask","",CurrentDate,t,"","");
    NewTimedTask("Remove_GetEPaymentStatuses","Remove GetEPaymentStatuses","HTSCSGetEPaymentStatusRemoveIdleTask","",CurrentDate,t,"","");
  end;
  if (EIBprevb.OutEPayments==0) and (EIBb.OutEPayments!=0) then begin
    NewPeriodicTask("SendEPayment","Send EPayments","HTSCSSendEPaymentIdleTask","",400,"");
//    NewPeriodicTask("GetSwedBankReply","Get SwedBank Reply","HTSCSGetSwedBankReplyIdleTask","",400,"");
    NewPeriodicTask("GetBankStatement","Getting Bank Statment","HTSCSGetBankStatementIdleTask","",3600,"");
    NewPeriodicTask("GetEPaymentStatuses","Getting E-Payment Statuses","HTSCSGetEPaymentStatusIdleTask","",400,"");
  end;
  if (EIBprevb.OutEPayments!=0) and (EIBb.OutEPayments==0) then begin
    t = CurrentTime;
    t.second = t.second + 10;
    NewTimedTask("Remove_SendEPayment","Remove SendEPayment","HTSCSSendEPaymentIdleTaskRemoveIdleTask","",CurrentDate,t,"","");
    NewTimedTask("Remove_GetSwedBankReply","Remove GetSwedBankReply","HTSCSGetSwedBankReplyIdleTaskRemoveIdleTask","",CurrentDate,t,"","");
    NewTimedTask("Remove_GetBankStatement","Remove GetBankStatement","HTSCSGetBankStatementRemoveIdleTask","",CurrentDate,t,"","");
    NewTimedTask("Remove_GetEPaymentStatuses","Remove GetEPaymentStatuses","HTSCSGetEPaymentStatusRemoveIdleTask","",CurrentDate,t,"","");
  end;
  if (EIBprevb.OutArgEInvoices==0 and EIBprevb.SendExportIV==0) then begin
    if (EIBb.OutArgEInvoices!=0 or EIBb.SendExportIV!=0) begin
//      NewPeriodicTask("SendArgEInvoice","Send Argentinian Invoices","HTSCSSendArgEInvoiceIdleTask","",80,"");
      NewPeriodicTask("SendArgEInvoiceFromCS","Send Argentinian Invoices from Customer Server","HTSCSSendArgEInvoiceFromCSIdleTask","",40,"");
      NewPeriodicTask("HANDLE-ARG-EINVOICES","Send Argentinian E-Invoices","HandleArgEInvoicesFECAESolicitar","",60,"");
      NewPeriodicTask("GetArgEInvoiceStatuses","Getting Argentinian E-Invoice Statuses","HTSCSArgGetEInvoiceStatusIdleTask","",390,"");
    end;
  end;
LInitIdleTasks_EInvoiceOnOKWindow:;
  return;
end;

global
updating procedure InitIdleTasks_EROnOKWindow(record ERBlock EIBb,record ERBlock EIBprevb)
begin
  Time t;

  if (EIBb.BCRates!=0) and (EIBprevb.BCRates==0) then begin
    if (EIBb.IdleTask!=0) then begin
      t = CurrentTime;
      t.minute = t.minute + 3;
//cust TS-2015/06      NewTimedTask("AutoExchangeRates","Get Exchange Rates","HTSCSXRateIdleTask","",CurrentDate,t,"","");
      if (TaskExists("AutoEstExchangeRates" & CurrentCompany)) then begin      
        RemoveTask("AutoEstExchangeRates" & CurrentCompany);
      end;
      NewTimedTask2("AutoEstExchangeRates" & CurrentCompany,"Get Exchange Rates","HTSEstCurRateIdleTask",CurrentCompany,CurrentDate,t,"","");
    end;
  end;
  return;
end;

global
procedure RestartSendEInvoiceRemote()
begin
  Time startt,t;
  Date td;

/* //Bk
  startt = CurrentTime;
  t = AddMinutes(startt,2);
  td = CurrentDate;
  if (t<startt) then begin
    td = AddDay(td,1);
  end;
  NewTimedTask("SendEInvoice","Send E-Invoices","HTSCSSendEInvoiceIdleTask","",td,t,"","");
*/
  return;
end;

global
procedure RestartReceiveEInvoiceRemote()
begin
  Time startt,t;
  Date td;

/* //Bk
  startt = CurrentTime;
  t = AddMinutes(startt,10);
  td = CurrentDate;
  if (t<startt) then begin
    td = AddDay(td,1);
  end;
  NewTimedTask("ReceiveEInvoice","Receive E-Invoice","HTSCSReceiveEInvoiceIdleTask","",td,t,"","");
*/
  return;
end;

global
procedure RestartSendEPaymentRemote()
begin
/* //Bk
  NewPeriodicTask("SendEPayment","Send E-Payments","HTSCSSendEPaymentIdleTask","",400,"");
*/
  return;
end;

global
procedure RestartSendEDirectDebitRemote()
begin
/* //Bk
  NewPeriodicTask("SendEDirectDebit","Send E-Direct Debit","HTSCSSendEDirectDebitIdleTask","",400,"");
*/
  return;
end;

global
procedure RestartGetEVATDeclarationStatusesRemote()
begin
/* //Bk
  NewPeriodicTask("GetEVATDeclarationStatuses","Getting E-VAT Declaration Statuses","HTSCSGetEVATDecStatusIdleTask","",3000,"");
*/
  return;
end;

global
procedure RestartCloudServicesRemote(record RcVc RepSpec)
begin
  Time startt,t;
  Date td;

/* //Bk
  switch (RepSpec.f1) begin
    case "SendEInvoice":
      startt = CurrentTime;
      t = AddMinutes(startt,10);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("SendEInvoice","Send E-Invoices","HTSCSSendEInvoiceIdleTask","",td,t,"","");
    case "ReceiveEInvoice":
      startt = CurrentTime;
      t = AddMinutes(startt,10);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("ReceiveEInvoice","Receive E-Invoice","HTSCSReceiveEInvoiceIdleTask","",td,t,"","");
    case "SendEPayment":
      NewPeriodicTask("SendEPayment","Send E-Payments","HTSCSSendEPaymentIdleTask","",400,"");
    case "SendEDirectDebit":
      NewPeriodicTask("SendEDirectDebit","Send E-Direct Debit","HTSCSSendEDirectDebitIdleTask","",400,"");
    case "GetEVATDeclarationStatuses":
      NewPeriodicTask("GetEVATDeclarationStatuses","Getting E-VAT Declaration Statuses","HTSCSGetEVATDecStatusIdleTask","",3000,"");
  end;
*/
  return;
end;

global
procedure RestartSendEstEInvoiceRemote(record EInvQueryIntrvlBlock ESb)
begin
  LongInt res;
  
  if (ServerMode or SingleUserMode) then begin
    if (TaskExists("SendEstEInvoice")) then begin      
      RemoveTask("SendEstEInvoice");
    end;
    res = ESb.EInvReq;
    if ((res <= 0) or (res > 14400)) then begin res = 400; end;
    NewPeriodicTask2("SendEstEInvoice","Send E-Invoices","SendEstEInvoiceIdleTask","",res,"");//400
  end;
  return;
end;

global
procedure RestartReceiveEstEInvoiceRemote(record EInvQueryIntrvlBlock ESb)
begin
  LongInt res;

  if (ServerMode or SingleUserMode) then begin
    if (TaskExists("ReceiveEstEInvoice")) then begin      
      RemoveTask("ReceiveEstEInvoice");
    end;
    res = ESb.SupInvReq;
    if ((res <= 0) or (res > 14400)) then begin res = 400; end;
    NewPeriodicTask2("ReceiveEstEInvoice","Receive supplier E-Invoices","ReceiveEstEInvoiceIdleTask","",res,"");//400
  end;
  return;
end;
