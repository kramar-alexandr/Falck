//cust KB 1.06.2017, IR new functions
external function Boolean CheckInternetEnabler();
external updating procedure ServiceSelectWClassSendMulti(string,string);
external function string 255 AddStr(string,string,string);
external procedure GetUserEmail(string,var string);
external procedure SendFunctionVersion(string,string,var Area);
external procedure SendTextParameter(string,var Area);
external procedure SendEOLParameter(var Area);
external function string 100 CreateCompID();
external procedure GetUserName(string,var string);

remote procedure GetAllCreditScoresFromIR(var longint, var string);
remote procedure SendDebtRecordsToHTS();
remote function boolean SendRegisterRequestRemote(area);
remote updating procedure CloseServicesThroughHTS(string,string);//ts - 2018/04, added parameter for partner

global
procedure InitIdleTasksIR()
begin
  if (ServerMode or SingleUserMode) then begin
    if (TaskExists("IRIdleTasks") == false) then begin
      NewPeriodicTask2("IRIdleTasks","IRIdleTasks","IRIdleTasks","",1800,"");
    end;
  end;
  return;
end;

global
function boolean IRServiceActivated(string serviceName)
begin
  boolean res;
  record EInvoiceBlock EInvoicer;
  record IRSetBlock IRSetbl;
  
  res = false;
  if (nonblank(serviceName)) then begin
    BlockLoad(EInvoicer);
    switch(serviceName) begin
      case "ACCESSWEBLINK":
        if (EInvoicer.WebLinkServiceFlag !=0) then begin res = true; end;
        BlockLoad(IRSetbl);
        if (IRSetbl.ServiceDisabledFlag == 1) then begin
          res = false;
        end;
      case "FINDCREDITSCORE":
        if (EInvoicer.CreditScoreServiceFlag !=0) then begin res = true; end;
        BlockLoad(IRSetbl);
        if (IRSetbl.ServiceDisabledFlag == 1) then begin
          res = false;
        end;
      case "SENDDEBTINFO":
        if (EInvoicer.DebtsServiceFlag !=0) then begin res = true; end;
        BlockLoad(IRSetbl);
        if (IRSetbl.ServiceDisabledFlag == 1) then begin
          res = false;
        end;
      case "IRSENDESTADRLOOKUP":
        if (EInvoicer.CustomerDataServiceFlag !=0) then begin res = true; end;
        BlockLoad(IRSetbl);
        if (IRSetbl.ServiceDisabledFlag == 1) then begin
          res = false;
        end;
      case "SENDESTADRLOOKUP":
        if (EInvoicer.Service5Flag !=0) then begin res = true; end;
      case "SENDESTCCLOOKUP":
        if (EInvoicer.Service4Flag !=0) then begin res = true; end;
      case "GETSUPPLIERESTEINVOICEPDF":
        if (EInvoicer.InEstEInvoices !=0) and (EInvoicer.StopInEstEInvPdf !=1) then begin res = true; end;
      case "GETESTEINVOICEPDF":
        if (EInvoicer.InIVEstEInvoices !=0) and (EInvoicer.StopInIVEstEInvPdf !=1) then begin res = true; end;
    end;
  end;
  IRServiceActivated = res;
  return;
end;

global updating
procedure UpdateIRServiceLastDateAndTime(string serviceName)
begin
  record EInvoiceBlock EInvoiceBlockr;
  BlockLoad(EInvoiceBlockr);
  switch(serviceName) begin
    case "FINDCREDITSCORE":
      EInvoiceBlockr.CreditScoreStatusDate = CurrentDate;
      EInvoiceBlockr.CreditScoreStatusTime = CurrentTime;
    case "SENDESTADRLOOKUP":
      EInvoiceBlockr.CustomerDataStatusDate = CurrentDate;
      EInvoiceBlockr.CustomerDataStatusTime = CurrentTime;
    case "ACCESSWEBLINK":
      EInvoiceBlockr.WebLinkStatusDate = CurrentDate;
      EInvoiceBlockr.WebLinkStatusTime = CurrentTime;
    case "SENDDEBTINFO":
      EInvoiceBlockr.DebtsStatusDate = CurrentDate;
      EInvoiceBlockr.DebtsStatusTime = CurrentTime;
  end;
  BlockStore(EInvoiceBlockr);
  return
end;

global
updating procedure SendActivationRequestsIR()
begin
  integer wn,termsWindow, eSettWindow;
  record RcVc RepSpec;
  string 255 tstr,closelist;
  record IRSetBlock IRSetbl;

  wn = CurWindow;
  termsWindow = MotherWindow(wn);
  eSettWindow = MotherWindow(termsWindow);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);

  //Handle each service selected as a separate request
  //RepSpec.flags[29] = 1; // flags[29] signals to ServiceSelectWClassSend that the service belongs to IR
  if (RepSpec.flags[1] <> 0) then begin
    tstr = AddStr(tstr,"IRCREDSCORE",",");//CreditScore
  end else begin
    closelist = AddStr(closelist,"7",",");//CreditScore
  end;
  if (RepSpec.flags[2] <> 0) then begin
    tstr = AddStr(tstr,"IRCUDATA",",");//Customer data
  end else begin
    closelist = AddStr(closelist,"8",",");//CreditScore
  end;
  if (RepSpec.flags[3] <> 0) then begin
    tstr = AddStr(tstr,"IRWEBLINK",",");//Web links
  end else begin
    closelist = AddStr(closelist,"9",",");//CreditScore
  end;  if (RepSpec.flags[4] <> 0) then begin
    tstr = AddStr(tstr,"IRDEBTHANDLE",",");//Debt handling
  end else begin
    closelist = AddStr(closelist,"10",",");//CreditScore
  end;
  if(nonblank(tstr)) then begin
    BlockLoad(IRSetbl);
    IRSetbl.UpdCredScoreSchedHour = 2; //default time
    IRSetbl.SendDebtsSchedHour = 2; //default time
    BlockStore(IRSetbl);
    InitIdleTasksIR;
  end;
  ServiceSelectWClassSendMulti(tstr,RepSpec.f1);
  CloseServicesThroughHTS(closeList,"");//ts - 2018/04, added parameter for partner
  MessageBox(1500000,"");
  CloseWindow(wn);
  CloseWindow(termsWindow);
  CloseWindow(eSettWindow);
  return;
end;

global
procedure OpenTermsInBrowserIR()
begin
  OpenWebBrowser("https://www.excellent.ee/kstingimused");
  return;
end;

global
procedure OpenActivPromptIR()
begin
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  OpenWindow("ActivPromptWClass",0,wn,"","",RepSpec);
  return;
end;

global
procedure GoToActivationIR()
begin
  record EInvoiceBlock EInvoicer;
  integer wn;

  wn = CurWindow;
  CloseWindow(wn); 
  OpenWindow("EInvoiceTClass",0,0,"","",EInvoicer);
  WindowDeactivateField(CurWindow);
  ActivateTile(CurWindow,5);
  return;
end;

global
procedure OpenRegWindowIR()
begin
  record RcVc pRepSpec,RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,pRepSpec);
  if(nonblank(pRepSpec.f1)) then begin
    RepSpec.f1 = pRepSpec.f1;
    RepSpec.flags[1] = 1;
    RepSpec.flags[2] = 1;
    RepSpec.flags[3] = 1;
    RepSpec.flags[4] = 1;
    OpenWindow("IRRegisterWClass",0,wn,"","",RepSpec);
  end else begin
    MessageBox(2289,"");
  end;
  return;
end;

global
procedure OpenTermsWindowIR()
begin
  record RcVc RepSpec;
  integer wn;
  record EInvoiceBlock EIb;
  string 100 tstr;

  wn = CurWindow;
  BlockLoad(EIb);
  if (EIb.TestFlag==0) then begin
    if (CheckInternetEnabler==false) then begin
      MessageBox(1500007,"");
      CloseWindow(wn);
      goto LIROpenTermsWindow;
    end;
  end;
  GetUserEmail(CurrentUser,tstr);
  RepSpec.f1 = tstr;
  RepSpec.flags[1] = EIb.CreditScoreServiceFlag;
  RepSpec.flags[2] = EIb.CustomerDataServiceFlag;
  RepSpec.flags[3] = EIb.WebLinkServiceFlag;
  RepSpec.flags[4] = EIb.DebtsServiceFlag;
  OpenWindow("IRTermsWClass",0,wn,"","",RepSpec);
LIROpenTermsWindow:;
  return;
end;

global
procedure CloseActiveWindowIR()
begin
  integer wn;

  wn = CurWindow;
  CloseWindow(wn); 
  return;
end;

global updating
procedure ManageTimedEventsm()
begin
  record RcVc RepSpec;
  record BackupBlock Backupbl;
  integer wn;
  
  BlockLoad(Backupbl);
  if(Backupbl.DailyHAL == "IRIdleTasks") then begin 
    Backupbl.DailyHAL = ""; //to clean if user already has this task scheduled
    BlockStore(Backupbl);
  end;
  wn = CurWindow;
  OpenWindow("IRIdleTasksManageWClass",0,wn,"","",RepSpec);
  return;
end;


global updating
procedure CredScoreTaskAdd()
begin
  record IRSetBlock IRSetbl;
  record RcVc RepSpec;
  string 255 functionName;
  integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  BlockLoad(IRSetbl);
  IRSetbl.UpdCredScoreSchedHour = RepSpec.flags[0];
  BlockStore(IRSetbl);
  InitIdleTasksIR;
  MessageBox(1500065,"");
  return;
end;

global updating
procedure SendDebtsTaskAdd()
begin
  record IRSetBlock IRSetbl;
  record RcVc RepSpec;
  string 255 functionName;
  integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  BlockLoad(IRSetbl);
  IRSetbl.SendDebtsSchedHour = RepSpec.flags[1];
  BlockStore(IRSetbl);
  InitIdleTasksIR;
  MessageBox(1500067,"");
  return;
end;

global updating
procedure CredScoreTaskRemove()
begin
  record IRSetBlock IRSetbl;
  record RcVc RepSpec;
  string 255 functionName;
  integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  BlockLoad(IRSetbl);
  IRSetbl.UpdCredScoreSchedHour = -1;
  BlockStore(IRSetbl);
  MessageBox(1500066,"");
  return;
end;

global updating
procedure SendDebtsTaskRemove()
begin
  record IRSetBlock IRSetbl;
  record RcVc RepSpec;
  string 255 functionName;
  integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  BlockLoad(IRSetbl);
  IRSetbl.SendDebtsSchedHour = -1;
  BlockStore(IRSetbl);
  MessageBox(1500068,"");
  return;
end;

function boolean TimeToRunIRService(string serviceName,var Integer ComplFlag)
begin
  boolean res;
  record IRSetBlock IRSetbl;
  time curTime;

  res = false;
  curTime = CurrentTime;
  BlockLoad(IRSetbl);
  if(serviceName == "SENDDEBTINFO") then begin
    if(IRSetbl.SendDebtsSchedHour != curTime.hour) then begin
      ComplFlag = 0;
    end;
    if(IRSetbl.SendDebtsSchedHour == curTime.hour AND IRSetbl.SendDebtsComplFlag == 0) then begin
      ComplFlag = 1;
      res = true;
    end;
  end;
  if(serviceName == "FINDCREDITSCORE") then begin
    if(IRSetbl.UpdCredScoreSchedHour != curTime.hour) then begin
      ComplFlag = 0;
    end;
    if(IRSetbl.UpdCredScoreSchedHour == curTime.hour AND IRSetbl.CredScoreComplFlag == 0) then begin
      ComplFlag = 1;
      res = true;
    end;
  end;
  TimeToRunIRService = res;
  return;
end;

global
updating procedure StoreIRSetBlock(record IRSetBlock IRSetbl,Integer SendDebtsComplFlag,Integer CredScoreComplFlag)
begin
  IRSetbl.SendDebtsComplFlag = SendDebtsComplFlag;
  IRSetbl.CredScoreComplFlag = CredScoreComplFlag;
  BlockStore(IRSetbl);
  return;
end;

global
procedure IRIdleTasks(string arg)
begin
  string 255 errDescr;
  longint count;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  record IRSetBlock IRSetbl;
  Integer i,rwcnt;
  Integer compnr,curcomp;
  Integer SendDebtsComplFlag,CredScoreComplFlag;
  boolean stopIdleTask;

  stopIdleTask = true;
  if(ServerMode OR SingleUserMode) then begin
    //SetDatabaseToUnsafeMode; //didn't work with this option, Kostja to check
    curcomp = CurrentCompany;
    BlockLoad(CompaniesRec);
    rwcnt = MatRowCnt(CompaniesRec);
    for (i=0;i<rwcnt;i=i+1) begin
      count = 0;
      errDescr = "";
      MatRowGet(CompaniesRec,i,comprw);
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        BlockLoad(IRSetbl);
        if (IRServiceActivated("SENDDEBTINFO")) then begin
          stopIdleTask = false;
          if (TimeToRunIRService("SENDDEBTINFO",SendDebtsComplFlag)) then begin
            LogText(0,"Sending debt records to handling for company " & CurrentCompany);
            SendDebtRecordsToHTS;
          end;
        end;
        if (IRServiceActivated("FINDCREDITSCORE")) then begin
          stopIdleTask = false;
          if (TimeToRunIRService("FINDCREDITSCORE",CredScoreComplFlag)) then begin
            LogText(0,"Updating credit scores for company " & CurrentCompany);
            GetAllCreditScoresFromIR(count,errDescr);
          end;
        end;
        queued.StoreIRSetBlock(IRSetbl,SendDebtsComplFlag,CredScoreComplFlag);
      end;
    end;
    ResetCompany(curcomp);
    //SetDatabaseToSafeMode; //didn't work with this option, Kostja to check
  end;
  if (stopIdleTask) then begin
    RemoveTask("IRIdleTasks");
  end;
  return;
end;

global
procedure OpenAccRegWindowIRsm()
begin
  record RcVc RepSpec;
  record UserVc Userr;
  integer wn;
  string 255 tstr;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    GetUserEmail(Userr.Code,tstr);
    RepSpec.f1 = tstr;
    GetUserName(Userr.Code,tstr);
    RepSpec.f2 = tstr;
    OpenWindow("IRAccConfirmWClass",0,wn,"","",RepSpec);
  end;
  return;
end;

global
procedure ConfirmRegisterIR()
begin
  record CYBlock CYb;
  record InternetEnablerBlock IEb;
  record EInvoiceBlock EIb;
  string 255 email,userName;
  Area a_req;
  record RcVc RepSpec;
  integer wn;

  BlockLoad(CYb);
  BlockLoad(IEb);
  BlockLoad(EIb);

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  email = RepSpec.f1;
  userName = RepSpec.f2;

  SendFunctionVersion("88.0","",a_req);
  SendTextParameter(CYb.VATNr,a_req);
  SendTextParameter(CYb.OrgNr,a_req);
  SendTextParameter(CYb.OrgNr2,a_req);
  SendTextParameter(CYb.CompName,a_req);
  SendTextParameter(CYb.ANACode,a_req);
  SendTextParameter(CYb.CountryCode,a_req);
  SendTextParameter(CYb.Phone,a_req);
  SendTextParameter(CYb.Fax,a_req);
  SendTextParameter(CYb.wwwAddr,a_req);
  SendTextParameter(CYb.emailAddr,a_req);
  SendTextParameter(DatabaseID,a_req);    
  SendTextParameter(CreateCompID,a_req);    
  SendTextParameter(IEb.RegInCountry,a_req);
  SendTextParameter(IEb.CustomerCode,a_req);
  SendTextParameter("",a_req); //partner to be empty
  SendTextParameter(EIb.TestFlag,a_req);
  SendTextParameter(email,a_req);
  SendTextParameter(IEb.Contract,a_req);
  SendTextParameter(userName,a_req);
  SendEOLParameter(a_req);

  if(SendRegisterRequestRemote(a_req)) then begin
    MessageBox(1500019,"");
  end else begin
    MessageBox(20244,"");
  end;
  CloseActiveWindowIR;
  return;
end;
