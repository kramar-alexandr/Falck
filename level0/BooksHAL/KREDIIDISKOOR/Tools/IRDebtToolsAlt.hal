external function Boolean FindTheUser(var record UserVc);
external procedure SendTextParameter(string,var Area);
external procedure SendEOLParameter(var Area);
external function val GetInvoiceBalanceIR(record IVVc);
remote updating procedure StoreCUServiceUsage(date,string,Integer,string,Integer,Integer);//cust, ts - 2018/04
external function LongInt CalculateLateDaysInstallmentInv(LongInt,Date,Date,Date,Boolean);
external function LongInt CalculateLateDays(Date,Date,Date,Boolean,Boolean);
external function Boolean SetInSet2(string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);

global
updating procedure HTSSendDebtsToHandlingReply(Area a_reply,Area replyheader,Boolean timedout)
begin
  if ((timedout) or (GetAreaLength(a_reply)<=0)) then begin
    //LogText(0,"Timeout or empty HTSSendDebtsToHandlingReply response");
  end else begin
    //LogText(0,"HTSSendDebtsToHandlingReply service server replied");
  end;
  return;
end;

global updating
procedure UpdDebtWithNewInvoiceBalance(var record IRDebtHandleVc IRDebtHandler,var Integer count)
begin
  record IVVc IVr;
  record IRDebtHandleVc oldIRDebtHandler;
  val newBalance;
  
  IVr.SerNr = IRDebtHandler.InvoiceNr;
  if ReadFirstMain(IVr,1,true) then begin
    newBalance = GetInvoiceBalanceIR(IVr);
    if (newBalance < 0) then begin
      newBalance = 0;
    end;
    if (IRDebtHandler.SentFlag!=1) then begin
      count = count + 1;
    end;
    if (IRDebtHandler.ClaimAmount != newBalance) or (IRDebtHandler.SentFlag!=1) then begin
      RecordCopy(oldIRDebtHandler,IRDebtHandler);
      IRDebtHandler.ClaimAmount = newBalance;
      IRDebtHandler.SentFlag = 1;
      RecordUpdate(oldIRDebtHandler,IRDebtHandler,false);
    end;
  end;
  return;
end;

global
updating procedure RemoveIRDebtHandlerRecord(array LongInt aInvoiceNr,Integer aCnt)
begin
  record IRDebtHandleVc IRDebtHandler;
  Integer i;

  for (i=0; i<aCnt; i=i+1) begin
    IRDebtHandler.InvoiceNr = aInvoiceNr[i];
    if (ReadFirstMain(IRDebtHandler,1,true)) then begin
      RecordDelete(IRDebtHandler);
    end;
  end;
  return;
end;

global
procedure SendDebtRecordsToHTS() //called as remote
begin
  record IRDebtHandleVc IRDebtHandler;
  record ServiceCacheVc SCr;
  record CYBlock CYb;
  area debtRecordsArea;
  boolean TrHs, testremove;
  Integer count,ncount,aCnt;
  array LongInt aInvoiceNr;

  SCr.Code = "SENDDEBTINFO";
  if (ReadFirstMain(SCr,1,true)) then begin
    count = 0; ncount = 0; aCnt = 0;
    TrHs = true;
    while (LoopMain(IRDebtHandler,3,TrHs)) begin
      if (TrHs) then begin
        testremove = false;
        qupdating.UpdDebtWithNewInvoiceBalance(IRDebtHandler,ncount);
        if (IRDebtHandler.PaidFlag != 0) then begin
          testremove = true;
        end;
        if (IRDebtHandler.ClaimAmount <= 0) then begin
          testremove = true;
        end;
        AddRecordToArea(IRDebtHandler,"IRDebtHandleVc",debtRecordsArea);
        count = count + 1;
        if (testremove) then begin //however it is sent for the last time with 0 balance
          aInvoiceNr[aCnt] = IRDebtHandler.InvoiceNr;
          aCnt = aCnt + 1;
        end;
      end;
    end;
    if (aCnt > 0) then begin
      queued.RemoveIRDebtHandlerRecord(aInvoiceNr,aCnt);
    end;
    if (count > 0) then begin
      SendAsyncWebRequest(SCr.ServiceHost,SCr.ServicePort,-1,false,"POST","/" & "HTSSendDebtsToHandling.hal","text/xml; charset=""utf-8""","",debtRecordsArea,"HTSSendDebtsToHandlingReply",40);//ts - 2018/04
      BlockLoad(CYb);
      queued.StoreCUServiceUsage(CurrentDate,CYb.OrgNr,10,"IRDEBTHANDLE",1,ncount);//cust, ts - 2018/04, e-service statistic
    end;
  end;
  return;
end;

global
function boolean IsIvoiceDebt(record IVVc IVr, record RcVc RepSpec)
begin
  boolean res;
  longint fromInv,toInv;
  string 20 fromCust,toCust;
  val overDueSum,overDueSumInBase1;
  date agedate;
  integer lateDays;
  record CUVc CUr;

  res = true;
  fromCust = FirstInRange(RepSpec.f2,20);
  toCust = LastInRange(RepSpec.f2,20);
  agedate = CurrentDate;

  //check for OK flag
  if (IVr.OKFlag != 1) then begin
    res = false;
    goto LIsIvoiceDebt;
  end;
  //check for late days
  if (IVr.InstallmentInv==1) then begin
    lateDays = CalculateLateDaysInstallmentInv(IVr.SerNr,IVr.InvDate,IVr.PayDate,agedate,false);
  end else begin
    lateDays = CalculateLateDays(IVr.InvDate,IVr.PayDate,agedate,false,true);
  end;
  if(-lateDays < RepSpec.flags[0] OR lateDays >= 0) then begin //NB! latedays is negative if overdue
    res = false;
    goto LIsIvoiceDebt;
  end;
  //check for customers range
  if(nonblank(RepSpec.f2)) then begin
    if (nonblank(toCust)) then begin
      if (IVr.CustCode > toCust) then begin
        res = false;
        goto LIsIvoiceDebt;
      end;
    end;
    if (nonblank(fromCust)) then begin
      if (IVr.CustCode < fromCust) then begin
        res = false;
        goto LIsIvoiceDebt;
      end;
    end;
  end;
  //check if overdue balances exists
  overDueSum = GetInvoiceBalanceIR(IVr);
  overDueSumInBase1 = MulRateToBase1(IVr.CurncyCode,overDueSum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  if(overDueSumInBase1 <= 0 OR blank(overDueSumInBase1)) then begin
    res = false;
    goto LIsIvoiceDebt;
  end;
  //check for minimum invoice overdue sum
  if(nonblank(RepSpec.vals0)) then begin
    if (overDueSumInBase1 < RepSpec.vals0 OR blank(overDueSumInBase1)) then begin
      res = false;
      goto LIsIvoiceDebt;
    end;
  end;
  //other common checks
  if(IVr.Sum4 <= 0) then begin
    res = false;
    goto LIsIvoiceDebt;
  end;
  if(IVr.InvType != kInvoiceTypeNormal) then begin
    res = false;
    goto LIsIvoiceDebt;
  end;
  //check for classifications of customer
  if(nonblank(RepSpec.f3)) then begin
    ResetLoop(CUr);
    CUr.Code = IVr.CustCode;
    if(ReadFirstMain(CUr,1,true)) then begin
      if (SetInSet2(RepSpec.f3,CUr.Classification) == true) then begin
        res = false;
        goto LIsIvoiceDebt;
      end;
    end else begin //if such customer does not exist
      res = false;
      goto LIsIvoiceDebt;
    end;
  end;
LIsIvoiceDebt:;
  IsIvoiceDebt = res;
  return;
end;

global updating
function boolean DoSendInvoiceAsDebtAlt(var record IVVc IVr, var string errDescr)
begin
  record IRDebtHandleVc IRDebtHandler;
  record CYBlock CYbl;
  record CUVc CUr;
  record BaseCurBlock bascur;
  record UserVc Userr;
  string 20 credRegCode,debtRegCode,reprentRegCode;
  string 255 credName,debtName,reprName,credContactName,credContactEmail,credContactPhone;
  string 5 curncyCode;
  longint invoiceNr;
  val invAmount;
  val claimAmount;
  date invIssDate,invDueDate,claimCreatedDate;
  integer paidFlag;
  boolean res, testf;

  res = false;
  testf = true;
  BlockLoad(CYbl);
  BlockLoad(bascur);
  credRegCode = CYbl.OrgNr;
  credName = CYbl.CompName;
  reprentRegCode = CYbl.OrgNr;
  reprName = CYbl.CompName;
  CUr.Code = IVr.CustCode;
  if ReadFirstMain(CUr,1,true) then begin
    debtRegCode = Trim(CUr.RegNr1);
    debtName = CUr.Name;
  end else begin
    testf = false; //do not create if no customer
    errDescr = USetStr(1500155);
  end;
  invoiceNr = IVr.SerNr;
  invAmount = IVr.Sum4;
  claimAmount = GetInvoiceBalanceIR(IVr);
  if(claimAmount > 0) then begin
    paidFlag = 0;
  end;
  if (nonblank(IVr.CurncyCode)) then begin
    curncyCode = IVr.CurncyCode;
  end else begin
    curncyCode = bascur.BaseCur1;;
  end;
  invIssDate = IVr.InvDate;
  invDueDate = IVr.PayDate;
  claimCreatedDate = CurrentDate;
  Userr.Code = CurrentUser;
  FindTheUser(Userr);
  credContactName = Userr.Name;
  credContactEmail = Userr.emailAddr;
  credContactPhone = Userr.Phone1;
  //do not create if no contacts are given at all
  if (blank(credContactName) AND blank(credContactEmail) AND blank(credContactPhone)) then begin
    testf = false;
    errDescr = USetStr(1500155);
  end;
  if (testf) then begin
    RecordNew(IRDebtHandler);
    IRDebtHandler.CredRegCode = credRegCode;
    IRDebtHandler.CredName = credName;
    IRDebtHandler.DebtRegCode = debtRegCode;
    IRDebtHandler.DebtName = debtName;
    IRDebtHandler.ReprentRegCode = reprentRegCode;
    IRDebtHandler.ReprName = reprName;
    IRDebtHandler.InvoiceNr = invoiceNr;
    IRDebtHandler.InvoiceAmount = invAmount;
    IRDebtHandler.ClaimAmount = claimAmount;
    IRDebtHandler.CurncyCode = curncyCode;
    IRDebtHandler.InvIssDate = invIssDate;
    IRDebtHandler.InvDueDate = invDueDate;
    IRDebtHandler.ClaimCreatedDate = claimCreatedDate;
    IRDebtHandler.PaidFlag = paidFlag;
    IRDebtHandler.CredContactName = credContactName;
    IRDebtHandler.CredContactEmail = credContactEmail;
    IRDebtHandler.CredContactPhone = credContactPhone;
    IRDebtHandler.SentFlag = 0;
    if (RecordInsert(IRDebtHandler,false)) then begin
      res = true;
    end else begin
      errDescr = USetStr(1500153);
    end;
  end;
LDoSendInvoiceAsDebtAlt:;
  DoSendInvoiceAsDebtAlt = res;
  return;
end;
