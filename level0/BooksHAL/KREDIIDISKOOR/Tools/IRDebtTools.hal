external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
//KB 19.07.2017 new functions to prepare and send debts through IR Graph API
external procedure JSONAddStringToArea(string, string, var area);
external procedure JSONEncloseAreaWithBrackets(var area);
external procedure JSONAddCommaToArea(var area);
remote function boolean PostDataFromAreaToIR(string, integer, string, area, var area);
//http area tools
external function integer ParseFullHTTPHeader(area, var vector string);
external procedure ParseDebtLocationReply(string, var string, var string);
//IRReqProcessTools
external procedure ParseURL_IR(string, var string, var integer, var string);
external function string 20 GetResponseStatus(area);
//IRTools
external updating procedure UpdateIRServiceLastDateAndTime(string);
//DebtBalanceTools
external function val GetInvoiceBalanceIR(record IVVc);
external function val GetOverDueSumIR(record CUVc);
//IRDebtToolsServer
remote function boolean SendDebtToIR(area, var area, var string);
remote function boolean IsIvoiceDebt(record IVVc,record RcVc);
//TODO remove when not required
remote updating function boolean DoSendInvoiceAsDebtAlt(var record IVVc, var string);

function string 20 GetContactType(record CUVc CUr)
begin
  string 20 res;

  switch(CUr.CustType) begin
    case 0: res = "Organization";
    case 1: res = "Person";
  end;
  GetContactType = res;
  return;
end;

function boolean PrepareDebtData(string cuCode, 
                          var string reprCountry, var string reprCode, var string reprType,
                          var string credCountry, var string credCode, var string credType,
                          var string debtCountry, var string debtCode, var string debtType,
                          var string currency, var string debtTotal, var string interest)
begin
  boolean res;
  record CYBlock CYbl;
  record CUVc CUr;
  record BaseCurBlock bascur;
  val debtTotalB1;
  val debtTotalVal;

  res = false;
  BlockLoad(bascur);
  BlockLoad(CYbl);
  reprCountry = CYbl.CountryCode;
  reprCode = CYbl.OrgNr;
  reprType = "Organization";

  credCountry = CYbl.CountryCode;
  //credCode = CYbl.OrgNr; //TODO enable when live and remove stub
  credCode = "10000002";
  credType = "Organization";

  CUr.Code = cuCode;
  if ReadFirstMain(CUr,1,true) then begin
    debtCountry = CUr.CountryCode;
    //debtCode = Trim(CUr.RegNr1); //TODO enable when live and remove stub
    debtCode = "10000001";
    //debtType = GetContactType(CUr); //TODO enable when live and remove stub
    debtType = "Organization";

    if (nonblank(bascur.BaseCur1)) then begin
      currency = bascur.BaseCur1;
    end else begin
      currency = "EUR";
    end;
    debtTotalB1 = GetOverDueSumIR(CUr);
    CurValToOtherCur(CurrentDate,bascur.BaseCur1,debtTotalB1,currency,debtTotalVal,DefaultCurRoundOff);
    debtTotal = ValToString(debtTotalVal,M4Val,"",".",0);
    interest = "0.00";
  end;
  if (blank(reprCountry) OR blank(reprCode) OR blank(reprType) OR
      blank (credCountry) OR blank(credCode) OR blank(credType) OR 
      blank (debtCountry) OR blank(debtCode) OR blank(debtType) OR 
      blank (currency) OR blank(debtTotal) OR blank(interest) ) then begin
        goto LSKIP;
  end;
  res = true;
LSKIP:;
  PrepareDebtData = res;
  return;
end;

function boolean PrepareDebtClaimData(record IVVc IVr,
                                      var string claimID, var string claimDueDate, var string claimAmount,
                                      var string currency, var string claimType, var string claimIssDate,
                                      var string claimAnnInterest, var string claimFine, var string claimDayInterest)
begin
  boolean res;
  val invoiceBal;
  date dueDate, issDate;

  claimID = IVr.SerNr;
  dueDate = IVr.PayDate;
  claimDueDate = DateToString(dueDate,"YYYY-MM-DD");
  invoiceBal = GetInvoiceBalanceIR(IVr);
  claimAmount = ValToString(invoiceBal,M4Val,"",".",0);
  currency = IVr.CurncyCode;
  claimType = "stub"; //not used
  issDate = IVr.InvDate;
  claimIssDate = DateToString(issDate,"YYYY-MM-DD");
  if (blank(IVr.IntCode)) then begin
    claimAnnInterest = "0.00";
  end else begin
    claimAnnInterest = ValToString(StringToVal(IVr.IntCode,M4Val),M4Val,"",".",0);
  end;
  claimFine = "0.00";
  claimDayInterest = "0.00";
  if (blank(claimID) OR blank(claimDueDate) OR blank(claimAmount) OR invoiceBal == 0 OR
      blank (currency) OR blank(claimType) OR blank(claimIssDate) OR 
      blank (claimAnnInterest) OR blank(claimFine) OR blank(claimDayInterest) ) then begin
        goto LSKIP;
  end;
  res = true;
LSKIP:;
  PrepareDebtClaimData = res;
  return;
end;

function boolean PrepareClaimDocData(record IVVc IVr, var string docID, var string docType, var string docSubject)
begin
  boolean res;

  docID = IVr.SerNr;
  docType = "invoice";
  docSubject = "stub"; //not used
  if (blank(docID) OR blank(docType) OR blank(docSubject)) then begin
    goto LSKIP;
  end;
  res = true;
LSKIP:;
  PrepareClaimDocData = res;
  return;
end;

function boolean BuildDebt(string cuCode, var area targetArea, var string errDescr)
begin
  string 50 reprCountry,reprCode,reprType,credCountry,credCode,credType,debtCountry,debtCode,debtType,currency,debtTotal,interest;
  boolean res;

  res = PrepareDebtData(cuCode,reprCountry,reprCode,reprType,credCountry,credCode,credType,debtCountry,debtCode,debtType,currency,debtTotal,interest);
  if (res) then begin
    JSONAddStringToArea("representative-country-code",reprCountry,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("representative-code",reprCode,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("representative-type",reprType,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("creditor-country-code",credCountry,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("creditor-code",credCode,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("creditor-type",credType,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("debtor-country-code",debtCountry,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("debtor-code",debtCode,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("debtor-type",debtType,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("currency",currency,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("debt-total",debtTotal,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("interest",interest,targetArea);
    JSONEncloseAreaWithBrackets(targetArea);
  end else begin
    errDescr = UsetStr(1500152);
  end;
  BuildDebt = res;
  return;
end;

function boolean BuildDebtClaim(record IVVc IVr, var area targetArea, var string errDescr)
begin
  string 50 claimID,claimDueDate,claimAmount,currency,claimType,claimIssDate,claimAnnInterest,claimFine,claimDayInterest;
  boolean res;

  res = PrepareDebtClaimData(IVr,claimID,claimDueDate,claimAmount,currency,claimType,claimIssDate,claimAnnInterest,claimFine,claimDayInterest);
  if (res) then begin
    JSONAddStringToArea("claim-identifier",claimID,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("due-date",claimDueDate,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("amount",claimAmount,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("currency",currency,targetArea);
    JSONAddCommaToArea(targetArea);
    //JSONAddStringToArea("claim-type",claimType,targetArea); //this field is optional in API, therefore skipped
    //JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("issuance-date",claimIssDate,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("annual-interest",claimAnnInterest,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("fine",claimFine,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("daily-interest",claimDayInterest,targetArea);
    JSONEncloseAreaWithBrackets(targetArea);
  end else begin
    errDescr = UsetStr(1500155);
  end;
  BuildDebtClaim = res;
  return;
end;

function boolean BuildClaimDoc(record IVVc IVr, var area targetArea, var string errDescr)
begin
  string 50 docID,docType,docSubject;
  boolean res;
  res = PrepareClaimDocData(IVr,docID,doctype,docSubject);
  if (res) then begin
    JSONAddStringToArea("document-identifier",docID,targetArea);
    JSONAddCommaToArea(targetArea);
    JSONAddStringToArea("document-type",docType,targetArea);
    //JSONAddCommaToArea(targetArea);
    //JSONAddStringToArea("document-subject",docSubject,targetArea); //this field is optional in API, therefore skipped
    JSONEncloseAreaWithBrackets(targetArea);
  end else begin
    errDescr = UsetStr(1500158);
  end;
  BuildClaimDoc = res;
  return;
end;

procedure BuildGraphFinalizer(var area targetArea, string graphURI)
begin
  JSONAddStringToArea("graph",graphURI,targetArea);
  JSONEncloseAreaWithBrackets(targetArea);
  return;
end;

procedure GetLocationsFromReply(area replyArea, var string idURI, var string graphURI)
begin
  string 255 debtLocationReply;
  vector string 255 httpReplyHeaders;

  if (GetAreaLength(replyArea) > 0) then begin
    ParseFullHTTPHeader(replyArea, httpReplyHeaders);
    debtLocationReply = httpReplyHeaders["Location"];
    if (nonblank(debtLocationReply)) then begin
      ParseDebtLocationReply(debtLocationReply,idURI,graphURI);
    end;
  end;
  return;
end;

function boolean SendDebtClaimToIR(area areaToSend, string debtURI, string graphURI, var area replyArea, var string errDescr)
begin
  integer port;
  string 255 funcName,host;
  boolean res;

  ParseURL_IR(debtURI,host,port,funcName);
  funcName = funcName & "/debt-claims?graph=" & graphURI;
  PostDataFromAreaToIR(host,port,funcName,areaToSend,replyArea);
  WriteAreaToFile(areaToSend,"debt_claim_request.txt",0); //TODO remove
  WriteAreaToFile(replyArea,"debt_claim_response.txt",0); //TODO remove
  if(GetResponseStatus(replyArea) == "201 Created") then begin
    res = true;
  end;
  if(res == false) then begin
    errDescr = USetStr(1500157);
  end;
  SendDebtClaimToIR = res;
  return;
end;

function boolean SendClaimDocToIR(area areaToSend, string claimURI, string graphURI, var area replyArea, var string errDescr)
begin
  integer port;
  string 255 funcName,host;
  boolean res;

  ParseURL_IR(claimURI,host,port,funcName);
  funcName = funcName & "/claim-documents?graph=" & graphURI;
  PostDataFromAreaToIR(host,port,funcName,areaToSend,replyArea);
  WriteAreaToFile(areaToSend,"debt_doc_request.txt",0); //TODO remove
  WriteAreaToFile(replyArea,"debt_doc_response.txt",0); //TODO remove
  if(GetResponseStatus(replyArea) == "201 Created") then begin
    res = true;
  end;
  if(res == false) then begin
    errDescr = USetStr(1500159);
  end;
  SendClaimDocToIR = res;
  return;
end;

function boolean SendFinalizeToIR(area areaToSend, string graphURI, var area replyArea, var string errDescr)
begin
  integer port;
  string 255 funcName,host;
  boolean res;

  ParseURL_IR(graphURI,host,port,funcName);
  funcName = "/finalize-graph"; //according to Graph API
  res = PostDataFromAreaToIR(host,port,funcName,areaToSend,replyArea);
  WriteAreaToFile(areaToSend,"debt_finalize_request.txt",0); //TODO remove
  WriteAreaToFile(replyArea,"debt_finalize_response.txt",0); //TODO remove
  if(res == false) then begin
    errDescr = USetStr(1500160);
  end;
  SendFinalizeToIR = res;
  return;
end;

function boolean CreateCustDebtIR(string cuCode, var area createDebtReplyArea, var string errDescr)
begin
  boolean res;
  area debtArea;

  res = true;
  if (BuildDebt(cuCode,debtArea,errDescr) == false) then begin
    res = false;
    goto LCreateCustDebtIR;
  end;
  if (SendDebtToIR(debtArea,createDebtReplyArea,errDescr) == false) then begin
    res = false;
  end;
LCreateCustDebtIR:;
  CreateCustDebtIR = res;
  return;
end;

function boolean CreateDebtClaimIR(record IVVc IVr, string debtURI, string graphURI, var area createClaimReplyArea, var string errDescr)
begin
  boolean res;
  area claimArea;

  res = true;
  if (BuildDebtClaim(IVr,claimArea,errDescr) == false) then begin
    res = false;
    goto LCreateDebtClaimIR;
  end;
  if (SendDebtClaimToIR(claimArea,debtURI,graphURI,createClaimReplyArea,errDescr) == false) then begin
    res = false;
  end;
LCreateDebtClaimIR:;
  CreateDebtClaimIR = res;
  return;
end;

function boolean CreateClaimDocIR(record IVVc IVr, string claimURI, string graphClaimURI, var area creadDocReplyArea, var string errDescr)
begin
  boolean res;
  area docArea;

  res = true;
  if (BuildClaimDoc(IVr,docArea,errDescr) == false) then begin
    res = false;
    goto LCreateClaimDocIR;
  end;
  if (SendClaimDocToIR(docArea,claimURI,graphClaimURI,creadDocReplyArea,errDescr) == false) then begin
    res = false;
  end;
LCreateClaimDocIR:;
  CreateClaimDocIR = res;
  return;
end;

function boolean FinalizeDebtGraphIR(string graphDocURI, var area finalizeReplyArea, var string errDescr)
begin
  boolean res;
  area graphFinArea;

  res = true;
  BuildGraphFinalizer(graphFinArea,graphDocURI);
  if(SendFinalizeToIR(graphFinArea,graphDocURI,finalizeReplyArea,errDescr) == false) then begin
    res = false;
  end;
LFinalizeDebtGraphIR:;
  FinalizeDebtGraphIR = res;
  return;
end;

global
function boolean DoSendInvoiceAsDebt(var record IVVc IVr, var string errDescr)
begin
  record IVVc oldIVr;  
  boolean res;
  area createDebtReplyArea, createClaimReplyArea, creadDocReplyArea, finalizeReplyArea;
  string 255 debtURI, graphURI, claimURI, graphClaimURI, docURI, graphDocURI; //TODO same graphURI always?
  vector string 255 httpReplyHeaders;

  //TODO must insert separate claims into same debt? are claims invoices?
  //TODO insert organization data?
  //TODO insert person data?
  res = false;
  if (CreateCustDebtIR(IVr.CustCode,createDebtReplyArea,errDescr) == false) then begin
    goto LDoSendInvoiceAsDebt;
  end;

  GetLocationsFromReply(createDebtReplyArea,debtURI,graphURI);
  if (nonblank(debtURI) AND nonblank(graphURI)) then begin
    if(CreateDebtClaimIR(IVr,debtURI,graphURI,createClaimReplyArea,errDescr) == false) then begin
      goto LDoSendInvoiceAsDebt;
    end;
    GetLocationsFromReply(createClaimReplyArea,claimURI,graphClaimURI);
  end;

  if (nonblank(claimURI) AND nonblank(graphClaimURI)) then begin
    if(CreateClaimDocIR(IVr,claimURI,graphClaimURI,creadDocReplyArea,errDescr) == false) then begin
      goto LDoSendInvoiceAsDebt;
    end;
    GetLocationsFromReply(creadDocReplyArea,docURI,graphDocURI);
  end;

  if (nonblank(docURI) AND nonblank(graphDocURI)) then begin
    if(FinalizeDebtGraphIR(graphDocURI,finalizeReplyArea,errDescr) == false) then begin
      goto LDoSendInvoiceAsDebt;
    end;
  end;

  if (GetAreaLength(finalizeReplyArea) > 0) then begin
    ParseFullHTTPHeader(finalizeReplyArea, httpReplyHeaders);
  end;
  if (httpReplyHeaders["Status"] == "200 OK") then begin
    res = true;
    //TODO remove or replace
    //RecordCopy(oldIVr,IVr);
    //IVr.SentToDebtsDate = CurrentDate;
    //RecordUpdate(oldIVr,IVr,false);
  end else begin
    errDescr = USetStr(1500161);
  end;
LDoSendInvoiceAsDebt:;
  DoSendInvoiceAsDebt = res;
  return;
end;

global updating
procedure SendInvoiceAsDebt()
begin
  record IVVc IVr;
  record RcVc RepSpec;
  integer wn,motherWn;
  longint invoiceSerNr;
  string 255 errDescr;

  wn = CurWindow;
  motherWn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  IVr.SerNr = RepSpec.long1;
  CloseWindow(wn);
  if (ReadFirstMain(IVr,1,true)) then begin
    if (IVr.OKFlag != 1) then begin
      MessageBox(1500162,"");
      goto LSendInvoiceAsDebtsm;
    end;
    if(IsIvoiceDebt(IVr,RepSpec)) then begin
      //if (DoSendInvoiceAsDebt(IVr,errDescr)) then begin
      if (DoSendInvoiceAsDebtAlt(IVr,errDescr)) then begin //TODO change back when ready
        MessageBox(1500151,"");
        if(motherWn != 0) then begin
          CloseWindow(motherWn);
        end;
      end else begin
        MessageBox(0,errDescr);
      end;
    end;
  end;
LSendInvoiceAsDebtsm:;
  UpdateIRServiceLastDateAndTime("SENDDEBTINFO");
  return;
end;

procedure OpenDebtSendConfirmWindowIR(longint invoiceSerNr, integer motherWn)
begin
  integer wn;
  record RcVc RepSpec;

  RepSpec.long1 = invoiceSerNr;
  OpenWindow("IRDebtHandleSendWClass",0,motherWn,"","",RepSpec);
  return;
end;

global
procedure OpenDebtSendConfirmWindowIRsm() //TODO use if need to add special menu to IVDClass
begin
  integer wn;
  record RcVc RepSpec;
  record IVVc IVr;

  wn = CurWindow;
  if (WindowState(wn) == Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    OpenDebtSendConfirmWindowIR(IVr.SerNr,wn);
  end else begin
    MessageBox(1500163,"");
  end;
LSKIP:;
  return;
end;

global
procedure DblSendAsDebt(string dblstr,string invoiceSerNr,Integer currepwn)
begin
  OpenDebtSendConfirmWindowIR(invoiceSerNr,0);
  return;
end;
