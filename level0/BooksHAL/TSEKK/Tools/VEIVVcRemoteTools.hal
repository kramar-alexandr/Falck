remote procedure CalcExpRow(var record ExpVc,Integer);
remote function Boolean ExpVc_PasteAccNumber(var record ExpVc,Integer);
remote function LongInt ValidateVEIV(record VEIVVc,var string,var Integer);
//KB 09.11.2017 only new functions

function boolean GetCUByRegNr(string regNr, var record CUVc CUr)
begin
  boolean res;

  res = false;
  if(nonblank(regNr)) then begin
  CUr.RegNr1 = regNr;
  if ReadFirstKey("RegNr1",CUr,1,true) then begin
    res = true;
  end;
  end;
  GetCUByRegNr = res;
  return;
end;

function string 10 GetAccNrForVEIVRow(row VEIVVc VEIVrw, record VEIVVc VEIVr)
begin
  string 10 res;
  record CUVc CUr;

  if(nonblank(VEIVrw.CostAcc)) then begin
    res = VEIVrw.CostAcc;
  end else begin
    if (GetCUByRegNr(VEIVr.VERegNr1,CUr)) then begin
      res = CUr.AccCost;
    end;
  end;
  GetAccNrForVEIVRow = res;
  return;
end;

function boolean CanPackRowToVEIV(row VEIVVc VEIVrw, record VEIVVc targetVEIVr, var integer rowNrToPackInto)
begin
  boolean res;
  integer rwcnt,i;
  row VEIVVc VEIVrwToCompare;
  boolean allCondMet;

  res = false;
  rwcnt = MatRowCnt(targetVEIVr);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(targetVEIVr,i,VEIVrwToCompare);
    allCondMet = true;
    if(blank(VEIVrw.CostAcc) OR blank(VEIVrw.VATCode)) then begin
      allCondMet = false;
    end;
    if(VEIVrwToCompare.CostAcc != VEIVrw.CostAcc) then begin
      allCondMet = false;
    end;
    if(VEIVrwToCompare.VATCode != VEIVrw.VATCode) then begin
      allCondMet = false;
    end;
    if (allCondMet == true) then begin
      rowNrToPackInto = i;
    res = true;
      goto LCanPackRowToVEIV;
    end;
  end;
LCanPackRowToVEIV:;
  CanPackRowToVEIV = res;
  return;
end;

procedure PackSimilarRowsInVEIV(var record VEIVVc newVEIVr, record VEIVVc origVEIVr)
begin
  integer origVEIVRowCnt,newVEIVRowCnt,i,rowNrToPackInto,rowNrToPutTo;
  row VEIVVc origVEIVrw,newVEIVrw;
  string 10 accNr;
  integer putToRowNumber;
  
  RecordNew(newVEIVr);
  origVEIVRowCnt = MatRowCnt(origVEIVr);
  for(i=0;i<origVEIVRowCnt;i=i+1) begin
    MatRowGet(origVEIVr,i,origVEIVrw);
    //Update the accnr, if blank try to take from CUVc
    accNr = GetAccNrForVEIVRow(origVEIVrw,origVEIVr);
    origVEIVrw.CostAcc = accNr;
    if(CanPackRowToVEIV(origVEIVrw,newVEIVr,rowNrToPackInto)) then begin //then add to existing row
      MatRowGet(newVEIVr,rowNrToPackInto,newVEIVrw);
      newVEIVrw.VESum = newVEIVrw.VESum + origVEIVrw.VESum;
      rowNrToPutTo = rowNrToPackInto;
    end else begin //then add new row
      ClearRow(newVEIVr,newVEIVrw,1);
      CopyRow(origVEIVr,origVEIVrw,newVEIVrw);
      if (origVEIVRowCnt == 1 and blank(newVEIVrw.VESum)) then begin //if only one row
        newVEIVrw.VESum = (origVEIVr.Sum4 / (100 + newVEIVrw.VEVATPrc)) * 100;
      end;
      rowNrToPutTo = MatRowCnt(newVEIVr);
    end;
    MatRowPut(newVEIVr,rowNrToPutTo,newVEIVrw);
  end;
LPackSimilarRowsInVEIV:;
  return;
end;

procedure AddVEIVRowToExp(row VEIVVc VEIVrw, record VEIVVc VEIVr, var record ExpVc Expr)
begin
  integer expRowCnt;
  row ExpVc Exprw;
  record CUVc CUr;

  Expr.DocDate = VEIVr.InvDate;
  ClearRow(Expr,Exprw,1);
  Exprw.DocNr = VEIVr.InvoiceNr;
  Exprw.Sum = (VEIVrw.VESum * (VEIVrw.VEVATPrc / 100)) + VEIVrw.VESum;
  Exprw.VATCode = VEIVrw.VATCode;
  Exprw.AccNumber = VEIVrw.CostAcc;
  Exprw.ExpDate = VEIVr.InvDate;
  if (GetCUByRegNr(VEIVr.VERegNr1,CUr)) then begin
    Exprw.VECode = CUr.Code;
    Exprw.VEName = CUr.Name;
  end;
  expRowCnt = MatRowCnt(Expr);
  MatRowPut(Expr,expRowCnt,Exprw);
  ExpVc_PasteAccNumber(Expr,expRowCnt);
  CalcExpRow(Expr,expRowCnt);
  return;
end;

global updating
function longint AddVEIVToExpRemote(record VEIVVc VEIVr, var record ExpVc Expr)
begin
  longint res;
  integer veivRowCnt,i;
  record VEIVVc tempVEIVr;
  row VEIVVc tempVEIVrw;
  record ExpVc oldExpr;

  PackSimilarRowsInVEIV(tempVEIVr,VEIVr);
  veivRowCnt = MatRowCnt(tempVEIVr);
  for(i=0;i<veivRowCnt;i=i+1) begin
    MatRowGet(tempVEIVr,i,tempVEIVrw);
    RecordCopy(oldExpr,Expr);
    AddVEIVRowToExp(tempVEIVrw,VEIVr,Expr); //passing temp row from compacted tempVEIVr and also original VEIVr
    RecordUpdate(oldExpr,Expr,false);
    CreateRecordLink(VEIVr,CurrentCompany,Expr,CurrentCompany);
    CreateRecordLink(Expr,CurrentCompany,VEIVr,CurrentCompany);
  end;
  AddVEIVToExpRemote = res;
  return;
end;

global updating
function boolean AddSingleVEIVToExp(record VEIVVc VEIVr, var record ExpVc Expr)
begin
  boolean res;
  longint r;
  integer rownr;
  string 255 fieldname;
  
  if (VEIVr.NotPaidFlag == 0) then begin //TODO need this check?
    r = ValidateVEIV(VEIVr,fieldname,rownr);
    if (r == 0) then begin
      if (Expr.SerNr == -1) then begin // if not yet created
        Expr.SerNr = NextSerNr("ExpVc",Expr.TransDate,-1,false,"");
        RecordInsert(Expr,false);
      end;
      r = AddVEIVToExpRemote(VEIVr,Expr);
      res = true;
    end else begin
      MessageBox(r,"");
    end;      
  end else begin
    //MessageBox(20556,""); //TODO need this check?
  end;
  AddSingleVEIVToExp = res;
  return;
end;
