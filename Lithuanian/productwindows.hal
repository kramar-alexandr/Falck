external function Boolean AcceptanceStatusColumnTest(string);
external procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external procedure DisplayRecordDetails_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external procedure DrawPOSInterface2_EST(string,string,record POSButtonsVc,string,Integer,Integer);
external function string 255 VATZoneEditFieldLabel_EST(Integer);
external function string 255 VATZoneNameEST();
external function string 60 UserDefined(string,string);
external function Boolean IsMoveToCloud(record SetupStatusBlock);
external function Boolean TouchScreenLookVertical();
external function Boolean TouchScreenLookVertical();
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean UseTaxTemplatesforTaxCalc();
external function real ItemButtons(string,Integer);
external function Boolean HasCharts();
external function Integer LoginShortcutsLines(Integer);
external function real DrawPaymentModesButtons_IV_EST(real);
external function real FunctionButtons_EST(string);
external function Boolean IsEnterprise();
external function Boolean StandardHansa();
external function Boolean HasAdvancedAccounting();
external function Boolean HasAdvancedStock();
external function Boolean HasApprovals();
external function Boolean HasBase2();
external function Boolean HasCustomerStatusReport();
external function Boolean HasDownpayments();
external function Boolean HasExtTax();
external function Boolean HasFiscalPrinter();
external function Boolean HasIncomeAndExpenseBook();
external function Boolean HasIntegratedNL();
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean HasMultiCurrency();
external function Boolean HasNumberSeries();
external function Boolean HasNLBudget();
external function Boolean HasLanguages();
external function Boolean HasPersons();
external function Boolean HasPrepayments();
external function Boolean HasRussianPrepayment();
external function Boolean HasSalesman();
external function Boolean HasSalesmanBonus();
external function Boolean HasSalesGroup();
external function Boolean HasSerialNumbers();
external function Boolean HasSimAccruals();
external function Boolean HasTaxMatrix();
external function Boolean HasVATZone();
external function Boolean HasMetroTestFeatures();
external function Boolean HasMultiLocations();
external function Boolean HasObjects();
external function Boolean HasWorkOrders();
external function Boolean HasTouchScreenLook();
external function Boolean HasTREO();
external function Boolean HasVarieties();
external function Boolean HasWithholdingTax();
external function Boolean HasWorkOrders();
external function Boolean HasModAT2();
external function Boolean HasModCL();
external function Boolean HasModCRM();
external function Boolean HasModHotel();
external function Boolean HasModHRM();
external function Boolean HasModIN();
external function Boolean HasModNL();
external function Boolean HasModPL();
external function Boolean HasModPO();
external function Boolean HasModSL();
external function Boolean HasModTS();
remote function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);  //Bk HAL //##cc
external function real VATZoneButtonsLabelsEST(real,real,real,real);
external function Boolean HasJewelleryInterface();
external function Boolean HasLimitedAccess();
external function Boolean HasEInvoicing();
external function Boolean HasAdvancedPricing();
external function Boolean HasContactClassification();
external function Boolean HasPriceLists();
external function Boolean HasCategories();
external function Boolean HasMainPartner();
external function Boolean HasAged();
external function Boolean HasAccPeriods();
external function real VATZoneButtonsLabelsLIT(real,real,real,real);

begin
	
	  SetLangMode(LangLithuanian, "LIT", 0);

  return;
end;

window VIDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr;
  Integer f,flipnr;
  Integer pos;

  WindowBegin("Pirkimo faktðra",VIDClass,CGview,-);
  SetWRect(20,80,770,460);
  if (IsEnterprise==false) and (HasModNL==false) then begin
  end else begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(VIVc);
//  FormName(PrintVID);  
  ActiveFieldOnNew("VECode");      
  if (IsEnterprise==false) then begin
    if (IsBooks and IsStandardProduct==false) then begin
      AutoSizeWindow(false);
    end;
    v = 6; h = 90; h2 = 260; h3 = 460; h4=-120; vs = 20;
    if (HasVATZone or ((HasMultiCurrency or HasBase2) and (HasModNL))) then begin
      Tile(0,74,false,"",VECode);
    end;
    if (HasNumberSeries) then begin
      EditField(h,v,80,"Nr.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,v,80,"Nr.",Normal,SerNr,false,0); 
    end;
    EditField(h2,v,-40,"Pavadinimas",Normal,VEName,false,0); 

    EditField(h,vm=(v+=20),80,"Tiek˜jas",Normal,VECode,false,VESClass); 
    EditField(h2,v,80,"Faktðros data",Normal,InvDate,false,PasteCurDate); 
    CheckBox(-80,v,0,"OK",OKFlag);
    if (HasModNL) then begin
      EditField(h3,v,-100,"Nuoroda",Normal,RefStr,false,0); 
    end;
    if (HasVATZone) then begin
      tilenr = 1;
      TileButton(tilenr,"Sˆlygos"); tilenr = tilenr + 1; 
      TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1; 
      if (HasMultiCurrency or HasBase2) then begin
        TileButton(tilenr,"Valiutos"); tilenr = tilenr + 1; 
      end;
      TileButton(tilenr,"¯varðs"); tilenr = tilenr + 1; 
      tilenr = 1;
      Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
      v = 6;
    end else begin
      if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
        tilenr = 1;
        TileButton(tilenr,"Sˆlygos"); tilenr = tilenr + 1; 
        TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1; 
        TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1; 
        tilenr = 1;
        Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + vs;
      end;
    end;
    vm = v;
    EditField(h,v,80,"Tiek. fak. nr.",Normal,InvoiceNr,false,0); 
    EditField(h,v+=vs,80,"VISO",Normal,PayVal,true,0); 
    EditField(h,v+=vs,80,"PVM",Normal,VATVal,true,0);
    EditField(h2,v=vm,35,"Mok. sˆl.",Normal,PayDeal,false,PDSClass);
    if (HasModNL) then begin
    	EditField(h2,v+=vs,80,"Op. data",Normal,TransDate,false,PasteCurDate); 
    end;    
    EnterSkip(Math);
    EditField(h2,v+=vs,80,"Apmok. data",Normal,DueDate,false,PasteCurDate);
    v = vm;
    EditField(h3,v,90,"Faktðros kred.",Normal,CredInv,false,APSClass); 
    if (HasLanguages) then begin
      EditField(h4,v,80,"Kalba",Normal,LangCode,false,LangSClass); 
    end;
    EditField(h3,v+=vs,90,"Banko fil. kodas",Normal,SortCode,false,0); 
    if (HasObjects) then begin
      EditField(h4,v,80,"Objektai",Normal,Objects,false,ObjSClass); 
    end;
    EditField(h3,v+=vs,-40,"Banko sˆskaita",Normal,BankAcc,false,0); 
    if (HasLocalization("POL")) then begin
      EditField(h2,v+=vs,80,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
    end;
    EditField(h2,v+=vs,-40,"Komentaras",Normal,Comment,false,0); 
    if (HasModNL or HasModTS or HasIncomeAndExpenseBook) then begin
      if (HasVATZone or HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,330,true,tilenr,Math); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + 2*vs;
      end;
      BlockLoad(CYb);
      if (HasAdvancedStock or HasModAT2 or HasModTS or HasModPO or (HasVATZone and HasLocalization("POL"))) then begin
        MatrixBegin(10,v,-50,-32,-,99);
      end else begin
        MatrixBegin(10,v,-27,-32,-,99);
      end;
      MatTypedRow(stp);
      MatOverStrike(ovst);
      flipnr = 0;
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kInvoiceRowTypeNormal,24,"Sˆskaita",0,AccNumber,false,AccSClass);
      Flip(flipnr); flipnr = flipnr + 1;
      pos = 90;
      if (HasObjects) then begin
        MatCol(t=kInvoiceRowTypeNormal,pos,"Objektai",0,Objects,false,ObjSClass); pos = pos + 90;
        if (HasAdvancedAccounting) then begin
          MatCol(t,pos,"Trump.",0,ACShort,false,ACShortSClass); 
          pos = pos + 60;
        end;
        MatCol(t,pos,"Apraäymas",0,Comment,false,0);
    end else begin
        if (HasAdvancedAccounting) then begin
          MatCol(t,pos,"Trump.",0,ACShort,false,ACShortSClass); 
          pos = pos + 60;
        end;
        MatCol(t,pos,"Apraäymas",0,Comment,false,0);
      end;
      MatCol(t,-130,"Suma",0,Sum,true,0); 
      if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-45,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
      end;

      MatText(t=kInvoiceRowTypePrepayment,24,"Avanso numeris",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
      MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the #VAT# sum, Recipe holds the date of prepaym. */
      MatCol(t,-70,"",0,VATVal,true,0);

      MatText(t=kInvoiceRowTypeEmployee,24,"Sumok˜ti darbuotojui",true); 
      MatCol(t,208,"",0,UserCode,false,UserSClass); 
      MatCol(t,-406,"",0,AccNumber,false,0); 
      MatCol(t,-306,"",0,Objects,false,0);
      MatCol(t,-206,"",0,Comment,false,0);

      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t = kInvoiceRowTypeNormal;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Uìsk. tipas",0,OrderType,false,0);
          MatCol(t,-360,"Sand. tipas",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Apraäymas",0,Comment,false,0);
        end;
        MatCol(t,-260,"Suma",0,Sum,true,0);
        MatCol(t,-190,"Prek˜",0,Item,false,INSClass);
        MatCol(t,-130,"Kiekis",0,qty,true,0);
          MatCol(t,-100,"Projektas",0,PRCode,false,PRSClass);
        if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
          MatCol(t,-45,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
        end else begin
          MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
        end;
        MatText(3,270,"",true);
      end else begin
        if (HasVATZone) then begin
          if (HasLocalization("POL")) then begin
            Flip(flipnr); flipnr = flipnr + 1;
            pos = 140;
            MatCol(t=1,pos,"Apibðdinimas",0,Comment,false,0); 
            MatCol(t,-200,"Kiekis",0,Sum,true,0); 
            MatCol(t,-120,"Prek˜",0,Item,false,INSClass); 
            MatCol(t,-60,"Kiek.",0,qty,true,0); 
          end;
        end;
      end;
      if (HasModAT2) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kInvoiceRowTypeNormal,140,"Apraäymas",0,Comment,false,0);
        MatCol(t,-300,"Turto nr.",0,InventoryNr,false,AT2UnitSClass); 
        MatCol(t,-150,"Turto oper. tipas",0,AssetTransType,false,SetSClass); 
      end;
      InsertRowTest;
      DeleteRowTest;
      RowMenuBegin("");
      RowMenuItem(0,"Balansuoti",'=','=',0,"BalanceVIDsm");
      EndRowMenu;
      EndMatrix;
      vs = 20;
//      v = 18;//canoot be set to 18 on windows
      if (flipnr>2) then begin
        for (f=1;f<flipnr;f=f+1) begin
          VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
          v = v + vs;
        end;
      end;
      EditField(-140,-20,-40,"Skai‹iuoti PVM",ViewOnly,CalcVATVal,true,0);
      if (HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
        h1 = h + 20;
        v = 6;
        EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h1,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h1,v+vs,50,"Bazin˜ valiuta",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin  
            EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
          if (HasBase2) then begin  
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);          
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Bazin˜ valiuta",false);    
          end;    
        end else begin
          EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
        end;
      end;
      if (HasVATZone) then begin
        Tile(tilenr,120,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 20;
        v = VATZoneButtonsLabelsLIT(h,v,170,16);
      end;
      SpecialMenu("Balansuoti",'=',0,"BalanceVIDsm");
      SpecialMenu("Pirkim÷ faktðros bðkl˜",'r',2,"VIInfoVIDsm");
      if (HasIntegratedNL) then begin
        SpecialMenu("Atidaryti D/K operacijas",'t',5,"OpenTRFromVI");
      end;
      if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
        SpecialMenu("Sujungti su avansu",' ',6,"ConnectToPrepayVIDsm");
      end;
      if (HasModAT2) then begin
        SpecialMenu("Turtas",' ',7,"CreateAT2FromVI"); 
      end;
    end else begin
      if (HasMultiCurrency or HasBase2) then begin
        EditField(h,v+=vs,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h,v+vs,50,"Baz. val.",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin  
            EditField(h,v+(vs*2),50,"Baz. Val. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
          if (HasBase2) then begin  
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);          
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);    
          end;    
        end else begin
          EditField(h,v+=vs,50,"Baz. Val. 1",Normal,BaseRate1,true,0);
          EditField(h,v+=vs,50,"Baz. Val. 2",Normal,BaseRate2,true,0);
        end;
      end;
    SpecialMenu("Faktðros bðkl˜",'r',2,"VIInfoVIDsm");
      if (HasIntegratedNL) then begin
      SpecialMenu("Atidaryti D/K operacijˆ",'t',5,"OpenTRFromVI");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
      SpecialMenu("Sujungti su avansu",' ',6,"ConnectToPrepayVIDsm");
      end;
    end;
    if (HasWithholdingTax) then begin
      SpecialMenu("Prid˜ti pelno mokest°",' ',26,"WithholdingLineVIDsm"); 
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    SpecialMenu("Sukurti kredito faktðrˆ",' ',15,"CreateCreditNoteVIDsm");
    if (HasModCL) then begin
      SpecialMenu("Sukurti kasos iälaidas",' ',8,"DoCLOutFromVID");
    end;
    if (HasModNL and HasMultiCurrency) then begin
      SpecialMenu("Vidin˜ sˆskaita",' ',12,"IntIVFromVIDsm"); 
    end;
    if (HasLocalization("POL") and HasVATZone) then begin
      SpecialMenu("Sukurti vidin« faktðrˆ",' ',12,"IntIVFromVIDsm");
    end;
    SpecialMenu("MokÄ—jimas",' ',15,"OPFromVIDsm");
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasIntegratedNL) then begin
      SpecialMenu("Sukurti PVM koregavimˆ pirkim. kn.",' ',9,"VATCorrectionVIsm");
    end;
    SpecialMenu("Prid˜ti tiek˜jˆ",' ',0,"AddSupplierVIDsm"); 
    if (HasModAT2) then begin
      SpecialMenu("Turtas",' ',7,"CreateAT2FromVI"); 
    end;
  end else begin
    BlockLoad(CYb);
    vs = 20;
  Tile(0,94,false,"",InvDate);
    if (IsEnterprise) then begin
      h = 75; h2 = 260; h3 = 530;
    end else begin
      h = 90; h1 = 90; h2 = 270; h3 = 470; h4=-110;
    end;
    if (HasNumberSeries) then begin
      EditField(h,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,vm=(v=6),95,"Nr.",Normal,SerNr,false,0); 
    end;
  EditField(h,v+=vs,95,"Tiek˜jas",Normal,VECode,false,VESClass);
  EnterSkip(PayVal);
  EditField(h2,v=vm,-40,"Pavadinimas",Normal,VEName,false,0);
    if (IsEnterprise) then begin
			EditField(h2,vm=(v+=20),95,"Sulaik. suma",Normal,HoldSum,true,0);
			SoftEditField(h3,vm,80,"Objekto paieäka",Normal,"ObjSearch",false,"ObjSClass",M4Code,20);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 18 04 2019 y. at 10:44:01 AM
    	HalPushButton(h2+150,vm+40,h2+250,vm+60,"VIOBNEXT","Kitas");// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 18 04 2019 y. at 10:49:11 AM
    	HalPushButton(h2+270,vm+40,h2+370,vm+60,"VIOBPREV","Ankstesnis");// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 18 04 2019 y. at 10:49:12 AM
    end else begin
      EditField(h2,v+=vs,80,"Faktðros data",Normal,InvDate,false,PasteCurDate); 
      EditField(h3,v,90,"Nuoroda",Normal,RefStr,false,0); 
    end;
  if (HasLocalization("RUS")) then begin
   EditField(h3,v,20,"Operacijos kodas",Normal,OperationCode,false,OperationCodesPLSClass);
  end;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
    if (IsEnterprise) then begin
  EditField(h,v+=vs,95,"Viso",Normal,PayVal,true,0);
  EditField(h2,v,95,"PVM",Normal,VATVal,true,0);
  EditField(h3,v,82,"PVM data",Normal,VATDate,false,PasteCurDate);
    end;
    tilenr = 1;
    TileButton(tilenr,"Sˆlygos"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Kaätai"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1; 
    if (IsEnterprise) then begin
      if (HasLocalization("UKR")) then begin 
      TileButton(tilenr,"PVM kursas"); tilenr = tilenr + 1; 
      end;
      TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
      TileButton(tilenr,"Sˆskaitos"); tilenr = tilenr + 1; 
      TileButton(tilenr,"Fakt. adresas"); tilenr = tilenr + 1; 
      TileButton(tilenr,"Mok˜jim÷ planavimas"); tilenr = tilenr + 1;

    end;
    tilenr = 1;
    Tile(tilenr,90,false,tilenr,InvDate); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
      vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -90;
			EditField(h1,vm=(v=6),82,"Faktðros data",Normal,InvDate,false,PasteCurDate);
      EditField(h1,v+=vs,35,"Mok˜jimo sˆl.",Normal,PayDeal,false,PDSClass);//PDSClass
			EditField(h1,v+=vs,82,"Registr apsk. data",Normal,TransDate,false,PasteCurDate);
			EditField(h1,v+=vs,82,"Apmok˜ti iki",Normal,DueDate,false,0);
      if (HasLocalization("POL")) then begin
        EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
      end;
    end else begin
      EditField(h,v=6,80,"Tiek. fakt. nr.",Normal,InvoiceNr,false,0); 
      EditField(h,v+=vs,80,"VISO",Normal,PayVal,true,0); 
      EnterSkip(PayDeal);
      EditField(h,v+=vs,80,"PVM",Normal,VATVal,true,0); 
    end;
    if (IsEnterprise) then begin
  EditField(h2,v=vm,135,"Tiek. fakt. nr.",Normal,InvoiceNr,false,0);
  EditField(h2,v+=vs,135,"Pasiraäo",Normal,OKPersons,false,UserSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
    end else begin
      EditField(h2,v=6,35,"Mok. sˆl.",Normal,PayDeal,false,PDSClass);
      EnterSkip(Math);
      EditField(h2,v+=vs,80,"Op. data",Normal,TransDate,false,PasteCurDate); 
      EditField(h2,v+=vs,80,"Apmok. data",Normal,DueDate,false,0); 
    end;
    if (IsEnterprise) then begin
  EditField(h3,v=vm,82,"Gavimo data",Normal,RcvDate,false,PasteCurDate);
  EditField(h3,v+=vs,82,"Nuol. data",Normal,RebDate,false,PasteCurDate);
  EditField(h3,v+=vs,82,"Nuolaida",Normal,RebVal,true,0);
  EditField(h3,v+=vs,82,"Faktðros kreditas",Normal,CredInv,false,APSClass);
    end else begin
      EditField(h3,v=6,90,"Faktðros kreditas",Normal,CredInv,false,APSClass); 
      EditField(h3,v+=vs,90,"Banko sˆskaita",Normal,BankAcc,false,0); 
      EditField(h3,v+=vs,90,"Banko fil. kodas",Normal,SortCode,false,0); 
      v = 6;
      if (HasLanguages) then begin
        EditField(h4,v,90,"Kalba",Normal,LangCode,false,LangSClass); 
        v = v + vs;
      end;
      if (HasObjects) then begin
        EditField(h4,v,90,"Objektai",Normal,Objects,false,ObjSClass); 
        v = v + vs;
      end;
    end;
  EnterSkip(Math);
    if (HasAdvancedAccounting) then begin
  CheckBox(h4,v=6,0,"Sulaikyti",Closed);
      if (StandardHansa==false) then begin
  CheckBox(h4,v+=16,0,"Prel. Uìsak.",PrelBook);
      end;
    end;
    Tile(tilenr,130,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(140,-21,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasWithholdingTax) then begin
      if (StandardHansa==false) then begin
  EditField(270,-20,70,"Su. mok.",Normal,WithHoldingTax,true,0);
      end;
    end;
    if (HasExtTax) then begin
  EditField(410,-20,70,"Pap. mok.",ViewOnly,TAX1Sum,true,0);
    end;
  EditField(-120,-20,70,"Skai‹iuoti PVM",ViewOnly,CalcVATVal,true,0);
  SoftEditField(-300,-20,70,"Viso",ViewOnly,"NettVal",true,0,M4Val,255);
  EnterSkip(Math);
//  CheckBox(20,-21,0,"OK",OKFlag);
  h=4;
    if (HasModNL) then begin
    if (IsEnterprise) then begin
  MatrixBegin(h,v=24,-50,-24,-,299);
    end else begin
      MatrixBegin(h,v=24,-27,-24,-,99);
    end;
  MatTypedRow(stp); //??
  MatOverStrike(ovst);
    flipnr = 0;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kInvoiceRowTypeNormal,32,"Sˆsk.",0,AccNumber,false,AccSClass); 
    if (HasObjects) then begin
      MatCol(t,90,"Objektai",0,Objects,false,ObjSClass); 
    end;
  MatText(t=6,32,"Avanso numeris",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
  MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the VAT sum, Recipe holds the date of prepaym. */
  MatCol(t,-70,"",0,VATVal,true,0);

      MatText(t=kInvoiceRowTypeEmployee,32,"Sumok˜ti darbuotojui",true); 
      MatCol(t,158,"",0,UserCode,false,UserSClass); 
      MatCol(t,-406,"",0,AccNumber,false,0); 
      MatCol(t,-306,"",0,Objects,false,0);
      MatCol(t,-206,"",0,Comment,false,0);

      MatText(t=kInvoiceRowTypeDownpayment,32,"Avansas",true); 
      MatColTL(t,122,"",0,-1,ViewOnly,0,Item,true,0); 
      MatColTL(t,208,"",0,-1,ViewOnly,0,qty,true,0); 
      MatCol(t,268,"",0,Comment,false,0); 
//      MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
//      MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
      MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0); 
      if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-100,"",0,AccNumber,false,AccSClass); 
        MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass); 
      end else begin
        MatCol(t,-90,"",0,AccNumber,false,AccSClass); 
        MatCol(t,-45,"",0,VATCode,false,VATCodeSClass); 
      end;

    MatText(t=kInvoiceRowTypeRetention,32,"Mok˜jimo atid˜jimas",true);
  MatCol(t,100,"",0,Comment,false,0);
      if (HasModTS) then begin
  MatCol(t,-340,"Projektas",0,PRCode,false,PRSClass);
      end;
  MatCol(t,-210,"Sˆskaita",0,AccNumber,false,AccSClass);
  MatCol(t,-110,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-45,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Sulaikymo mok.",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,AccNumber,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Comment,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
      t = 1; pos = 180;
      if (HasAdvancedAccounting) then begin
        MatCol(t,pos,"Trumpas",0,ACShort,false,ACShortSClass); 
        pos = pos + 60;
      end;
      MatCol(t,pos,"Apraäymas",0,Comment,false,0); 
  MatCol(t,-120,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-45,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  //  MatCol(t,-30,"TT",0,TaxTemplateCode,false,VATCodeSClass);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
      Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t=1;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Uìsakymo tipas",0,OrderType,false,0); 
          MatCol(t,-360,"Sand˜lio tipas",0,StockType,false,SetSClass); 
        end else begin
          MatCol(t=1,pos,"Apraäymas",0,Comment,false,0); 
        end;
  MatCol(t,-260,"Suma",0,Sum,true,0);
  MatCol(t,-190,"Prek˜",0,Item,false,INSClass);
  MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasModTS) then begin
  MatCol(t,-100,"Projektas",0,PRCode,false,PRSClass);
        end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-45,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-45,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(3,270,"",true);
      end;
      if (HasSimAccruals) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Apraäymas",0,Comment,false,0);
  MatCol(t,-260,"Suma",0,Sum,true,0);
  MatCol(t,-180,"Kaupimai",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-80,"PVM",0,VATVal,true,0);
      end;
      if (HasAdvancedStock or HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Apraäymas",0,Comment,false,0);
  MatCol(t,-350,"Prek˜",0,Item,false,INSClass);
        if (HasSerialNumbers) then begin
  MatColTL(t,-250,"Serij. nr.",0,-1,ViewOnly,-1,SerialNr,false,0);
        end;
  MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasAdvancedStock) then begin
  MatColTL(t,-70,"Kainos pokytis",0,-1,ViewOnly,-1,VarianceAmount,false,0);
        end;
      end;
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Apraäymas",0,Comment,false,0);
  MatCol(t,-300,"Inventorinis Nr.",0,InventoryNr,false,AT2UnitSClass);
  MatCol(t,-150,"Turto oper. tipas",0,AssetTransType,false,SetSClass);
      InsertRowTest;
      DeleteRowTest;
//      RowMenuBegin("");
//      EndRowMenu;
      EndMatrix;
  vs = 20;
    v = 18; 
    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
        v = v + vs;
        end;
      end;
    end;
  
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
  EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
    if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazin˜ valiuta 1",Normal,BaseRate1,true,0);
    end else begin
        EditField(h1,v+vs,50,"Baz. valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0); 
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0); 
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false); 
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);           
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);     
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0); 
      EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0); 
    end;
    if (IsEnterprise) then begin
      if (HasLocalization("SVK,UKR")) then begin 
      Tile(tilenr,70,false,tilenr,VATFrRate); tilenr = tilenr + 1;
  vs = 20;
        EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        EditField(h,v+vs,50,"Baz. val. 1",Normal,VATBaseRate1,true,0); 
        EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,VATBaseRate2,true,0);   
        EditField(h2=295,v,50,"#PVM# kursas",Normal,VATFrRate,true,0); 
        RateField(h3=360,v,50,":",Normal,"VATToRateB1",true,h3+60,v+14,"Baz. val. 1",false); 
        RateField(h3,v+=vs,50,":",Normal,"VATToRateB2",true,h3+60,v+14,"Baz. val. 2",false);            
      end;
      Tile(tilenr,110,false,tilenr,PRCode); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 550; h4 = -100;
      if (StandardHansa==false) then begin
  EditField(h1,v=vm,82,"Faktoringas",Normal,VEFactoring,false,VESClass);
        EditField(h1,v+=vs,82,"Filialas",ViewOnly,BranchID,false,0);
      end else begin
        EditField(h1,v=vm,82,"Filialas",ViewOnly,BranchID,false,0); 
      end;
  EditField(h1,v+=vs,82,"Tiek. Val. Suma",Normal,SupCurVal,false,0);
  EditField(h1,v+=20,82,"Statist. vert˜",Normal,StatVal,true,0);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h2,v=vm,80,"Pardav˜jas",Normal,SalesMan,false,UserSClass);
      if (HasSalesGroup) then begin
  EditField(h2,v+=vs,80,"Pard. grup˜",Normal,SalesGroup,false,SalesGroupSClass);
    EditField(h2+160,v,80,"Org. Tiek.",ViewOnly,OrgVE,false,0);
      end;
  EditField(h2,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  EditField(h2,v+=vs,80,"Kredit. sˆsk.",Normal,APAcc,false,AccSClass);
  CheckBox(h3,v=6,0,"Tiek. info. operac.",APonTR);
      if (HasLocalization("PRT")==false) then begin
        CheckBox(h3,v+=16,0,"Self Billing",SelfBilling);
      end;
      CheckBox(h3,v+=16,0,"Si÷sti mok˜j. PVM",OPBookVAT);
      if (HasLocalization("ARG")) then begin
        CheckBox(h3,v+=16,0,"Fiskalin˜ sˆskaita",FiscalFlag);
      end;
      Tile(tilenr,90,false,tilenr,POSerNr); tilenr = tilenr + 1;
  EditField(h1,v=vm,82,"P/Uìsak. Nr.",ViewOnly,POSerNr,false,0);
      if (StandardHansa==false) then begin
  EditField(h1,v+=vs,82,"P/U Proceso Nr.",Normal,POCQStatNr,false,POCQStatSClass);
  EditField(h1,v+=vs,82,"Pasl. Siunt. Data",Normal,ServiceDelDate,false,PasteCurDate);
        if (HasLocalization("ARG")) then begin 
  EditField(h1,v+=vs,82,"CAE galiojimas",Normal,CAEExpiry,false,PasteCurDate);
        end;
      end;
  EditField(h2,v=vm,135,"Bankas",Normal,BankCode,false,BankSClass);
      if (HasLocalization("EST")) then begin
        EditField(h3,v,-20,"Pay To Name",Normal,PayToName,false,0); 
      end;
  EditField(h2,v+=vs,135,"Banko sˆsk.",Normal,BankAcc,false,VEBankAccSClass);
  EditField(h2,v+=vs,135,"Fil. kodas",Normal,SortCode,false,0);
      if (HasLocalization("ARG")) then begin
        EditField(h2,v+=vs,135,"CAE",Normal,CAE,false,0);
      end;
      v = vm;
      if (HasLocalization("ARG,BOL")) then begin
        EditField(h3,v,-20,"Mok. inspekcijos ID",Normal,TaxAuthID,false,0);
        EditField(h3,v+=vs,-20,"Valdymo kodas",Normal,TaxAuthIDCC,false,0);
      end;
      EditField(h3,v+=vs,-20,"Barkodas",Normal,BarCode,false,0);
      EditField(h3,v+=vs,-20,"Mok. kodas",Normal,PaymentCode,false,PaymentCodeSClass);
  /*
  EditField(h2,v,30,"Sup. VAT-Code",Normal,VEVatCode,false,VATCodeSClass);
  EditField(h3,v,80,"Official Ser. No.",Normal,OfficialSerNr,false,0);
*/
      Tile(tilenr,250,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Faktðra"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"áalis",Normal,InvCountry,false,CountrySClass);
      if (HasApprovals) then begin
        SoftEditField(h3=h+4,v=(vm+=40),123,"Patvirtinimo statusas",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*      
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo bðkl˜");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalauta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Neprad˜ta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);  
*/        
        v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
      end else begin
        v = VATZoneButtonsLabelslit(h3=290,v=vm+20,170,16);
      end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass); 
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
      if (HasLocalization("HRV,SVN")) then begin  
      EditField(h2,v+=vs,50,"Legali forma",ViewOnly,VELegalForm,false,0); 
      end;
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(tilenr,250,false,tilenr,PaymentNote); tilenr = tilenr + 1;
  EditField(h=110,v=6,-20,"Mok˜jimo koment.",Normal,PaymentNote,false,0);
  EditField(h,v+=vs,80,"Plan. mok. data",Normal,PlanPayDate,false,PasteCurDate);

    end;
  SpecialMenu("Subalansuoti",'=',0,"BalanceVIDsm");
    if (HasModNL) then begin
  SpecialMenu("Faktðros bðkl˜",'r',2,"VIInfoVIDsm");
    end;
    if (HasModTS) then begin
  SpecialMenu("Prid˜ti iäskaitymus",' ',25,"RetentionLineVIDsm"); 
    end;
    if (HasWithholdingTax) then begin
  SpecialMenu("Prid˜ti sulaikymo mokest°",' ',26,"WithholdingLineVIDsm"); 
    end;
    if (HasEInvoicing) then begin
  SpecialMenu("Atidaryti E-Pirkimo faktðros pdf",' ',13,"OpenVEIVPDFDsm"); 
    end;
    if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operacijˆ",'t',5,"OpenTRFromVI");
    end;
    if (HasAdvancedAccounting) then begin
  SpecialMenu("Atidaryti preliminaria DK oper.",' ',13,"OpenTRFromVI2");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
  SpecialMenu("Sujungti su avansu",' ',6,"ConnectToPrepayVIDsm");
  end;
	if (HasModIN and HasAdvancedAccounting) then begin
		if (StandardHansa==false) then begin
			SpecialMenu("Nesuderintas POS",' ',11,"PUNotReconVIDsm");
		end;
		SpecialMenu("Prek˜s paieäka",'f',1,"ItemSearchDsm");
	end;
    if (HasTaxMatrix) then begin
      SpecialMenu("Atidaryti mokes‹i÷ matricˆ",' ',25,"OpenVatMatrixVIDsm");
    end;
		if (HasModCL) then begin
			SpecialMenu("Spausdinti kasos pajamas/iälaidas",' ',3,"PrintCashInOutVIDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Si÷sti patvirtinimui",' ',6,"VISendforAcceptanceVIDsm");
      SpecialMenu("Atäaukti patvirtinimo uìklausˆ",' ',2,"CancelApprovalRequestDsm");
		end;
		SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//  		SpecialMenu("Sukurti veiklˆ",'c',4,"ActFromVIDsm");
    end;
  		SpecialMenu("Sukurti turtˆ ",' ',7,"CreateAT2FromVI");
  		SpecialMenu("MokÄ—jimas",' ',10,"CreateOPFromVIDsm");
    if (HasModCL) then begin
  		SpecialMenu("Sukurti iämok˜jimˆ",' ',8,"DoCLOutFromVID");
  	end;
  	SpecialMenu("Sukurti kredito faktðrˆ",' ',15,"CreateCreditNoteVIDsm");
    if ((HasModNL and HasMultiCurrency) and (StandardHansa==false)) then begin
  		SpecialMenu("Sukurti vidin« faktðrˆ",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("UKR")) then begin 
  		SpecialMenu("Sukurti First Event",' ',10,"FirstEventVIDsm");
    end;
    if (HasLocalization("GBR,HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasIntegratedNL) then begin
  		SpecialMenu("PVM koregavimas pirk. kn.",' ',9,"VATCorrectionVIsm");
    end;
  end;
  EndWindow;
end;

window VeCuPerRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  WindowBegin("Periodin˜ pirk˜j÷ ir tiek˜j÷ bðkl˜",VeCuPerRClass,CGRcW,RcType);
  SetWRect(20,80,410,320);
  PeriodField(h=120,v=6,"Periodas"); 
  EditFieldTL(h,v+=20, 150,"Pirk˜jas/Tiek˜jas",M4UStr,Normal,30,f1,false,ContactCUSClass); 
  EndWindow;
end;

window PurInvVClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 18 06 2019 y. at 11:37:38 AM
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Sukurti mok˜jimo pasiðlymˆ",PurInvVClass,CGMnt,RcType);
  SetWRect(20,93,412,370);
  vs=20;
  EditFieldTL(h=150,v=6, 82,"Nuo apm. datos",M4Date,Normal,0,d1,false,PasteCurDate);
  EditFieldTL(h,v+=20, 82,"Iki apm. datos",M4Date,Normal,0,d2,false,PasteCurDate);
  EditFieldTL(h,v+=20 ,82,"Tiek˜jas",M4UStr,Normal,41,f1,false,VESClass);
  EditFieldTL(h,v+=vs ,82,"Kategorija",   M4UStr,Normal,10,LastAcc,false,VGSClass);
  EditFieldTL(h,v+=20 ,82,"Klas˜",M4UStr,Normal,60,f4,false,CClassSClass);
  EditFieldTL(h,v+=20 ,82,"Valiuta",M4UStr,Normal,5,f2,false,CurncyCodeSClass);
  EditFieldTL(h,v+=20 ,100,"Didìiausia suma",M4Str,Normal,255,f3,true,0);
  EditFieldTL(h,v+=20 ,30,"Mok˜jimo bðdas",M4Code,Normal,2,FirstAcc,false,PMSClass);
  EditFieldTL(h,v+=20 ,82,"Mok˜jimo data",M4Date,Normal,0,RegDate,false,PasteCurDate);
  EditFieldTL(h,v+=20 ,82,"Factoring company",M4UStr,Normal,41,f10,false,VESClass);// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 18 06 2019 y. at 11:38:51 AM

  CheckBox(20,vm=(v+=22),0,"Mok˜ti laiku",flags[2]);
  CheckBox(20,v+=16,0,"Naudoti sutart. nuolaidˆ",flags[1]);
  CheckBox(20,v+=16,0,"¯traukti kredito paì.",flags[3]);
  CheckBox(20,v+=16,0,"Vienas tiek˜jas mok˜jimui",flags[4]);
  if (StandardHansa==false) then begin
  CheckBox(20,v+=16,0,"Sukurti dalinius mok˜jimus",flags[6]);
  end;
  ButtonFrame(h=250,v=vm+16,123,2,"Rðäiavimas");
  RadioButton(h,v,0,0,"Apmok˜jimo data",flags[5]);
  RadioButton(h,v+=16,1,0,"Tiek˜jas",flags[5]);
  EndWindow;
end;

window AgedTClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - 02, 18 06 2019 y. at 11:52:40 AM
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vs;
  WindowBegin("Laikotarpiai",AgedTClass,CGSbl,AgedType);
  SetBlid(AgedBlock);
  SetWRect(64,80,509,400);
  v = 6; vs = 20; h = 180; f = 100;
  EditField(h,v,f,"Laikotarpis 1",Normal,Per1,true,0);
  EditField(h,v+=vs,f,"Laikotarpis 2",Normal,Per2,true,0);
  if (HasAdvancedAccounting) then begin
  EditField(h,v+=vs,f,"Laikotarpis 3",Normal,Per3,true,0);
  EditField(h,v+=vs,f,"Laikotarpis 4",Normal,Per4,true,0);
  EditField(h,v+=vs,f,"Laikotarpis 5",Normal,Per5,true,0);
  EditField(h,v+=vs,f,"Laikotarpis 6",Normal,Per6,true,0);
  EditField(h,v+=vs,f,"Laikotarpis 7",Normal,Per7,true,0);
  EditField(h,v+=vs,f,"Laikotarpis 8",Normal,Per8,true,0);
  StaticText(50,v+=40,"Nustatymas daugiau nei 2 periodams reikalauja guls‹io formato",false);
  ButtonFrame(h,v+=26,120,2,"Rodyti uìdelstas dienas");
  RadioButton(h,v,0,0,"Neapmok˜tas ir uìdelstas",ShowDelayDays);
  RadioButton(h,v+=16,1,0,"Tik uìdelstas",ShowDelayDays);
    if (StandardHansa==false) then begin
  CheckBox(100,v+=30,0,"Rodyti faktðras nustatytai datai, kaip esamas faktðras",ActualInvoices);
  CheckBox(100,v+=16,0,"Naudoti apskaitos periodus vietoj laikotarpi÷",UseAccPeriod);
  EditField(350,v+=vs,30,"Panaudoti apskaitos periodus, daugiausia 6",Normal,AccPeriods,true,0);
  CheckBox(100,v+=16,0,"Atskiras stulpelis nesudengtiems mok˜jimams",SeparateOnAcc);
    end;
  end else begin 
    if (HasAccPeriods) then begin
      CheckBox(100,v+=vs,0,"Naudoti apsk. periodus didì. kn. nei laikotarpi÷ apr.",UseAccPeriod);
    end;
  end;
  EndWindow;
end;


window VINoVATPayTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,l,v,vm,vs;
  WindowBegin("Falck - Ne PVM mok˜tojas tiek˜jo klas˜",VINoVATPayTClass,CGSbl,-);
  SetBlid(VINoVATPayBlock);
  SetWRect(20,80,480,330);
  vs = 20; h = 140; h1 = 20; h2 = 315; l = 70;
  v = 10;
  EditField(h,v,120,"Ne PVM mok˜tojo klas˜",Normal,Classification,false,CClassSClass);

  EndWindow;
end;


window FLComparisonRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Falck - PL/SL Comparison",FLComparisonRClass,CGRcW,RcType);
  SetWRect(20,80,400,280);
  v = 20; vs = 20; h = 130;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs,100,"From:to",M4Str,Normal,50,f1,false,AccSClass); 
  EditFieldTL(h,v+=vs,100,"Tag/Objects",M4UStr,Normal,50,f2,false,ObjSClass);
  EditFieldTL(h,v+=vs,100,"Tag/Object Types",M4UStr,Normal,50,f3,false,OTSClass);
  EditFieldTL(h,v+=vs,100,"Cons. Tag/Object Type",M4UStr,Normal,50,f4,false,OTSClass);
  CheckBox(h=h-10,v+=vs,0,"Used Accounts Only",flags[1]);
  CheckBox(h,v+=vs,0,"Show Tag/Object",flags[2]);
  CheckBox(h,v+=30,0,"Reconciled",flags[3]);
  CheckBox(h,v+=vs,0,"Not Reconciled",flags[4]);
  EndWindow;
end;
