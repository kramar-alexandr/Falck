external inner function Boolean AcceptanceStatusColumnTest(string);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner procedure DisplayRecordDetails_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface2_EST(string,string,record POSButtonsVc,string,Integer,Integer);
external inner function string 255 VATZoneEditFieldLabel_EST(Integer);
external inner function string 255 VATZoneNameEST();
external inner function string 60 UserDefined(string,string);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean TouchScreenLookVertical();
external inner function Boolean TouchScreenLookVertical();
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function real ItemButtons(string,Integer);
external inner function Boolean HasCharts();
external inner function Integer LoginShortcutsLines(Integer);
external inner function real DrawPaymentModesButtons_IV_EST(real);
external inner function real FunctionButtons_EST(string);
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasApprovals();
external inner function Boolean HasBase2();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasDownpayments();
external inner function Boolean HasExtTax();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasNLBudget();
external inner function Boolean HasLanguages();
external inner function Boolean HasPersons();
external inner function Boolean HasPrepayments();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasSimAccruals();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasVATZone();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasObjects();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasModAT2();
external inner function Boolean HasModCL();
external inner function Boolean HasModCRM();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModNL();
external inner function Boolean HasModPL();
external inner function Boolean HasModPO();
external inner function Boolean HasModSL();
external inner function Boolean HasModTS();
remote inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);  //Bk HAL //##cc
external inner function real VATZoneButtonsLabelsEST(real,real,real,real);
external inner function Boolean HasJewelleryInterface();
external inner function string 5 GetCreditScoreString(val); //cust KB 1.06.2017
external inner function integer CreditScoreToColor(val); //cust KB 1.06.2017
remote inner procedure GetCredScoreAndDateFor(string, var val, var date); //cust KB 14.09.2017
external inner function boolean CredScoreCanExist(record CUVc); //cust KB 18.04.2018
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasContactClassification();
external inner function Boolean HasPriceLists();

begin
	
	  SetLangMode(LangLithuanian, "LIT", 0);

  return;
end;

window CCatDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Pirk˜jo kategorija",CCatDClass,CGview,-);
  SetWRect(64,80,600,330);
  UseView(CCatVc);
  v = 6; vs = 20; h = 100;
  if (IsEnterprise) then begin
  Tile(0,90,false,"",Code);
  EditField(h,v, 70,"Kodas",Normal,Code,false,0);
  EditField(h,v+=vs,-40,"Apraäymas",Normal,Comment,false,0);
    if (StandardHansa==false) then begin
  EditField(h,v+=vs,-40,"Klasi÷ tipai",Normal,ClassType,false,CTypeSClass);
    end;
  TileButton(1,"Kain.");
  TileButton(2,"Sˆsk.");
    if (StandardHansa==false) then begin
    TileButton(3,"Web");
    end;
    if (HasCharts) then begin
    TileButton(4,"BI"); 
    end;
  Tile(1,110,false,"1",PLCode);
  v = 6; h = 200;
  EditField(h,v,70,"Kainoraätis",Normal,PLCode,false,PLDefSClass);
  if (HasAdvancedPricing) then begin
  EditField(h,v+=vs,70,"Nuolaidos lentel˜",Normal,RebCode,false,RebSClass);
  end;
  EditField(h,v+=vs,55,"Iäankst. apmok. procentas",Normal,DownPayPerc,false,0);
  if (HasItemClassification) then begin
  EditField(h,v+=vs,55,"Pagr. prek˜s klas˜",Normal,MainDispGroup,false,DISClass);
  end;
    if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Internetinio Uìsak. klas˜",Normal,WebOrderClass,false,OrderClassSClass);
    end;
 	EditField(h,v+=vs ,150,"Objektas",Normal,BPIObjects,false,ObjSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 25 June 2018 13:59:39

//##  EditField(h,v+=vs ,70, "Komisini÷ lentel˜",Normal,ComCode,false,ComSClass);
  Tile(2,130,false,"2",ARAcc);
  v = 6; h = 200;
  EditField(h,v ,55,"Debitori÷ sˆsk.",Normal,ARAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Nemoki÷ debitori÷ sˆsk.",Normal,BadARAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Debitori÷ avanso sˆsk.",Normal,OnAccAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Kreditori÷ sˆsk.",Normal,AccAP,false,AccSClass);
  EditField(h,v+=vs,55,"Kreditori÷ avanso sˆsk.",Normal,OnAccAccAP,false,AccSClass);
  EditField(h,v+=vs,55,"Sulaik. sˆsk.",Normal,RetainAcc,false,AccSClass);
    if (StandardHansa==false) then begin
  Tile(3,50,false,"3",WebDisplays);
  v = 6;
  EditField(h,v,55,"Rodyti puslapyje",Normal,WebDisplays,false,WebDisplaySClass);
      EditField(h,v+=vs,55,"Internet. obj. tipas",Normal,WebOTCode,false,OTSClass);
    end;
    if (HasCharts) then begin
    Tile(4,400,false,"4",-); 
    ChartArea(10,6,-10,390,"$CCATDCLass_BIChart"); 
    end;
  end else begin
  SetWRect(64,80,509,200);
  UseView(CCatVc);
    v = 10; vs = 20; h = 130; h2 = 320;
  EditField(h,v, 70,"Kodas",Normal,Code,false,0);
  EditField(h,v+=vs ,-40,"Apraäymas",Normal,Comment,false,0);
    if (HasContactClassification) then begin
  EditField(h,v+=vs ,-40,"Klas. tipai",Normal,ClassType,false,CTypeSClass); 
    end;
    if (HasPriceLists) then begin
  EditField(h,v+=vs ,70, "Kainoraä‹iai",Normal,PLCode,false,PLDefSClass); 
end;
  if (HasModNL) then begin
  EditField(h,v+=vs ,70,"Debitori÷ sˆsk.",Normal,ARAcc,false,AccSClass);
      if (HasRussianPrepayment or HasPrepayments) then begin
        if (HasModSL) then begin
          EditField(h,v+=vs,70,"Debitori÷ avanso sˆsk.",Normal,OnAccAcc,false,AccSClass);
        end;
        if (HasModPL) then begin
          EditField(h,v+=vs,70,"Kreditori÷ avanso sˆsk.",Normal,OnAccAccAP,false,AccSClass);
        end;
      end;
end;
  if (HasAdvancedPricing) then begin
  EditField(h,v+=vs ,70, "Nuolaid÷ lentel˜",Normal,RebCode,false,RebSClass); 
    end;
  end;
  EndWindow;
end;

window AutoCrObjTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,l,v,vm,vs;
  WindowBegin("Falck - Automatically Created Objects",AutoCrObjTClass,CGSbl,-);
  SetBlid(AutoCrObjBlock);
  SetWRect(20,80,480,330);
  vs = 20; h = 140; h1 = 20; h2 = 315; l = 70;
  v=v+vs;
  EditField(h,v,-20,"Object types",Normal,ObjTypes,false,OTSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 25 June 2018 14:30:22

  EndWindow;
end;
